{
  "176": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2915702922",
        "html_url": "https://github.com/mistralai/cookbook/pull/176#issuecomment-2915702922",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/176",
        "id": 2915702922,
        "node_id": "IC_kwDOLBF5j86tyhiK",
        "user": {
          "login": "ravi03071991",
          "id": 12198101,
          "node_id": "MDQ6VXNlcjEyMTk4MTAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/12198101?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ravi03071991",
          "html_url": "https://github.com/ravi03071991",
          "followers_url": "https://api.github.com/users/ravi03071991/followers",
          "following_url": "https://api.github.com/users/ravi03071991/following{/other_user}",
          "gists_url": "https://api.github.com/users/ravi03071991/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ravi03071991/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ravi03071991/subscriptions",
          "organizations_url": "https://api.github.com/users/ravi03071991/orgs",
          "repos_url": "https://api.github.com/users/ravi03071991/repos",
          "events_url": "https://api.github.com/users/ravi03071991/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ravi03071991/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-05-28T09:52:30Z",
        "updated_at": "2025-05-28T09:52:30Z",
        "author_association": "CONTRIBUTOR",
        "body": "@Siddharth-Gandhi, could you please add a Google Colab link at the top so users can quickly experiment with it?\r\n\r\nYou can refer to [this notebook](https://github.com/mistralai/cookbook/blob/main/mistral/agents/earnings_calls/Multi_Agent_Earnings_Call_Analysis_System_(MAECAS).ipynb) as an example.\r\n\r\n![Screenshot 2025-05-28 at 3 21 40\u202fPM](https://github.com/user-attachments/assets/1e14d44b-247a-4508-9a5a-840dda62407d)\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2915702922/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "169": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2905919875",
        "html_url": "https://github.com/mistralai/cookbook/pull/169#issuecomment-2905919875",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/169",
        "id": 2905919875,
        "node_id": "IC_kwDOLBF5j86tNNGD",
        "user": {
          "login": "ggsmith842",
          "id": 57376089,
          "node_id": "MDQ6VXNlcjU3Mzc2MDg5",
          "avatar_url": "https://avatars.githubusercontent.com/u/57376089?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ggsmith842",
          "html_url": "https://github.com/ggsmith842",
          "followers_url": "https://api.github.com/users/ggsmith842/followers",
          "following_url": "https://api.github.com/users/ggsmith842/following{/other_user}",
          "gists_url": "https://api.github.com/users/ggsmith842/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ggsmith842/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ggsmith842/subscriptions",
          "organizations_url": "https://api.github.com/users/ggsmith842/orgs",
          "repos_url": "https://api.github.com/users/ggsmith842/repos",
          "events_url": "https://api.github.com/users/ggsmith842/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ggsmith842/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-05-23T22:07:27Z",
        "updated_at": "2025-05-23T22:07:27Z",
        "author_association": "NONE",
        "body": "Hi @sophiamyang & @pandora-s-git, would either of you be able to review the cookbook submission?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2905919875/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "160": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2802283218",
        "html_url": "https://github.com/mistralai/cookbook/pull/160#issuecomment-2802283218",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/160",
        "id": 2802283218,
        "node_id": "IC_kwDOLBF5j86nB3LS",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-04-14T16:40:39Z",
        "updated_at": "2025-04-14T16:40:39Z",
        "author_association": "COLLABORATOR",
        "body": "@fracapuano Thanks so much for the cookbook! Could you make sure it's runnable on Colab? ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2802283218/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2802447702",
        "html_url": "https://github.com/mistralai/cookbook/pull/160#issuecomment-2802447702",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/160",
        "id": 2802447702,
        "node_id": "IC_kwDOLBF5j86nCfVW",
        "user": {
          "login": "fracapuano",
          "id": 74058581,
          "node_id": "MDQ6VXNlcjc0MDU4NTgx",
          "avatar_url": "https://avatars.githubusercontent.com/u/74058581?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/fracapuano",
          "html_url": "https://github.com/fracapuano",
          "followers_url": "https://api.github.com/users/fracapuano/followers",
          "following_url": "https://api.github.com/users/fracapuano/following{/other_user}",
          "gists_url": "https://api.github.com/users/fracapuano/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/fracapuano/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/fracapuano/subscriptions",
          "organizations_url": "https://api.github.com/users/fracapuano/orgs",
          "repos_url": "https://api.github.com/users/fracapuano/repos",
          "events_url": "https://api.github.com/users/fracapuano/events{/privacy}",
          "received_events_url": "https://api.github.com/users/fracapuano/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-04-14T17:50:03Z",
        "updated_at": "2025-04-14T17:50:03Z",
        "author_association": "COLLABORATOR",
        "body": "hey @sophiamyang \ud83d\udc4b --- did a little update, lmk what you think of it!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2802447702/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2802574033",
        "html_url": "https://github.com/mistralai/cookbook/pull/160#issuecomment-2802574033",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/160",
        "id": 2802574033,
        "node_id": "IC_kwDOLBF5j86nC-LR",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-04-14T18:28:26Z",
        "updated_at": "2025-04-14T18:28:26Z",
        "author_association": "COLLABORATOR",
        "body": "Thanks @fracapuano ! I got this error somehow:\r\n\r\n```\r\nWriting MetaGPT/spo.py\r\n---------------------------------------------------------------------------\r\nFileNotFoundError                         Traceback (most recent call last)\r\n[<ipython-input-17-1e3ffc3a4e45>](https://localhost:8080/#) in <cell line: 0>()\r\n----> 1 get_ipython().run_cell_magic('writefile', 'MetaGPT/spo.py', '\\nfrom metagpt.ext.spo.components.optimizer import PromptOptimizer\\nfrom metagpt.ext.spo.utils.llm_client import SPO_LLM\\n\\n# Initialize LLM settings\\nSPO_LLM.initialize(\\n    # same temperature settings as metagpt\\'s default!\\n    optimize_kwargs={\\n        \"model\": \"mistral-large-latest\", \\n        \"temperature\": 0.6\\n    },\\n    evaluate_kwargs={\\n        \"model\": \"mistral-small-latest\", \\n        \"temperature\": 0.3\\n    },\\n    execute_kwargs={\\n        \"model\": \"mistral-small-latest\", \\n        \"temperature\": 0\\n    }\\n)\\n\\ntemplate_name = \"job.yaml\"  # change this for each prompt!\\n\\n# Create and run optimizer\\noptimizer = PromptOptimizer(\\n    optimized_path=\"workspace\",  # Output directory\\n    initial_round=1,  # Starting round\\n    max_rounds=5,  # Maximum optimization rounds\\n    template=template_name,  # Template file - Change this for each prompt!\\n    name=\"Mistral-Prompt-Opt\",  # Project name\\n)\\n\\noptimizer.optimize()\\n')\r\n\r\n3 frames\r\n<decorator-gen-98> in writefile(self, line, cell)\r\n\r\n/usr/local/lib/python3.11/dist-packages/IPython/core/magics/osm.py in writefile(self, line, cell)\r\n    854         with io.open(filename, mode, encoding='utf-8') as f:\r\n    855             f.write(cell)\r\n\r\nFileNotFoundError: [Errno 2] No such file or directory: 'MetaGPT/spo.py'\r\n```",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2802574033/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2812969610",
        "html_url": "https://github.com/mistralai/cookbook/pull/160#issuecomment-2812969610",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/160",
        "id": 2812969610,
        "node_id": "IC_kwDOLBF5j86nqoKK",
        "user": {
          "login": "jaccolor2",
          "id": 98039916,
          "node_id": "U_kgDOBdf4bA",
          "avatar_url": "https://avatars.githubusercontent.com/u/98039916?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jaccolor2",
          "html_url": "https://github.com/jaccolor2",
          "followers_url": "https://api.github.com/users/jaccolor2/followers",
          "following_url": "https://api.github.com/users/jaccolor2/following{/other_user}",
          "gists_url": "https://api.github.com/users/jaccolor2/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jaccolor2/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jaccolor2/subscriptions",
          "organizations_url": "https://api.github.com/users/jaccolor2/orgs",
          "repos_url": "https://api.github.com/users/jaccolor2/repos",
          "events_url": "https://api.github.com/users/jaccolor2/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jaccolor2/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-04-17T13:39:32Z",
        "updated_at": "2025-04-17T13:39:32Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hi @fracapuano!\r\n\r\nI've been trying to run your cookbook, but i ran into this error message:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/mistralai/MetaGPT/metagpt/spo.py\", line 2, in <module>\r\n    from metagpt.ext.spo.components.optimizer import PromptOptimizer\r\nModuleNotFoundError: No module named 'metagpt'\r\n```\r\nThough i followed all the pip install and added a:\r\n```sh\r\npip install metagpt\r\n```\r\nto make sure there wouldn't be any problem, but without success.\r\n\r\nWould you have any insights on this?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2812969610/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2812986919",
        "html_url": "https://github.com/mistralai/cookbook/pull/160#issuecomment-2812986919",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/160",
        "id": 2812986919,
        "node_id": "IC_kwDOLBF5j86nqsYn",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-04-17T13:45:41Z",
        "updated_at": "2025-04-17T13:45:41Z",
        "author_association": "COLLABORATOR",
        "body": "interesting. is it on pip? if so, we don't need to clone to whole repo and install from the Github repo @fracapuano? \r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2812986919/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2815195427",
        "html_url": "https://github.com/mistralai/cookbook/pull/160#issuecomment-2815195427",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/160",
        "id": 2815195427,
        "node_id": "IC_kwDOLBF5j86nzHkj",
        "user": {
          "login": "fracapuano",
          "id": 74058581,
          "node_id": "MDQ6VXNlcjc0MDU4NTgx",
          "avatar_url": "https://avatars.githubusercontent.com/u/74058581?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/fracapuano",
          "html_url": "https://github.com/fracapuano",
          "followers_url": "https://api.github.com/users/fracapuano/followers",
          "following_url": "https://api.github.com/users/fracapuano/following{/other_user}",
          "gists_url": "https://api.github.com/users/fracapuano/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/fracapuano/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/fracapuano/subscriptions",
          "organizations_url": "https://api.github.com/users/fracapuano/orgs",
          "repos_url": "https://api.github.com/users/fracapuano/repos",
          "events_url": "https://api.github.com/users/fracapuano/events{/privacy}",
          "received_events_url": "https://api.github.com/users/fracapuano/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-04-18T10:25:11Z",
        "updated_at": "2025-04-19T13:17:31Z",
        "author_association": "COLLABORATOR",
        "body": "hey @jaccolor2 \ud83d\udc4b thank you so much for trying out my cookbook \ud83d\ude4f \r\n- From what you say it looks like you haven't properly set up the notebook\r\n- Did you (1) clone the repository and (2) %cd into it?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2815195427/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2816703818",
        "html_url": "https://github.com/mistralai/cookbook/pull/160#issuecomment-2816703818",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/160",
        "id": 2816703818,
        "node_id": "IC_kwDOLBF5j86n431K",
        "user": {
          "login": "fracapuano",
          "id": 74058581,
          "node_id": "MDQ6VXNlcjc0MDU4NTgx",
          "avatar_url": "https://avatars.githubusercontent.com/u/74058581?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/fracapuano",
          "html_url": "https://github.com/fracapuano",
          "followers_url": "https://api.github.com/users/fracapuano/followers",
          "following_url": "https://api.github.com/users/fracapuano/following{/other_user}",
          "gists_url": "https://api.github.com/users/fracapuano/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/fracapuano/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/fracapuano/subscriptions",
          "organizations_url": "https://api.github.com/users/fracapuano/orgs",
          "repos_url": "https://api.github.com/users/fracapuano/repos",
          "events_url": "https://api.github.com/users/fracapuano/events{/privacy}",
          "received_events_url": "https://api.github.com/users/fracapuano/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-04-19T13:17:45Z",
        "updated_at": "2025-04-19T13:17:45Z",
        "author_association": "COLLABORATOR",
        "body": "> interesting. is it on pip? if so, we don't need to clone\r\n\r\n@sophiamyang, it seems pypi's `metagpt` is not up to date with SPO. When I tried to implement this installing from pip rather than cloning the repo everything broke apart \ud83e\udee0",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2816703818/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2816719793",
        "html_url": "https://github.com/mistralai/cookbook/pull/160#issuecomment-2816719793",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/160",
        "id": 2816719793,
        "node_id": "IC_kwDOLBF5j86n47ux",
        "user": {
          "login": "fracapuano",
          "id": 74058581,
          "node_id": "MDQ6VXNlcjc0MDU4NTgx",
          "avatar_url": "https://avatars.githubusercontent.com/u/74058581?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/fracapuano",
          "html_url": "https://github.com/fracapuano",
          "followers_url": "https://api.github.com/users/fracapuano/followers",
          "following_url": "https://api.github.com/users/fracapuano/following{/other_user}",
          "gists_url": "https://api.github.com/users/fracapuano/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/fracapuano/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/fracapuano/subscriptions",
          "organizations_url": "https://api.github.com/users/fracapuano/orgs",
          "repos_url": "https://api.github.com/users/fracapuano/repos",
          "events_url": "https://api.github.com/users/fracapuano/events{/privacy}",
          "received_events_url": "https://api.github.com/users/fracapuano/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-04-19T14:01:31Z",
        "updated_at": "2025-04-19T14:01:31Z",
        "author_association": "COLLABORATOR",
        "body": "Ciao @sophiamyang \ud83d\udc4b\r\n- [d5ba0f7](https://github.com/mistralai/cookbook/pull/160/commits/d5ba0f791f0f5aca8968967a6cb0e4d12fe1b989)adds the report I have drafted in a markdown file. Lmk if you rather have it somewhere else than in this directory\r\n- [dba5b75](https://github.com/mistralai/cookbook/pull/160/commits/dba5b75187607704ab3731cc00d7b756fe7ed508) fixes the directory issue when running `python spo.py` \ud83e\udee0 In general, I agree having to clone the repo is rather inconvenient, but I don't think there is a way around it as the repository seems to be outdated. Perhaps one could re-implement SPO into a mini-SPO directory, avoiding to rely on metagpt entirely & keeping this clean",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2816719793/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2841010320",
        "html_url": "https://github.com/mistralai/cookbook/pull/160#issuecomment-2841010320",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/160",
        "id": 2841010320,
        "node_id": "IC_kwDOLBF5j86pVmCQ",
        "user": {
          "login": "fracapuano",
          "id": 74058581,
          "node_id": "MDQ6VXNlcjc0MDU4NTgx",
          "avatar_url": "https://avatars.githubusercontent.com/u/74058581?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/fracapuano",
          "html_url": "https://github.com/fracapuano",
          "followers_url": "https://api.github.com/users/fracapuano/followers",
          "following_url": "https://api.github.com/users/fracapuano/following{/other_user}",
          "gists_url": "https://api.github.com/users/fracapuano/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/fracapuano/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/fracapuano/subscriptions",
          "organizations_url": "https://api.github.com/users/fracapuano/orgs",
          "repos_url": "https://api.github.com/users/fracapuano/repos",
          "events_url": "https://api.github.com/users/fracapuano/events{/privacy}",
          "received_events_url": "https://api.github.com/users/fracapuano/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-04-30T07:04:14Z",
        "updated_at": "2025-04-30T07:04:14Z",
        "author_association": "COLLABORATOR",
        "body": "Hey @sophiamyang @pandora-s-git \ud83d\udc4b Mind reviewing when you have a chance? \ud83d\ude4f ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2841010320/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "142": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2708503715",
        "html_url": "https://github.com/mistralai/cookbook/pull/142#issuecomment-2708503715",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/142",
        "id": 2708503715,
        "node_id": "IC_kwDOLBF5j86hcHyj",
        "user": {
          "login": "dilipshekhar",
          "id": 7621959,
          "node_id": "MDQ6VXNlcjc2MjE5NTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7621959?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dilipshekhar",
          "html_url": "https://github.com/dilipshekhar",
          "followers_url": "https://api.github.com/users/dilipshekhar/followers",
          "following_url": "https://api.github.com/users/dilipshekhar/following{/other_user}",
          "gists_url": "https://api.github.com/users/dilipshekhar/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/dilipshekhar/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/dilipshekhar/subscriptions",
          "organizations_url": "https://api.github.com/users/dilipshekhar/orgs",
          "repos_url": "https://api.github.com/users/dilipshekhar/repos",
          "events_url": "https://api.github.com/users/dilipshekhar/events{/privacy}",
          "received_events_url": "https://api.github.com/users/dilipshekhar/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-03-08T22:03:43Z",
        "updated_at": "2025-03-08T22:05:36Z",
        "author_association": "CONTRIBUTOR",
        "body": "This was just a one line change in structured_ocr.ipynb in this cell:\r\n\r\nfrom mistralai.models import OCRResponse\r\nfrom IPython.display import Markdown, display\r\n\r\ndef replace_images_in_markdown(markdown_str: str, images_dict: dict) -> str:\r\n    for img_name, base64_str in images_dict.items():\r\n        markdown_str = markdown_str.replace(f\"![{img_name}]({img_name})\", f\"![{img_name}]({base64_str})\")\r\n    return markdown_str\r\n\r\ndef get_combined_markdown(ocr_response: OCRResponse) -> str:\r\n  markdowns: list[str] = []\r\n  for page in **ocr_response**.pages:\r\n    image_data = {}\r\n    for img in page.images:\r\n      image_data[img.id] = img.image_base64\r\n    markdowns.append(replace_images_in_markdown(page.markdown, image_data))\r\n\r\n  return \"\\n\\n\".join(markdowns)\r\n\r\ndisplay(Markdown(get_combined_markdown(pdf_response)))\r\n\r\n\r\n------------\r\n  for page in pdf_response.pages: \r\n\r\nwas changed to \r\n\r\n\r\n  for page in **ocr_response**.pages:",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2708503715/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2710026877",
        "html_url": "https://github.com/mistralai/cookbook/pull/142#issuecomment-2710026877",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/142",
        "id": 2710026877,
        "node_id": "IC_kwDOLBF5j86hh7p9",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-03-10T10:00:42Z",
        "updated_at": "2025-03-10T10:00:42Z",
        "author_association": "COLLABORATOR",
        "body": "Thank you for the fix!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2710026877/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "137": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2706615191",
        "html_url": "https://github.com/mistralai/cookbook/pull/137#issuecomment-2706615191",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/137",
        "id": 2706615191,
        "node_id": "IC_kwDOLBF5j86hU6uX",
        "user": {
          "login": "fracapuano",
          "id": 74058581,
          "node_id": "MDQ6VXNlcjc0MDU4NTgx",
          "avatar_url": "https://avatars.githubusercontent.com/u/74058581?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/fracapuano",
          "html_url": "https://github.com/fracapuano",
          "followers_url": "https://api.github.com/users/fracapuano/followers",
          "following_url": "https://api.github.com/users/fracapuano/following{/other_user}",
          "gists_url": "https://api.github.com/users/fracapuano/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/fracapuano/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/fracapuano/subscriptions",
          "organizations_url": "https://api.github.com/users/fracapuano/orgs",
          "repos_url": "https://api.github.com/users/fracapuano/repos",
          "events_url": "https://api.github.com/users/fracapuano/events{/privacy}",
          "received_events_url": "https://api.github.com/users/fracapuano/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-03-07T14:39:36Z",
        "updated_at": "2025-03-07T14:39:36Z",
        "author_association": "COLLABORATOR",
        "body": "Hey @stevenbos123 \ud83d\udc4b thank you so much for contributing! I have just checked the code, LGTM \ud83d\udc4d \r\n\r\nThank you so much for contributing! \ud83e\udd17 ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2706615191/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "136": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2718504232",
        "html_url": "https://github.com/mistralai/cookbook/pull/136#issuecomment-2718504232",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/136",
        "id": 2718504232,
        "node_id": "IC_kwDOLBF5j86iCRUo",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-03-12T16:46:37Z",
        "updated_at": "2025-03-12T16:46:37Z",
        "author_association": "COLLABORATOR",
        "body": "Thanks for contributing but this is not we are looking for in a cookbook unfortunately. ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2718504232/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "131": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2662925226",
        "html_url": "https://github.com/mistralai/cookbook/pull/131#issuecomment-2662925226",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/131",
        "id": 2662925226,
        "node_id": "IC_kwDOLBF5j86euQOq",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-02-17T12:06:45Z",
        "updated_at": "2025-02-17T12:06:45Z",
        "author_association": "COLLABORATOR",
        "body": "Thank you looks good! Will be merging.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2662925226/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2662950621",
        "html_url": "https://github.com/mistralai/cookbook/pull/131#issuecomment-2662950621",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/131",
        "id": 2662950621,
        "node_id": "IC_kwDOLBF5j86euWbd",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-02-17T12:17:40Z",
        "updated_at": "2025-02-17T12:17:40Z",
        "author_association": "COLLABORATOR",
        "body": "Actually I just noticed a weird thing that is likely to be a bug while running it, seems like on Chrome on Windows it overflows in the x axis, and it even has some weird glitches/flickering.\r\n![image](https://github.com/user-attachments/assets/4f04f1ce-c1b4-4188-b359-a969b8b61d89)\r\n\r\nits a visual bug, just reporting while I am at it! @kobindra , however since it all seems good expect this, I will be merging it ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2662950621/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "127": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2582452739",
        "html_url": "https://github.com/mistralai/cookbook/pull/127#issuecomment-2582452739",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/127",
        "id": 2582452739,
        "node_id": "IC_kwDOLBF5j86Z7RoD",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-01-10T11:08:57Z",
        "updated_at": "2025-01-10T11:09:17Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @NivekAreir, thanks so much for the amazing cookbook! I wonder if you could expand exactly what's needed to do this: \r\n\r\n\"Follow this [installation guide](https://www.google.com/url?q=https%3A%2F%2Fpython.langchain.com%2Fdocs%2Ftutorials%2Fsql_qa%2F) to create Chinook.db in the same directory as this notebook.\"\r\n\r\nI don't think we want to direct people to another platform if possible. Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2582452739/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "126": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2558271523",
        "html_url": "https://github.com/mistralai/cookbook/pull/126#issuecomment-2558271523",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/126",
        "id": 2558271523,
        "node_id": "IC_kwDOLBF5j86YfCAj",
        "user": {
          "login": "norbinsh",
          "id": 12733941,
          "node_id": "MDQ6VXNlcjEyNzMzOTQx",
          "avatar_url": "https://avatars.githubusercontent.com/u/12733941?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/norbinsh",
          "html_url": "https://github.com/norbinsh",
          "followers_url": "https://api.github.com/users/norbinsh/followers",
          "following_url": "https://api.github.com/users/norbinsh/following{/other_user}",
          "gists_url": "https://api.github.com/users/norbinsh/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/norbinsh/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/norbinsh/subscriptions",
          "organizations_url": "https://api.github.com/users/norbinsh/orgs",
          "repos_url": "https://api.github.com/users/norbinsh/repos",
          "events_url": "https://api.github.com/users/norbinsh/events{/privacy}",
          "received_events_url": "https://api.github.com/users/norbinsh/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-21T23:55:08Z",
        "updated_at": "2024-12-21T23:55:08Z",
        "author_association": "NONE",
        "body": "@sophiamyang hopefully i followed everything correctly, happy to tweak based on feedback.\r\nThanks!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2558271523/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "125": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2558190918",
        "html_url": "https://github.com/mistralai/cookbook/pull/125#issuecomment-2558190918",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/125",
        "id": 2558190918,
        "node_id": "IC_kwDOLBF5j86YeuVG",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-21T18:06:51Z",
        "updated_at": "2024-12-21T18:06:51Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @Jgilhuly thanks so much for the PR! For the \"Let's add Observability to our Agent\" section. Could you add \"Optional\" to the header or move the section down to the \"Optional) Let's Evaluate the Agent\" section? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2558190918/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2558201853",
        "html_url": "https://github.com/mistralai/cookbook/pull/125#issuecomment-2558201853",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/125",
        "id": 2558201853,
        "node_id": "IC_kwDOLBF5j86Yew_9",
        "user": {
          "login": "Jgilhuly",
          "id": 8853560,
          "node_id": "MDQ6VXNlcjg4NTM1NjA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8853560?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jgilhuly",
          "html_url": "https://github.com/Jgilhuly",
          "followers_url": "https://api.github.com/users/Jgilhuly/followers",
          "following_url": "https://api.github.com/users/Jgilhuly/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jgilhuly/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jgilhuly/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jgilhuly/subscriptions",
          "organizations_url": "https://api.github.com/users/Jgilhuly/orgs",
          "repos_url": "https://api.github.com/users/Jgilhuly/repos",
          "events_url": "https://api.github.com/users/Jgilhuly/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jgilhuly/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-21T18:46:39Z",
        "updated_at": "2024-12-21T18:46:39Z",
        "author_association": "CONTRIBUTOR",
        "body": "@sophiamyang just shifted that section down! Now all the new stuff should be encompassed under that optional section",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2558201853/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2560189057",
        "html_url": "https://github.com/mistralai/cookbook/pull/125#issuecomment-2560189057",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/125",
        "id": 2560189057,
        "node_id": "IC_kwDOLBF5j86YmWKB",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-23T19:17:08Z",
        "updated_at": "2024-12-23T19:17:08Z",
        "author_association": "COLLABORATOR",
        "body": "Thanks so much! Merged! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2560189057/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 1,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "122": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2557150643",
        "html_url": "https://github.com/mistralai/cookbook/pull/122#issuecomment-2557150643",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/122",
        "id": 2557150643,
        "node_id": "IC_kwDOLBF5j86YawWz",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-20T14:46:49Z",
        "updated_at": "2024-12-20T14:46:49Z",
        "author_association": "COLLABORATOR",
        "body": "Nice example! Thanks for the PR @ChernovAndrey!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2557150643/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "121": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2523820518",
        "html_url": "https://github.com/mistralai/cookbook/pull/121#issuecomment-2523820518",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/121",
        "id": 2523820518,
        "node_id": "IC_kwDOLBF5j86WbnHm",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-06T17:35:23Z",
        "updated_at": "2024-12-06T17:35:23Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @NirantK thanks so much for the cookbook! It has trouble running in Colab. Could you make sure it runs on Colab? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2523820518/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2527709987",
        "html_url": "https://github.com/mistralai/cookbook/pull/121#issuecomment-2527709987",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/121",
        "id": 2527709987,
        "node_id": "IC_kwDOLBF5j86Wqcsj",
        "user": {
          "login": "NirantK",
          "id": 3250749,
          "node_id": "MDQ6VXNlcjMyNTA3NDk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3250749?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/NirantK",
          "html_url": "https://github.com/NirantK",
          "followers_url": "https://api.github.com/users/NirantK/followers",
          "following_url": "https://api.github.com/users/NirantK/following{/other_user}",
          "gists_url": "https://api.github.com/users/NirantK/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/NirantK/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/NirantK/subscriptions",
          "organizations_url": "https://api.github.com/users/NirantK/orgs",
          "repos_url": "https://api.github.com/users/NirantK/repos",
          "events_url": "https://api.github.com/users/NirantK/events{/privacy}",
          "received_events_url": "https://api.github.com/users/NirantK/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-09T11:53:36Z",
        "updated_at": "2024-12-09T11:53:36Z",
        "author_association": "CONTRIBUTOR",
        "body": "Aaah. `PIL` strikes again. Will look into this tomorrow first thing! \r\n\r\nSorry I missed this earlier @sophiamyang ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2527709987/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2557501328",
        "html_url": "https://github.com/mistralai/cookbook/pull/121#issuecomment-2557501328",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/121",
        "id": 2557501328,
        "node_id": "IC_kwDOLBF5j86YcF-Q",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-20T18:16:58Z",
        "updated_at": "2024-12-20T18:16:58Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @NirantK , thanks for the updates! Does uv not work in Colab? I can't seem to make it work in Colab. Could you help fix? Thanks!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2557501328/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "120": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2523822221",
        "html_url": "https://github.com/mistralai/cookbook/pull/120#issuecomment-2523822221",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/120",
        "id": 2523822221,
        "node_id": "IC_kwDOLBF5j86WbniN",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-06T17:36:28Z",
        "updated_at": "2024-12-06T17:36:28Z",
        "author_association": "COLLABORATOR",
        "body": "Thanks so much for the PR @NirantK! Merged! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2523822221/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "119": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2517704638",
        "html_url": "https://github.com/mistralai/cookbook/pull/119#issuecomment-2517704638",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/119",
        "id": 2517704638,
        "node_id": "IC_kwDOLBF5j86WER--",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-04T15:07:23Z",
        "updated_at": "2024-12-04T15:07:23Z",
        "author_association": "COLLABORATOR",
        "body": "Thanks!!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2517704638/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "115": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498717236",
        "html_url": "https://github.com/mistralai/cookbook/pull/115#issuecomment-2498717236",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/115",
        "id": 2498717236,
        "node_id": "IC_kwDOLBF5j86U72Y0",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-25T18:11:56Z",
        "updated_at": "2024-11-25T18:13:20Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @patcher9 , thanks so much for the PR! Could you remove your API key from the notebook and delete it from la Plateform? We don't want to leak your key! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498717236/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498720287",
        "html_url": "https://github.com/mistralai/cookbook/pull/115#issuecomment-2498720287",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/115",
        "id": 2498720287,
        "node_id": "IC_kwDOLBF5j86U73If",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-25T18:13:40Z",
        "updated_at": "2024-11-25T18:13:40Z",
        "author_association": "COLLABORATOR",
        "body": "Also I got this error `ERROR:openlit:Failed to instrument langchain: No module named 'langchain_community'` ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498720287/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2500875822",
        "html_url": "https://github.com/mistralai/cookbook/pull/115#issuecomment-2500875822",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/115",
        "id": 2500875822,
        "node_id": "IC_kwDOLBF5j86VEFYu",
        "user": {
          "login": "patcher9",
          "id": 165258753,
          "node_id": "U_kgDOCdmmAQ",
          "avatar_url": "https://avatars.githubusercontent.com/u/165258753?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/patcher9",
          "html_url": "https://github.com/patcher9",
          "followers_url": "https://api.github.com/users/patcher9/followers",
          "following_url": "https://api.github.com/users/patcher9/following{/other_user}",
          "gists_url": "https://api.github.com/users/patcher9/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/patcher9/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/patcher9/subscriptions",
          "organizations_url": "https://api.github.com/users/patcher9/orgs",
          "repos_url": "https://api.github.com/users/patcher9/repos",
          "events_url": "https://api.github.com/users/patcher9/events{/privacy}",
          "received_events_url": "https://api.github.com/users/patcher9/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-26T13:58:41Z",
        "updated_at": "2024-11-26T13:58:41Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Hi @patcher9 , thanks so much for the PR! Could you remove your API key from the notebook and delete it from la Plateform? We don't want to leak your key!\r\n\r\nThanks, That was an already decommissioned key so wanted it as an example but have removed it now\r\n\r\n\r\n> Also I got this error ERROR:openlit:Failed to instrument langchain: No module named 'langchain_community'\r\n\r\nYup, This should be fixed now in the notebook, We do require langchain-community (Not sure how langchain is already instealled in the system but since it is installed, we also need to the community package to complete that instrumentation)\r\n\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2500875822/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521066821",
        "html_url": "https://github.com/mistralai/cookbook/pull/115#issuecomment-2521066821",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/115",
        "id": 2521066821,
        "node_id": "IC_kwDOLBF5j86WRG1F",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-05T17:57:57Z",
        "updated_at": "2024-12-05T17:57:57Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @patcher9, I can still see the API key, could you remove it? Thanks!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521066821/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2527069599",
        "html_url": "https://github.com/mistralai/cookbook/pull/115#issuecomment-2527069599",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/115",
        "id": 2527069599,
        "node_id": "IC_kwDOLBF5j86WoAWf",
        "user": {
          "login": "patcher9",
          "id": 165258753,
          "node_id": "U_kgDOCdmmAQ",
          "avatar_url": "https://avatars.githubusercontent.com/u/165258753?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/patcher9",
          "html_url": "https://github.com/patcher9",
          "followers_url": "https://api.github.com/users/patcher9/followers",
          "following_url": "https://api.github.com/users/patcher9/following{/other_user}",
          "gists_url": "https://api.github.com/users/patcher9/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/patcher9/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/patcher9/subscriptions",
          "organizations_url": "https://api.github.com/users/patcher9/orgs",
          "repos_url": "https://api.github.com/users/patcher9/repos",
          "events_url": "https://api.github.com/users/patcher9/events{/privacy}",
          "received_events_url": "https://api.github.com/users/patcher9/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-09T06:43:03Z",
        "updated_at": "2024-12-09T06:43:03Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Hi @patcher9, I can still see the API key, could you remove it? Thanks!\r\n\r\nHey @sophiamyang My bad, I think while updating the notebook I uploaded the wrong one. Anyhow, I have removed the API Key now and used a placeholder now\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2527069599/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2556597985",
        "html_url": "https://github.com/mistralai/cookbook/pull/115#issuecomment-2556597985",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/115",
        "id": 2556597985,
        "node_id": "IC_kwDOLBF5j86YYpbh",
        "user": {
          "login": "patcher9",
          "id": 165258753,
          "node_id": "U_kgDOCdmmAQ",
          "avatar_url": "https://avatars.githubusercontent.com/u/165258753?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/patcher9",
          "html_url": "https://github.com/patcher9",
          "followers_url": "https://api.github.com/users/patcher9/followers",
          "following_url": "https://api.github.com/users/patcher9/following{/other_user}",
          "gists_url": "https://api.github.com/users/patcher9/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/patcher9/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/patcher9/subscriptions",
          "organizations_url": "https://api.github.com/users/patcher9/orgs",
          "repos_url": "https://api.github.com/users/patcher9/repos",
          "events_url": "https://api.github.com/users/patcher9/events{/privacy}",
          "received_events_url": "https://api.github.com/users/patcher9/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-20T09:21:59Z",
        "updated_at": "2024-12-20T09:21:59Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hey @sophiamyang Lemme know if this needs anything else to get it merge ready",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2556597985/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2557518260",
        "html_url": "https://github.com/mistralai/cookbook/pull/115#issuecomment-2557518260",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/115",
        "id": 2557518260,
        "node_id": "IC_kwDOLBF5j86YcKG0",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-20T18:29:02Z",
        "updated_at": "2024-12-20T18:29:02Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @patcher9 , thanks for the cookbook! Does it work on colab? Am I supposed to see a link to see the dashboard? \r\n<img width=\"470\" alt=\"image\" src=\"https://github.com/user-attachments/assets/7f58fcb4-d158-4f79-9df0-71ba0104858c\" />\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2557518260/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2558043548",
        "html_url": "https://github.com/mistralai/cookbook/pull/115#issuecomment-2558043548",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/115",
        "id": 2558043548,
        "node_id": "IC_kwDOLBF5j86YeKWc",
        "user": {
          "login": "patcher9",
          "id": 165258753,
          "node_id": "U_kgDOCdmmAQ",
          "avatar_url": "https://avatars.githubusercontent.com/u/165258753?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/patcher9",
          "html_url": "https://github.com/patcher9",
          "followers_url": "https://api.github.com/users/patcher9/followers",
          "following_url": "https://api.github.com/users/patcher9/following{/other_user}",
          "gists_url": "https://api.github.com/users/patcher9/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/patcher9/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/patcher9/subscriptions",
          "organizations_url": "https://api.github.com/users/patcher9/orgs",
          "repos_url": "https://api.github.com/users/patcher9/repos",
          "events_url": "https://api.github.com/users/patcher9/events{/privacy}",
          "received_events_url": "https://api.github.com/users/patcher9/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-21T08:06:09Z",
        "updated_at": "2024-12-21T08:38:57Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Does it work on colab? \r\n\r\nYes it does\r\n\r\n> Am I supposed to see a link to see the dashboard?\r\n\r\nNo by default the data is logged to console, Once the user specifies the endpoint to send data (as shown in the cookbook as the next steps) then the data is sent to the backend",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2558043548/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2558194322",
        "html_url": "https://github.com/mistralai/cookbook/pull/115#issuecomment-2558194322",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/115",
        "id": 2558194322,
        "node_id": "IC_kwDOLBF5j86YevKS",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-21T18:21:07Z",
        "updated_at": "2024-12-21T18:21:07Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @patcher9 thanks for responding! I guess I'm confused how should I see the metrics. I don't see any logs anywhere. Thanks!  ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2558194322/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2558323877",
        "html_url": "https://github.com/mistralai/cookbook/pull/115#issuecomment-2558323877",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/115",
        "id": 2558323877,
        "node_id": "IC_kwDOLBF5j86YfOyl",
        "user": {
          "login": "patcher9",
          "id": 165258753,
          "node_id": "U_kgDOCdmmAQ",
          "avatar_url": "https://avatars.githubusercontent.com/u/165258753?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/patcher9",
          "html_url": "https://github.com/patcher9",
          "followers_url": "https://api.github.com/users/patcher9/followers",
          "following_url": "https://api.github.com/users/patcher9/following{/other_user}",
          "gists_url": "https://api.github.com/users/patcher9/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/patcher9/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/patcher9/subscriptions",
          "organizations_url": "https://api.github.com/users/patcher9/orgs",
          "repos_url": "https://api.github.com/users/patcher9/repos",
          "events_url": "https://api.github.com/users/patcher9/events{/privacy}",
          "received_events_url": "https://api.github.com/users/patcher9/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-22T04:11:46Z",
        "updated_at": "2024-12-22T04:11:46Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hey @sophiamyang My bad, So when the user adds openlit.init() that just initialises the automatic trace and metric generation. The actual trace and metric you can see in the chat completion cell as you can see below.\r\n\r\n<img width=\"821\" alt=\"Screenshot 2024-12-22 at 9 40 05\u202fAM\" src=\"https://github.com/user-attachments/assets/6831751c-eac8-4a47-8cf1-38c3809ae3ae\" />\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2558323877/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2579576091",
        "html_url": "https://github.com/mistralai/cookbook/pull/115#issuecomment-2579576091",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/115",
        "id": 2579576091,
        "node_id": "IC_kwDOLBF5j86ZwTUb",
        "user": {
          "login": "patcher9",
          "id": 165258753,
          "node_id": "U_kgDOCdmmAQ",
          "avatar_url": "https://avatars.githubusercontent.com/u/165258753?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/patcher9",
          "html_url": "https://github.com/patcher9",
          "followers_url": "https://api.github.com/users/patcher9/followers",
          "following_url": "https://api.github.com/users/patcher9/following{/other_user}",
          "gists_url": "https://api.github.com/users/patcher9/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/patcher9/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/patcher9/subscriptions",
          "organizations_url": "https://api.github.com/users/patcher9/orgs",
          "repos_url": "https://api.github.com/users/patcher9/repos",
          "events_url": "https://api.github.com/users/patcher9/events{/privacy}",
          "received_events_url": "https://api.github.com/users/patcher9/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-01-09T09:30:32Z",
        "updated_at": "2025-01-09T09:30:32Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hey @sophiamyang any update on this?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2579576091/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2581068107",
        "html_url": "https://github.com/mistralai/cookbook/pull/115#issuecomment-2581068107",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/115",
        "id": 2581068107,
        "node_id": "IC_kwDOLBF5j86Z1_lL",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-01-09T19:13:54Z",
        "updated_at": "2025-01-09T19:13:54Z",
        "author_association": "COLLABORATOR",
        "body": "Merge thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2581068107/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "114": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498218231",
        "html_url": "https://github.com/mistralai/cookbook/pull/114#issuecomment-2498218231",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/114",
        "id": 2498218231,
        "node_id": "IC_kwDOLBF5j86U58j3",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-25T14:44:58Z",
        "updated_at": "2024-11-25T14:44:58Z",
        "author_association": "COLLABORATOR",
        "body": "Thank you so much for the PR! \r\n- Could you add pip install instructions to make sure it runs in Colab?\r\n- Could you move the example to the third_party/neo4j folder? \r\nThank you! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498218231/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "113": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498729127",
        "html_url": "https://github.com/mistralai/cookbook/pull/113#issuecomment-2498729127",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/113",
        "id": 2498729127,
        "node_id": "IC_kwDOLBF5j86U75Sn",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-25T18:18:26Z",
        "updated_at": "2024-11-25T18:18:26Z",
        "author_association": "COLLABORATOR",
        "body": "Very nice example thank you! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498729127/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "112": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498731063",
        "html_url": "https://github.com/mistralai/cookbook/pull/112#issuecomment-2498731063",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/112",
        "id": 2498731063,
        "node_id": "IC_kwDOLBF5j86U75w3",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-25T18:19:27Z",
        "updated_at": "2024-11-25T18:19:27Z",
        "author_association": "COLLABORATOR",
        "body": "As discussed, @karthikscale3 will help add a more interesting RAG example. Thank you! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498731063/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501351744",
        "html_url": "https://github.com/mistralai/cookbook/pull/112#issuecomment-2501351744",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/112",
        "id": 2501351744,
        "node_id": "IC_kwDOLBF5j86VF5lA",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-26T16:35:13Z",
        "updated_at": "2024-11-26T16:35:13Z",
        "author_association": "COLLABORATOR",
        "body": "Thanks @karthikscale3! Could you make sure the cookbook runs in Colab please? For example, you might want to list all the packages in pip directly or download the requirements.txt first before %pip install -r requirements.txt. Thank you so much! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501351744/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2512132187",
        "html_url": "https://github.com/mistralai/cookbook/pull/112#issuecomment-2512132187",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/112",
        "id": 2512132187,
        "node_id": "IC_kwDOLBF5j86VvBhb",
        "user": {
          "login": "karthikscale3",
          "id": 105607645,
          "node_id": "U_kgDOBktx3Q",
          "avatar_url": "https://avatars.githubusercontent.com/u/105607645?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/karthikscale3",
          "html_url": "https://github.com/karthikscale3",
          "followers_url": "https://api.github.com/users/karthikscale3/followers",
          "following_url": "https://api.github.com/users/karthikscale3/following{/other_user}",
          "gists_url": "https://api.github.com/users/karthikscale3/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/karthikscale3/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/karthikscale3/subscriptions",
          "organizations_url": "https://api.github.com/users/karthikscale3/orgs",
          "repos_url": "https://api.github.com/users/karthikscale3/repos",
          "events_url": "https://api.github.com/users/karthikscale3/events{/privacy}",
          "received_events_url": "https://api.github.com/users/karthikscale3/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-02T16:47:20Z",
        "updated_at": "2024-12-02T16:47:20Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Thanks @karthikscale3! Could you make sure the cookbook runs in Colab please? For example, you might want to list all the packages in pip directly or download the requirements.txt first before %pip install -r requirements.txt. Thank you so much!\r\n\r\nThank you @sophiamyang ! We have updated with all the requested changes.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2512132187/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "107": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2421814937",
        "html_url": "https://github.com/mistralai/cookbook/pull/107#issuecomment-2421814937",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/107",
        "id": 2421814937,
        "node_id": "IC_kwDOLBF5j86QWfaZ",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-10-18T08:25:51Z",
        "updated_at": "2024-10-18T08:25:51Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @Jgilhuly thanks so much for the PR! Would it be possible for you to add new agent notebooks to the Phoenix folder? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2421814937/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2432641527",
        "html_url": "https://github.com/mistralai/cookbook/pull/107#issuecomment-2432641527",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/107",
        "id": 2432641527,
        "node_id": "IC_kwDOLBF5j86Q_yn3",
        "user": {
          "login": "Jgilhuly",
          "id": 8853560,
          "node_id": "MDQ6VXNlcjg4NTM1NjA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8853560?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jgilhuly",
          "html_url": "https://github.com/Jgilhuly",
          "followers_url": "https://api.github.com/users/Jgilhuly/followers",
          "following_url": "https://api.github.com/users/Jgilhuly/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jgilhuly/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jgilhuly/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jgilhuly/subscriptions",
          "organizations_url": "https://api.github.com/users/Jgilhuly/orgs",
          "repos_url": "https://api.github.com/users/Jgilhuly/repos",
          "events_url": "https://api.github.com/users/Jgilhuly/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jgilhuly/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-10-23T15:33:12Z",
        "updated_at": "2024-10-23T15:33:12Z",
        "author_association": "CONTRIBUTOR",
        "body": "@sophiamyang moved the examples over to the Phoenix folder, let me know if you had something else in mind!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2432641527/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498734807",
        "html_url": "https://github.com/mistralai/cookbook/pull/107#issuecomment-2498734807",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/107",
        "id": 2498734807,
        "node_id": "IC_kwDOLBF5j86U76rX",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-25T18:21:31Z",
        "updated_at": "2024-11-25T18:21:31Z",
        "author_association": "COLLABORATOR",
        "body": "Thank you @Jgilhuly! Is it intended you have PHOENIX_API_KEY in the notebook? Is it okay for users to use this key or would you like to remove it and delete the key? ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498734807/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498764082",
        "html_url": "https://github.com/mistralai/cookbook/pull/107#issuecomment-2498764082",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/107",
        "id": 2498764082,
        "node_id": "IC_kwDOLBF5j86U8B0y",
        "user": {
          "login": "Jgilhuly",
          "id": 8853560,
          "node_id": "MDQ6VXNlcjg4NTM1NjA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8853560?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jgilhuly",
          "html_url": "https://github.com/Jgilhuly",
          "followers_url": "https://api.github.com/users/Jgilhuly/followers",
          "following_url": "https://api.github.com/users/Jgilhuly/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jgilhuly/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jgilhuly/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jgilhuly/subscriptions",
          "organizations_url": "https://api.github.com/users/Jgilhuly/orgs",
          "repos_url": "https://api.github.com/users/Jgilhuly/repos",
          "events_url": "https://api.github.com/users/Jgilhuly/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jgilhuly/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-25T18:36:22Z",
        "updated_at": "2024-11-25T18:36:22Z",
        "author_association": "CONTRIBUTOR",
        "body": "@sophiamyang - that key is just an example one, so fine to share. That did make me realize the notebooks were using different connection methods to phoenix - e.g. some using the hosted version and some using a local version. I switched them to be consistent, and removed the api key just to avoid confusion!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498764082/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498784494",
        "html_url": "https://github.com/mistralai/cookbook/pull/107#issuecomment-2498784494",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/107",
        "id": 2498784494,
        "node_id": "IC_kwDOLBF5j86U8Gzu",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-25T18:47:12Z",
        "updated_at": "2024-11-25T18:51:26Z",
        "author_association": "COLLABORATOR",
        "body": "Thank you @Jgilhuly ! I got few error message when running the notebooks. Could you help update please? Thank you! \r\n\r\n-  I got error message \"ImportError: `llama-index-readers-file` package not found\" when running `arize_phoenix_evaluate_rag.ipynb`. \r\n- \"NameError: name 'session' is not defined\" when running `arize_phoenix_tracing.ipynb` code `print(f\"Current Phoenix URL: {session.url}\")` ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2498784494/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521078170",
        "html_url": "https://github.com/mistralai/cookbook/pull/107#issuecomment-2521078170",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/107",
        "id": 2521078170,
        "node_id": "IC_kwDOLBF5j86WRJma",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-05T18:04:21Z",
        "updated_at": "2024-12-05T18:04:21Z",
        "author_association": "COLLABORATOR",
        "body": "@Jgilhuly wondering if you or your team could help fix the notebooks I mentioned above. Thanks!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521078170/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521953322",
        "html_url": "https://github.com/mistralai/cookbook/pull/107#issuecomment-2521953322",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/107",
        "id": 2521953322,
        "node_id": "IC_kwDOLBF5j86WUfQq",
        "user": {
          "login": "Jgilhuly",
          "id": 8853560,
          "node_id": "MDQ6VXNlcjg4NTM1NjA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8853560?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jgilhuly",
          "html_url": "https://github.com/Jgilhuly",
          "followers_url": "https://api.github.com/users/Jgilhuly/followers",
          "following_url": "https://api.github.com/users/Jgilhuly/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jgilhuly/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jgilhuly/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jgilhuly/subscriptions",
          "organizations_url": "https://api.github.com/users/Jgilhuly/orgs",
          "repos_url": "https://api.github.com/users/Jgilhuly/repos",
          "events_url": "https://api.github.com/users/Jgilhuly/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jgilhuly/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-06T02:30:05Z",
        "updated_at": "2024-12-06T02:30:05Z",
        "author_association": "CONTRIBUTOR",
        "body": "@sophiamyang - apologies for the delay. I fixed the bug you mentioned there, but there's an issue we still need to fix in the third_party/Phoenix/arize_phoenix_evaluate_rag.ipynb notebook to make sure our mistral eval model object is compatible with mistral>=1.0.0. I'll follow up as soon as we fix the issue, thanks for your patience here!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521953322/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2523495211",
        "html_url": "https://github.com/mistralai/cookbook/pull/107#issuecomment-2523495211",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/107",
        "id": 2523495211,
        "node_id": "IC_kwDOLBF5j86WaXsr",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-06T15:27:47Z",
        "updated_at": "2024-12-06T15:27:47Z",
        "author_association": "COLLABORATOR",
        "body": "Thank you so much @Jgilhuly! Appreciate the help! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2523495211/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2557982295",
        "html_url": "https://github.com/mistralai/cookbook/pull/107#issuecomment-2557982295",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/107",
        "id": 2557982295,
        "node_id": "IC_kwDOLBF5j86Yd7ZX",
        "user": {
          "login": "Jgilhuly",
          "id": 8853560,
          "node_id": "MDQ6VXNlcjg4NTM1NjA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8853560?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jgilhuly",
          "html_url": "https://github.com/Jgilhuly",
          "followers_url": "https://api.github.com/users/Jgilhuly/followers",
          "following_url": "https://api.github.com/users/Jgilhuly/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jgilhuly/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jgilhuly/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jgilhuly/subscriptions",
          "organizations_url": "https://api.github.com/users/Jgilhuly/orgs",
          "repos_url": "https://api.github.com/users/Jgilhuly/repos",
          "events_url": "https://api.github.com/users/Jgilhuly/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jgilhuly/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-21T03:58:23Z",
        "updated_at": "2024-12-21T03:58:23Z",
        "author_association": "CONTRIBUTOR",
        "body": "@sophiamyang - apologies for the delay, we got the update made and I've fixed the notebooks here. I also went ahead and removed one since the other agent eval notebook covered the same topics, plus more.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2557982295/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2560190396",
        "html_url": "https://github.com/mistralai/cookbook/pull/107#issuecomment-2560190396",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/107",
        "id": 2560190396,
        "node_id": "IC_kwDOLBF5j86YmWe8",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-23T19:17:47Z",
        "updated_at": "2024-12-23T19:17:47Z",
        "author_association": "COLLABORATOR",
        "body": "Amazing thanks! Will take a look after the holidays and post on social.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2560190396/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 1,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2629574054",
        "html_url": "https://github.com/mistralai/cookbook/pull/107#issuecomment-2629574054",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/107",
        "id": 2629574054,
        "node_id": "IC_kwDOLBF5j86cvB2m",
        "user": {
          "login": "Jgilhuly",
          "id": 8853560,
          "node_id": "MDQ6VXNlcjg4NTM1NjA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8853560?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Jgilhuly",
          "html_url": "https://github.com/Jgilhuly",
          "followers_url": "https://api.github.com/users/Jgilhuly/followers",
          "following_url": "https://api.github.com/users/Jgilhuly/following{/other_user}",
          "gists_url": "https://api.github.com/users/Jgilhuly/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Jgilhuly/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Jgilhuly/subscriptions",
          "organizations_url": "https://api.github.com/users/Jgilhuly/orgs",
          "repos_url": "https://api.github.com/users/Jgilhuly/repos",
          "events_url": "https://api.github.com/users/Jgilhuly/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Jgilhuly/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-02-02T21:56:14Z",
        "updated_at": "2025-02-02T21:56:14Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hey @sophiamyang - checking back in here, let me know if there are any other updates I should make. Thanks for all your help!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2629574054/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "106": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2426181420",
        "html_url": "https://github.com/mistralai/cookbook/pull/106#issuecomment-2426181420",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/106",
        "id": 2426181420,
        "node_id": "IC_kwDOLBF5j86QnJcs",
        "user": {
          "login": "oulianov",
          "id": 58109554,
          "node_id": "MDQ6VXNlcjU4MTA5NTU0",
          "avatar_url": "https://avatars.githubusercontent.com/u/58109554?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/oulianov",
          "html_url": "https://github.com/oulianov",
          "followers_url": "https://api.github.com/users/oulianov/followers",
          "following_url": "https://api.github.com/users/oulianov/following{/other_user}",
          "gists_url": "https://api.github.com/users/oulianov/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/oulianov/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/oulianov/subscriptions",
          "organizations_url": "https://api.github.com/users/oulianov/orgs",
          "repos_url": "https://api.github.com/users/oulianov/repos",
          "events_url": "https://api.github.com/users/oulianov/events{/privacy}",
          "received_events_url": "https://api.github.com/users/oulianov/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-10-21T09:50:47Z",
        "updated_at": "2024-10-21T09:58:47Z",
        "author_association": "NONE",
        "body": "Good job ! Please add the notebook to the README.md\r\n\r\nEdit: Thank you !",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2426181420/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "105": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2426013412",
        "html_url": "https://github.com/mistralai/cookbook/pull/105#issuecomment-2426013412",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/105",
        "id": 2426013412,
        "node_id": "IC_kwDOLBF5j86Qmgbk",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-10-21T08:45:50Z",
        "updated_at": "2024-10-21T08:45:50Z",
        "author_association": "COLLABORATOR",
        "body": "Thanks for the PR @emmanuel-ferdman! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2426013412/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "101": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2428790987",
        "html_url": "https://github.com/mistralai/cookbook/pull/101#issuecomment-2428790987",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/101",
        "id": 2428790987,
        "node_id": "IC_kwDOLBF5j86QxGjL",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-10-22T09:39:26Z",
        "updated_at": "2024-10-22T09:39:26Z",
        "author_association": "COLLABORATOR",
        "body": "Thanks @chigwell for contributing! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2428790987/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "100": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2455852546",
        "html_url": "https://github.com/mistralai/cookbook/pull/100#issuecomment-2455852546",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/100",
        "id": 2455852546,
        "node_id": "IC_kwDOLBF5j86SYVYC",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-04T22:44:01Z",
        "updated_at": "2024-11-04T22:44:01Z",
        "author_association": "COLLABORATOR",
        "body": "Quickly escalated and became quite a large PR  to add a lot of docs around tokenization. Should be good to go.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2455852546/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "99": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2379090624",
        "html_url": "https://github.com/mistralai/cookbook/pull/99#issuecomment-2379090624",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/99",
        "id": 2379090624,
        "node_id": "IC_kwDOLBF5j86NzgrA",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-09-27T11:48:07Z",
        "updated_at": "2024-09-27T11:48:07Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @ravi03071991 thanks so much for the PR! I got the following errors when I run the notebook in colab. Could you take a look? Thank you! \r\n\r\nERROR: Could not find a version that satisfies the requirement llama-index-multi-modal-llms-mistralai (from versions: none)\r\nERROR: No matching distribution found for llama-index-multi-modal-llms-mistralai",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2379090624/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2381369820",
        "html_url": "https://github.com/mistralai/cookbook/pull/99#issuecomment-2381369820",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/99",
        "id": 2381369820,
        "node_id": "IC_kwDOLBF5j86N8NHc",
        "user": {
          "login": "ravi03071991",
          "id": 12198101,
          "node_id": "MDQ6VXNlcjEyMTk4MTAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/12198101?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ravi03071991",
          "html_url": "https://github.com/ravi03071991",
          "followers_url": "https://api.github.com/users/ravi03071991/followers",
          "following_url": "https://api.github.com/users/ravi03071991/following{/other_user}",
          "gists_url": "https://api.github.com/users/ravi03071991/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ravi03071991/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ravi03071991/subscriptions",
          "organizations_url": "https://api.github.com/users/ravi03071991/orgs",
          "repos_url": "https://api.github.com/users/ravi03071991/repos",
          "events_url": "https://api.github.com/users/ravi03071991/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ravi03071991/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-09-29T14:03:22Z",
        "updated_at": "2024-09-29T14:03:22Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thanks for flagging it @sophiamyang. This [PR](https://github.com/run-llama/llama_index/pull/16289) fixes it. Please give it a try now.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2381369820/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2382614874",
        "html_url": "https://github.com/mistralai/cookbook/pull/99#issuecomment-2382614874",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/99",
        "id": 2382614874,
        "node_id": "IC_kwDOLBF5j86OA9Fa",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-09-30T09:33:04Z",
        "updated_at": "2024-09-30T09:33:04Z",
        "author_association": "COLLABORATOR",
        "body": "@ravi03071991 Thanks so much! Merged! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2382614874/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "96": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2367821985",
        "html_url": "https://github.com/mistralai/cookbook/pull/96#issuecomment-2367821985",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/96",
        "id": 2367821985,
        "node_id": "IC_kwDOLBF5j86NIhih",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-09-23T10:32:42Z",
        "updated_at": "2024-09-23T10:32:42Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @jannikmaierhoefer, thanks so much for the cookbook! The images don't seem to show up correctly. I think you might need to correct the image path. Could you take a look? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2367821985/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2368812565",
        "html_url": "https://github.com/mistralai/cookbook/pull/96#issuecomment-2368812565",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/96",
        "id": 2368812565,
        "node_id": "IC_kwDOLBF5j86NMTYV",
        "user": {
          "login": "jannikmaierhoefer",
          "id": 48529566,
          "node_id": "MDQ6VXNlcjQ4NTI5NTY2",
          "avatar_url": "https://avatars.githubusercontent.com/u/48529566?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jannikmaierhoefer",
          "html_url": "https://github.com/jannikmaierhoefer",
          "followers_url": "https://api.github.com/users/jannikmaierhoefer/followers",
          "following_url": "https://api.github.com/users/jannikmaierhoefer/following{/other_user}",
          "gists_url": "https://api.github.com/users/jannikmaierhoefer/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jannikmaierhoefer/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jannikmaierhoefer/subscriptions",
          "organizations_url": "https://api.github.com/users/jannikmaierhoefer/orgs",
          "repos_url": "https://api.github.com/users/jannikmaierhoefer/repos",
          "events_url": "https://api.github.com/users/jannikmaierhoefer/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jannikmaierhoefer/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-09-23T16:39:50Z",
        "updated_at": "2024-09-23T16:39:50Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hi @sophiamyang, I just added a second quickstart cookbook that shows how to use Langfuse with the Mistral AI SDK. I also updated the path of the photos and created a README.md in the Langfuse folder. Let me know if there is anything else, I can edit!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2368812565/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2369020693",
        "html_url": "https://github.com/mistralai/cookbook/pull/96#issuecomment-2369020693",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/96",
        "id": 2369020693,
        "node_id": "IC_kwDOLBF5j86NNGMV",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-09-23T18:12:03Z",
        "updated_at": "2024-09-23T18:12:03Z",
        "author_association": "COLLABORATOR",
        "body": "Merged thanks so much @jannikmaierhoefer!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2369020693/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "95": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2367834264",
        "html_url": "https://github.com/mistralai/cookbook/pull/95#issuecomment-2367834264",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/95",
        "id": 2367834264,
        "node_id": "IC_kwDOLBF5j86NIkiY",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-09-23T10:37:46Z",
        "updated_at": "2024-09-23T10:37:46Z",
        "author_association": "COLLABORATOR",
        "body": "Merged! Thanks so much @Jgilhuly for the PR! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2367834264/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "94": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501366126",
        "html_url": "https://github.com/mistralai/cookbook/pull/94#issuecomment-2501366126",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/94",
        "id": 2501366126,
        "node_id": "IC_kwDOLBF5j86VF9Fu",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-26T16:41:07Z",
        "updated_at": "2024-11-26T16:41:07Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @shivayapandey, thanks so much for the PR! Would it be possible for you to use Mistral API instead of Hugging Face models? \r\n\r\nFor llamaindex, you can checkout our [llamaindex cookbook](https://github.com/mistralai/cookbook/tree/main/third_party/LlamaIndex) where you can use Mistral models and embeddings with these imports. \r\n\r\n```\r\nfrom llama_index.llms.mistralai import MistralAI\r\nfrom llama_index.embeddings.mistralai import MistralAIEmbedding\r\n```",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501366126/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "91": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2305235225",
        "html_url": "https://github.com/mistralai/cookbook/pull/91#issuecomment-2305235225",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/91",
        "id": 2305235225,
        "node_id": "IC_kwDOLBF5j86JZxkZ",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-22T17:01:15Z",
        "updated_at": "2024-08-22T17:01:15Z",
        "author_association": "COLLABORATOR",
        "body": "Thank you! Merging!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2305235225/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 1,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "88": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2288459631",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2288459631",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2288459631,
        "node_id": "IC_kwDOLBF5j86IZx9v",
        "user": {
          "login": "socket-security[bot]",
          "id": 95510084,
          "node_id": "BOT_kgDOBbFeRA",
          "avatar_url": "https://avatars.githubusercontent.com/in/156372?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/socket-security%5Bbot%5D",
          "html_url": "https://github.com/apps/socket-security",
          "followers_url": "https://api.github.com/users/socket-security%5Bbot%5D/followers",
          "following_url": "https://api.github.com/users/socket-security%5Bbot%5D/following{/other_user}",
          "gists_url": "https://api.github.com/users/socket-security%5Bbot%5D/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/socket-security%5Bbot%5D/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/socket-security%5Bbot%5D/subscriptions",
          "organizations_url": "https://api.github.com/users/socket-security%5Bbot%5D/orgs",
          "repos_url": "https://api.github.com/users/socket-security%5Bbot%5D/repos",
          "events_url": "https://api.github.com/users/socket-security%5Bbot%5D/events{/privacy}",
          "received_events_url": "https://api.github.com/users/socket-security%5Bbot%5D/received_events",
          "type": "Bot",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-14T11:05:19Z",
        "updated_at": "2024-08-23T20:27:56Z",
        "author_association": "NONE",
        "body": "<!-- overview-comment -->\n**New dependencies detected.** Learn more about [Socket for GitHub \u2197\ufe0e](https://socket.dev?utm_medium=gh)\n\n\n| Package | New capabilities | Transitives | Size | Publisher |\n|:--- |:--- |:--- |:--- |:--- |\n| [npm/@langchain/core@0.2.28](https://socket.dev/npm/package/@langchain/core/overview/0.2.28) | Transitive: <a href=\"https://socket.dev/npm/package/@langchain/core/alerts/0.2.28?tab=dependencies&alert_name=envVars\">environment</a>, <a href=\"https://socket.dev/npm/package/@langchain/core/alerts/0.2.28?tab=dependencies&alert_name=filesystemAccess\">filesystem</a>, <a href=\"https://socket.dev/npm/package/@langchain/core/alerts/0.2.28?tab=dependencies&alert_name=networkAccess\">network</a>, <a href=\"https://socket.dev/npm/package/@langchain/core/alerts/0.2.28?tab=dependencies&alert_name=shellAccess\">shell</a> | <a href=\"https://socket.dev/npm/package/@langchain/core/dependencies/0.2.28\">`+50`</a> | 43.6 MB | <a href=\"https://socket.dev/npm/user/basproul\">basproul</a> |\n| [npm/@langchain/mistralai@0.0.28](https://socket.dev/npm/package/@langchain/mistralai/overview/0.0.28) | None | <a href=\"https://socket.dev/npm/package/@langchain/mistralai/dependencies/0.0.28\">`+3`</a> | 1.12 MB | <a href=\"https://socket.dev/npm/user/basproul\">basproul</a> |\n| [npm/composio-core@0.1.16](https://socket.dev/npm/package/composio-core/overview/0.1.16) | <a href=\"https://socket.dev/npm/package/composio-core/alerts/0.1.16?alert_name=envVars\">environment</a>, <a href=\"https://socket.dev/npm/package/composio-core/alerts/0.1.16?alert_name=networkAccess\">network</a> Transitive: <a href=\"https://socket.dev/npm/package/composio-core/alerts/0.1.16?tab=dependencies&alert_name=usesEval\">eval</a>, <a href=\"https://socket.dev/npm/package/composio-core/alerts/0.1.16?tab=dependencies&alert_name=filesystemAccess\">filesystem</a>, <a href=\"https://socket.dev/npm/package/composio-core/alerts/0.1.16?tab=dependencies&alert_name=shellAccess\">shell</a>, <a href=\"https://socket.dev/npm/package/composio-core/alerts/0.1.16?tab=dependencies\">unsafe</a> | <a href=\"https://socket.dev/npm/package/composio-core/dependencies/0.1.16\">`+184`</a> | 135 MB | <a href=\"https://socket.dev/npm/user/sampark_inc\">sampark_inc</a> |\n\n\n\n[**View full report\u2197\ufe0e**](https://socket.dev/dashboard/org/mistralai/diff/c6f7db08-3f10-432a-9a79-3e4b242b5eef/593d4ed3-6a70-4c5b-8141-aa4a87bc99fb)",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2288459631/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": {
          "id": 156372,
          "client_id": "Iv1.0dc8bfb0ebf2ec17",
          "slug": "socket-security",
          "node_id": "A_kwHOBCHXrM4AAmLU",
          "owner": {
            "login": "SocketDev",
            "id": 69326764,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY5MzI2NzY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/69326764?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SocketDev",
            "html_url": "https://github.com/SocketDev",
            "followers_url": "https://api.github.com/users/SocketDev/followers",
            "following_url": "https://api.github.com/users/SocketDev/following{/other_user}",
            "gists_url": "https://api.github.com/users/SocketDev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SocketDev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SocketDev/subscriptions",
            "organizations_url": "https://api.github.com/users/SocketDev/orgs",
            "repos_url": "https://api.github.com/users/SocketDev/repos",
            "events_url": "https://api.github.com/users/SocketDev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SocketDev/received_events",
            "type": "Organization",
            "user_view_type": "public",
            "site_admin": false
          },
          "name": "Socket Security",
          "description": "### Socket protects your app from malicious dependencies lurking in your open source supply chain.\r\n\r\nOpen source code makes up 90% of most codebases. It is critical to manage it effectively to reduce your security risk.\r\n\r\n## Detect and block open source supply chain attacks\r\n\r\nSecurity teams depend on Socket to prevent malicious open source dependencies from infiltrating their apps.\r\n\r\nSocket dramatically improves your open source security posture by _detecting and blocking the attacks you don't expect_ \u2013 malware, install scripts, hidden code, typo-squatting, and more \u2013 which aren't caught by traditional vulnerability scanners.\r\n\r\n- **Block malware** \u2013 Block emerging malware threats\r\n\r\n- **Block typo-squatting** \u2013 Block malicious packages that differ in name by only a few characters, and recommend the correct package\r\n\r\n- **Detect hidden code** \u2013 Detect obfuscated, minified, or hidden code\r\n\r\n- **Detect privileged API usage** \u2013 Report when a dependency update introduces new risky API usage \u2013 filesystem, network, child_process, eval()\r\n\r\n- **Detect suspicious updates** \u2013 Sudden inclusion of privileged APIs in patch or minor releases\r\n\r\nSocket currently [supports 60 detections](https://socket.dev/npm/issue) in 5 categories: supply chain risk, quality, maintenance, known vulnerabilities, and license problems.\r\n\r\n## Take charge of your dependency health\r\n\r\nSocket improves security outcomes and reduces work for security teams by **surfacing actionable security information directly inline in GitHub** so developers are empowered to make better decisions.\r\n\r\n- **Five minute deployment** \u2013 The easiest security product you'll ever deploy in your organization. Just install a GitHub app and you're done.\r\n\r\n- **Provide security feedback directly on PRs** \u2013 Empower developers to solve security issues before they're deployed into production.\r\n\r\n- **Automated security** \u2013 Spend security team resources auditing the highest-impact dependencies, instead of all or nothing.\r\n\r\n## Socket detects what vulnerability scanners can\u2019t\r\n\r\nIt's no longer sufficient to scan for known vulnerabilities (CVEs) and stop there. And yet, that's what the leading \"supply chain security\" products do, leaving you vulnerable.\r\n\r\nIt can take weeks or months for a CVE to be discovered, reported, and detected by tools. But in today's culture of fast development, a malicious dependency can be updated, merged, and running in production in days or even sometimes hours.\r\n\r\nDefenders need a new approach to address emerging threats from malicious dependencies:\r\n\r\n- **Maintainer intentionally added malware** \u2013 Rogue maintainer sabotaged his own open source package with 100M downloads/month, affecting companies such as Amazon AWS\r\n\r\n- **Package hijacked and poisoned w/ cryptominers and password-stealing malware** \u2013 Deliberate malware introduced into multiple packages with 30M downloads/month each\r\n\r\n- **Package hijacked to add backdoor targeting a specific organization** \u2013 Obfuscated malware added to a dependency which targeted a single company, went undetected for over a week, and made it into their production build\r\n\r\n- **NPM package manager allowed anyone to publish new versions of any package** \u2013 Attackers could publish new versions of any NPM package without authorization _for multiple years_\r\n\r\nUsing third-party dependencies without proper vetting leaves you open to hacking, breaches, and assorted security misfortune.",
          "external_url": "https://socket.dev",
          "html_url": "https://github.com/apps/socket-security",
          "created_at": "2021-12-04T00:33:05Z",
          "updated_at": "2023-03-08T20:20:07Z",
          "permissions": {
            "checks": "write",
            "contents": "read",
            "emails": "read",
            "issues": "read",
            "members": "read",
            "metadata": "read",
            "pull_requests": "write"
          },
          "events": [
            "check_run",
            "check_suite",
            "issue_comment",
            "member",
            "organization",
            "public",
            "pull_request",
            "push",
            "repository"
          ]
        }
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2288460645",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2288460645",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2288460645,
        "node_id": "IC_kwDOLBF5j86IZyNl",
        "user": {
          "login": "socket-security[bot]",
          "id": 95510084,
          "node_id": "BOT_kgDOBbFeRA",
          "avatar_url": "https://avatars.githubusercontent.com/in/156372?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/socket-security%5Bbot%5D",
          "html_url": "https://github.com/apps/socket-security",
          "followers_url": "https://api.github.com/users/socket-security%5Bbot%5D/followers",
          "following_url": "https://api.github.com/users/socket-security%5Bbot%5D/following{/other_user}",
          "gists_url": "https://api.github.com/users/socket-security%5Bbot%5D/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/socket-security%5Bbot%5D/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/socket-security%5Bbot%5D/subscriptions",
          "organizations_url": "https://api.github.com/users/socket-security%5Bbot%5D/orgs",
          "repos_url": "https://api.github.com/users/socket-security%5Bbot%5D/repos",
          "events_url": "https://api.github.com/users/socket-security%5Bbot%5D/events{/privacy}",
          "received_events_url": "https://api.github.com/users/socket-security%5Bbot%5D/received_events",
          "type": "Bot",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-14T11:05:56Z",
        "updated_at": "2024-08-23T20:27:57Z",
        "author_association": "NONE",
        "body": "**\ud83d\udea8 Potential security issues detected.** Learn more about [Socket for GitHub \u2197\ufe0e](https://socket.dev?utm_medium=gh)\n\nTo accept the risk, merge this PR and you will not be notified again.\n\n<table>\n    <thead>\n      <tr>\n        <th align=\"left\">Alert</th>\n        <th align=\"left\">Package</th>\n        <th align=\"left\">Note</th><th align=\"left\">Source</th><th align=\"left\">CI</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n            <td align=\"left\">\n              <a href=\"https://socket.dev/npm/package/ssh2/alerts/1.15.0?alert_name=installScripts\"> Install scripts </a>\n            </td>\n            <td align=\"left\">\n              <a href=\"https://socket.dev/npm/package/ssh2/overview/1.15.0\"> npm/ssh2@1.15.0 </a>\n            </td>\n            <td align=\"left\">\n                              <ul>\n                                                     <li><strong>Install script:</strong> <a href=\"https://socket.dev/npm/package/ssh2/overview/1.15.0\">install</a></li>\n                                                     <li><strong>Source:</strong> <code>node install.js</code></li>\n                                                   </ul>\n                            </td><td align=\"left\">                   <ul>                                           <li><a href=\"https://github.com/mistralai/cookbook/pull/88/files#diff-a62f0e16a54d406ab7a37bca5903466cd70fe64dac6de8ba6a0128f2c12426e9\"><code>third_party/Composio/gmail-agent-js/package-lock.json</code></a></li>                                           <li><a href=\"https://github.com/mistralai/cookbook/pull/88/files#diff-5edc416c9c323927ea329a9d69a5be1daa50e8eb20f181172fc5fb5e8f21f809\"><code>third_party/Composio/gmail-agent-js/package.json</code></a></li>                                         </ul>                 </td><td align=\"left\"><span title=\"Warn: Pass CI Check\">\u26a0\ufe0e</span>           </td>\n          </tr>\n    </tbody>\n  </table>\n\n\n\n[**View full report\u2197\ufe0e**](https://socket.dev/dashboard/org/mistralai/diff/c6f7db08-3f10-432a-9a79-3e4b242b5eef/593d4ed3-6a70-4c5b-8141-aa4a87bc99fb)\n### Next steps\n\n<details>\n    <summary>\n      <strong> What is an install script? </strong>\n    </summary>\n    <p>Install scripts are run when the package is installed. The majority of malware in npm is hidden in install scripts.</p>\n    <p>Packages should not be running non-essential scripts during install and there are often solutions to problems people solve with install scripts that can be run at publish time instead.</p>\n  </details>\n<details>\n    <summary>\n      <strong> Take a deeper look at the dependency </strong>\n    </summary>\n    <p>\n      Take a moment to review the security alert above. Review the linked\n      package source code to understand the potential risk. Ensure the package\n      is not malicious before proceeding. If you're unsure how to proceed, reach\n      out to your security team or ask the Socket team for help at support [AT]\n      socket [DOT] dev.\n    </p>\n  </details>\n<details>\n    <summary>\n      <strong> Remove the package </strong>\n    </summary>\n    <p>\n      If you happen to install a dependency that Socket reports as <a href=\"https://socket.dev/npm/issue/malware\">Known Malware</a> you should immediately remove it and select a different dependency. For other alert types, you may may wish to investigate alternative packages or consider if there are other ways to mitigate the specific risk posed by the dependency.\n    </p>\n  </details>\n<details>\n<summary>\n<strong>Mark a package as acceptable risk</strong>\n</summary>\n<p>To ignore an alert, reply with a comment starting with <code>@SocketSecurity ignore</code> followed by a space separated list of <code>ecosystem/package-name@version</code> specifiers. e.g. <code>@SocketSecurity ignore npm/foo@1.0.0</code> or ignore all packages with <code>@SocketSecurity ignore-all</code></p>\n<ul>\n<li><code>@SocketSecurity ignore npm/ssh2@1.15.0</code></li>\n</ul>\n\n</details>",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2288460645/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": {
          "id": 156372,
          "client_id": "Iv1.0dc8bfb0ebf2ec17",
          "slug": "socket-security",
          "node_id": "A_kwHOBCHXrM4AAmLU",
          "owner": {
            "login": "SocketDev",
            "id": 69326764,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY5MzI2NzY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/69326764?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SocketDev",
            "html_url": "https://github.com/SocketDev",
            "followers_url": "https://api.github.com/users/SocketDev/followers",
            "following_url": "https://api.github.com/users/SocketDev/following{/other_user}",
            "gists_url": "https://api.github.com/users/SocketDev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SocketDev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SocketDev/subscriptions",
            "organizations_url": "https://api.github.com/users/SocketDev/orgs",
            "repos_url": "https://api.github.com/users/SocketDev/repos",
            "events_url": "https://api.github.com/users/SocketDev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SocketDev/received_events",
            "type": "Organization",
            "user_view_type": "public",
            "site_admin": false
          },
          "name": "Socket Security",
          "description": "### Socket protects your app from malicious dependencies lurking in your open source supply chain.\r\n\r\nOpen source code makes up 90% of most codebases. It is critical to manage it effectively to reduce your security risk.\r\n\r\n## Detect and block open source supply chain attacks\r\n\r\nSecurity teams depend on Socket to prevent malicious open source dependencies from infiltrating their apps.\r\n\r\nSocket dramatically improves your open source security posture by _detecting and blocking the attacks you don't expect_ \u2013 malware, install scripts, hidden code, typo-squatting, and more \u2013 which aren't caught by traditional vulnerability scanners.\r\n\r\n- **Block malware** \u2013 Block emerging malware threats\r\n\r\n- **Block typo-squatting** \u2013 Block malicious packages that differ in name by only a few characters, and recommend the correct package\r\n\r\n- **Detect hidden code** \u2013 Detect obfuscated, minified, or hidden code\r\n\r\n- **Detect privileged API usage** \u2013 Report when a dependency update introduces new risky API usage \u2013 filesystem, network, child_process, eval()\r\n\r\n- **Detect suspicious updates** \u2013 Sudden inclusion of privileged APIs in patch or minor releases\r\n\r\nSocket currently [supports 60 detections](https://socket.dev/npm/issue) in 5 categories: supply chain risk, quality, maintenance, known vulnerabilities, and license problems.\r\n\r\n## Take charge of your dependency health\r\n\r\nSocket improves security outcomes and reduces work for security teams by **surfacing actionable security information directly inline in GitHub** so developers are empowered to make better decisions.\r\n\r\n- **Five minute deployment** \u2013 The easiest security product you'll ever deploy in your organization. Just install a GitHub app and you're done.\r\n\r\n- **Provide security feedback directly on PRs** \u2013 Empower developers to solve security issues before they're deployed into production.\r\n\r\n- **Automated security** \u2013 Spend security team resources auditing the highest-impact dependencies, instead of all or nothing.\r\n\r\n## Socket detects what vulnerability scanners can\u2019t\r\n\r\nIt's no longer sufficient to scan for known vulnerabilities (CVEs) and stop there. And yet, that's what the leading \"supply chain security\" products do, leaving you vulnerable.\r\n\r\nIt can take weeks or months for a CVE to be discovered, reported, and detected by tools. But in today's culture of fast development, a malicious dependency can be updated, merged, and running in production in days or even sometimes hours.\r\n\r\nDefenders need a new approach to address emerging threats from malicious dependencies:\r\n\r\n- **Maintainer intentionally added malware** \u2013 Rogue maintainer sabotaged his own open source package with 100M downloads/month, affecting companies such as Amazon AWS\r\n\r\n- **Package hijacked and poisoned w/ cryptominers and password-stealing malware** \u2013 Deliberate malware introduced into multiple packages with 30M downloads/month each\r\n\r\n- **Package hijacked to add backdoor targeting a specific organization** \u2013 Obfuscated malware added to a dependency which targeted a single company, went undetected for over a week, and made it into their production build\r\n\r\n- **NPM package manager allowed anyone to publish new versions of any package** \u2013 Attackers could publish new versions of any NPM package without authorization _for multiple years_\r\n\r\nUsing third-party dependencies without proper vetting leaves you open to hacking, breaches, and assorted security misfortune.",
          "external_url": "https://socket.dev",
          "html_url": "https://github.com/apps/socket-security",
          "created_at": "2021-12-04T00:33:05Z",
          "updated_at": "2023-03-08T20:20:07Z",
          "permissions": {
            "checks": "write",
            "contents": "read",
            "emails": "read",
            "issues": "read",
            "members": "read",
            "metadata": "read",
            "pull_requests": "write"
          },
          "events": [
            "check_run",
            "check_suite",
            "issue_comment",
            "member",
            "organization",
            "public",
            "pull_request",
            "push",
            "repository"
          ]
        }
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2301562416",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2301562416",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2301562416,
        "node_id": "IC_kwDOLBF5j86JLw4w",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-21T09:14:06Z",
        "updated_at": "2024-08-21T09:14:06Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @cagnusmarlsen, thanks so much for the PR! There seems to be a Socket Security issue. Could you kindly take a look? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2301562416/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2310542513",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2310542513",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2310542513,
        "node_id": "IC_kwDOLBF5j86JuBSx",
        "user": {
          "login": "cagnusmarlsen",
          "id": 91818868,
          "node_id": "U_kgDOBXkLdA",
          "avatar_url": "https://avatars.githubusercontent.com/u/91818868?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cagnusmarlsen",
          "html_url": "https://github.com/cagnusmarlsen",
          "followers_url": "https://api.github.com/users/cagnusmarlsen/followers",
          "following_url": "https://api.github.com/users/cagnusmarlsen/following{/other_user}",
          "gists_url": "https://api.github.com/users/cagnusmarlsen/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cagnusmarlsen/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cagnusmarlsen/subscriptions",
          "organizations_url": "https://api.github.com/users/cagnusmarlsen/orgs",
          "repos_url": "https://api.github.com/users/cagnusmarlsen/repos",
          "events_url": "https://api.github.com/users/cagnusmarlsen/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cagnusmarlsen/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-26T15:57:26Z",
        "updated_at": "2024-08-26T15:57:26Z",
        "author_association": "NONE",
        "body": "Hi @sophiamyang, I've updated the code and all checks are passing now. The script in ssh2 that triggers this warning just tries to bind to OpenSSL, should not be a problem according to me. Thanks for taking a look at this! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2310542513/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501375019",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2501375019",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2501375019,
        "node_id": "IC_kwDOLBF5j86VF_Qr",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-26T16:44:55Z",
        "updated_at": "2024-11-26T16:44:55Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @cagnusmarlsen, thanks so much for the PR! We'd like to publish your cookbook soon! \r\n\r\nOne minor thing: \r\nI was trying to run `mail-agent.ipynb` in colab. I think the command line instructions need a \"!\" in front to be able to run. Could you help check and make sure it can run in Colab? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501375019/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501600673",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2501600673",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2501600673,
        "node_id": "IC_kwDOLBF5j86VG2Wh",
        "user": {
          "login": "cagnusmarlsen",
          "id": 91818868,
          "node_id": "U_kgDOBXkLdA",
          "avatar_url": "https://avatars.githubusercontent.com/u/91818868?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cagnusmarlsen",
          "html_url": "https://github.com/cagnusmarlsen",
          "followers_url": "https://api.github.com/users/cagnusmarlsen/followers",
          "following_url": "https://api.github.com/users/cagnusmarlsen/following{/other_user}",
          "gists_url": "https://api.github.com/users/cagnusmarlsen/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cagnusmarlsen/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cagnusmarlsen/subscriptions",
          "organizations_url": "https://api.github.com/users/cagnusmarlsen/orgs",
          "repos_url": "https://api.github.com/users/cagnusmarlsen/repos",
          "events_url": "https://api.github.com/users/cagnusmarlsen/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cagnusmarlsen/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-26T17:58:52Z",
        "updated_at": "2024-11-26T17:58:52Z",
        "author_association": "NONE",
        "body": "Hey @sophiamyang, yeah, I missed the \"!\" in front of the commands! I've fixed it and it should run fine on Colab now.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501600673/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2520951635",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2520951635",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2520951635,
        "node_id": "IC_kwDOLBF5j86WQqtT",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-05T17:12:07Z",
        "updated_at": "2024-12-05T17:12:07Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @cagnusmarlsen I love your cookbook! However, I'm not sure how the listener work exactly. I suppose this will see new email and try to respond? However, when I get new email, I don't see anything here. Could you help me understand or point me to the right direction? Thank you so much! \r\n![image](https://github.com/user-attachments/assets/a28ffe20-53cc-4ee7-b0dc-ccf7ac06e270)\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2520951635/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2525274771",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2525274771",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2525274771,
        "node_id": "IC_kwDOLBF5j86WhKKT",
        "user": {
          "login": "Prat-0",
          "id": 174445266,
          "node_id": "U_kgDOCmXS0g",
          "avatar_url": "https://avatars.githubusercontent.com/u/174445266?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/Prat-0",
          "html_url": "https://github.com/Prat-0",
          "followers_url": "https://api.github.com/users/Prat-0/followers",
          "following_url": "https://api.github.com/users/Prat-0/following{/other_user}",
          "gists_url": "https://api.github.com/users/Prat-0/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/Prat-0/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/Prat-0/subscriptions",
          "organizations_url": "https://api.github.com/users/Prat-0/orgs",
          "repos_url": "https://api.github.com/users/Prat-0/repos",
          "events_url": "https://api.github.com/users/Prat-0/events{/privacy}",
          "received_events_url": "https://api.github.com/users/Prat-0/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-07T18:45:07Z",
        "updated_at": "2024-12-07T18:47:00Z",
        "author_association": "NONE",
        "body": "Hey @sophiamyang, I'm Prathit from Composio. Happy to help you figure it out. \r\n\r\nthe trigger listens until a new email is received, as soon as it is received it goes into the on_new_gmail_message function and executes the agent that responds to it with tool calling. The same code is working for me on Colab. Did you run the composio login and enable trigger commands and complete the authentication flows?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2525274771/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2525323116",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2525323116",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2525323116,
        "node_id": "IC_kwDOLBF5j86WhV9s",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-07T22:00:39Z",
        "updated_at": "2024-12-07T22:00:39Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @Prat-0, thanks for checking! I do see the new received email now with the info shown like below. However I got an error `\r\nError: 'tuple' object has no attribute 'get'`. How should I deal with this error? And does it suppose to reply the email in the same `listener.listen()` cell? Can I give inputs to the email response? Thanks! \r\n\r\n```\r\nINFO:composio.utils.shared:Received trigger event with trigger ID: 07a56184-b2a6-4185-8f0b-2b337b6216bf and trigger name: GMAIL_NEW_GMAIL_MESSAGE\r\ndata received appName='gmail' payload={'threadId': '193a320272ccedfc', 'messageId': '193a320272ccedfc', 'messageTimestamp': '2024-12-07T21:56:16Z', 'labelIds': ['UNREAD', 'IMPORTANT', 'CATEGORY_PERSONAL', 'INBOX'], 'preview': {'subject': 'dinner tomorrow night?', 'body': 'would dinner tomorrow night work for you?'}, 'messageText': 'would dinner tomorrow night work for you?\\r\\n', 'attachmentList': [], 'subject': 'dinner tomorrow night?', 'sender': 'Sophia Yang  ... \r\n```\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2525323116/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2526251830",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2526251830",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2526251830,
        "node_id": "IC_kwDOLBF5j86Wk4s2",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-08T17:07:51Z",
        "updated_at": "2024-12-08T17:28:30Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @Prat-0 @cagnusmarlsen , thanks for updating. I'm running the notebook `mail-agent.ipynb` in colab and still get the error `Error: tuple indices must be integers or slices, not str` . Really want to see it work and merge the PR. Appreciate your help! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2526251830/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2526279021",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2526279021",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2526279021,
        "node_id": "IC_kwDOLBF5j86Wk_Vt",
        "user": {
          "login": "cagnusmarlsen",
          "id": 91818868,
          "node_id": "U_kgDOBXkLdA",
          "avatar_url": "https://avatars.githubusercontent.com/u/91818868?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cagnusmarlsen",
          "html_url": "https://github.com/cagnusmarlsen",
          "followers_url": "https://api.github.com/users/cagnusmarlsen/followers",
          "following_url": "https://api.github.com/users/cagnusmarlsen/following{/other_user}",
          "gists_url": "https://api.github.com/users/cagnusmarlsen/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cagnusmarlsen/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cagnusmarlsen/subscriptions",
          "organizations_url": "https://api.github.com/users/cagnusmarlsen/orgs",
          "repos_url": "https://api.github.com/users/cagnusmarlsen/repos",
          "events_url": "https://api.github.com/users/cagnusmarlsen/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cagnusmarlsen/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-08T17:41:38Z",
        "updated_at": "2024-12-08T17:41:38Z",
        "author_association": "NONE",
        "body": "Hi @sophiamyang, should work fine for you now. Thanks!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2526279021/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2526298493",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2526298493",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2526298493,
        "node_id": "IC_kwDOLBF5j86WlEF9",
        "user": {
          "login": "sohamganatra",
          "id": 7982102,
          "node_id": "MDQ6VXNlcjc5ODIxMDI=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7982102?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sohamganatra",
          "html_url": "https://github.com/sohamganatra",
          "followers_url": "https://api.github.com/users/sohamganatra/followers",
          "following_url": "https://api.github.com/users/sohamganatra/following{/other_user}",
          "gists_url": "https://api.github.com/users/sohamganatra/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sohamganatra/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sohamganatra/subscriptions",
          "organizations_url": "https://api.github.com/users/sohamganatra/orgs",
          "repos_url": "https://api.github.com/users/sohamganatra/repos",
          "events_url": "https://api.github.com/users/sohamganatra/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sohamganatra/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-08T18:14:35Z",
        "updated_at": "2024-12-08T18:15:06Z",
        "author_association": "NONE",
        "body": "Hey @sophiamyang , Composio founder here. Give me some time and let me confirm the submission end to end and once it works, I will also try to share a loom video of me running the complete code. \r\n\r\nsorry about the trouble. ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2526298493/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2526388603",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2526388603",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2526388603,
        "node_id": "IC_kwDOLBF5j86WlaF7",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-08T21:24:46Z",
        "updated_at": "2024-12-08T21:24:46Z",
        "author_association": "COLLABORATOR",
        "body": "Thanks @cagnusmarlsen for the updates! However I got a 404 here:\r\n<img width=\"1090\" alt=\"image\" src=\"https://github.com/user-attachments/assets/1128b98e-faa4-4509-b46a-2bdcad90380a\">\r\n\r\nI'm pretty sure my Mistral API is correct bc I can call it with our API:\r\n\r\n<img width=\"919\" alt=\"image\" src=\"https://github.com/user-attachments/assets/c0389390-38f7-469e-b369-5e7836663079\">\r\n\r\nDo you know what could be the issue? Thanks! \r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2526388603/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2526388949",
        "html_url": "https://github.com/mistralai/cookbook/pull/88#issuecomment-2526388949",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/88",
        "id": 2526388949,
        "node_id": "IC_kwDOLBF5j86WlaLV",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-08T21:25:48Z",
        "updated_at": "2024-12-08T21:25:48Z",
        "author_association": "COLLABORATOR",
        "body": "Thanks so much @sohamganatra! A video would be most amazing! Love composio and this use case.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2526388949/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "84": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2295390048",
        "html_url": "https://github.com/mistralai/cookbook/pull/84#issuecomment-2295390048",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/84",
        "id": 2295390048,
        "node_id": "IC_kwDOLBF5j86I0N9g",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-18T21:06:16Z",
        "updated_at": "2024-08-18T21:06:16Z",
        "author_association": "CONTRIBUTOR",
        "body": "@Wendong-Fan @sophiamyang minor packaging update here on the MSFT side. Plz approve.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2295390048/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2295915971",
        "html_url": "https://github.com/mistralai/cookbook/pull/84#issuecomment-2295915971",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/84",
        "id": 2295915971,
        "node_id": "IC_kwDOLBF5j86I2OXD",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-19T08:01:15Z",
        "updated_at": "2024-08-19T08:01:15Z",
        "author_association": "COLLABORATOR",
        "body": "Looks good! Thank you! I've approved!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2295915971/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2296387737",
        "html_url": "https://github.com/mistralai/cookbook/pull/84#issuecomment-2296387737",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/84",
        "id": 2296387737,
        "node_id": "IC_kwDOLBF5j86I4BiZ",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-19T11:51:03Z",
        "updated_at": "2024-08-19T11:51:03Z",
        "author_association": "CONTRIBUTOR",
        "body": "@pandora-s-git thx. please merge",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2296387737/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2296396535",
        "html_url": "https://github.com/mistralai/cookbook/pull/84#issuecomment-2296396535",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/84",
        "id": 2296396535,
        "node_id": "IC_kwDOLBF5j86I4Dr3",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-19T11:55:59Z",
        "updated_at": "2024-08-19T11:55:59Z",
        "author_association": "COLLABORATOR",
        "body": "My bad! Merging!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2296396535/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "83": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2283723245",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#issuecomment-2283723245",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/83",
        "id": 2283723245,
        "node_id": "IC_kwDOLBF5j86IHtnt",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-12T11:31:11Z",
        "updated_at": "2024-08-12T11:31:11Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @edwinjhlee , could you provide a notebook or a markdown+script explaining how to use it and PR to the cookbook repo? Then we can point towards it in the readme!\r\n\r\nWe would like to have all cookbooks in this repo! Thank you! <3 ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2283723245/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2283744118",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#issuecomment-2283744118",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/83",
        "id": 2283744118,
        "node_id": "IC_kwDOLBF5j86IHyt2",
        "user": {
          "login": "edwinjhlee",
          "id": 4426319,
          "node_id": "MDQ6VXNlcjQ0MjYzMTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4426319?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/edwinjhlee",
          "html_url": "https://github.com/edwinjhlee",
          "followers_url": "https://api.github.com/users/edwinjhlee/followers",
          "following_url": "https://api.github.com/users/edwinjhlee/following{/other_user}",
          "gists_url": "https://api.github.com/users/edwinjhlee/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/edwinjhlee/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/edwinjhlee/subscriptions",
          "organizations_url": "https://api.github.com/users/edwinjhlee/orgs",
          "repos_url": "https://api.github.com/users/edwinjhlee/repos",
          "events_url": "https://api.github.com/users/edwinjhlee/events{/privacy}",
          "received_events_url": "https://api.github.com/users/edwinjhlee/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-12T11:41:35Z",
        "updated_at": "2024-08-12T11:41:46Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Hi @edwinjhlee , could you provide a notebook or a markdown+script explaining how to use it and PR to the cookbook repo? Then we can point towards it in the readme!\r\n> \r\n> We would like to have all cookbooks in this repo! Thank you! <3\r\n\r\nHi ~ \r\n\r\nIs the example and code in the https://www.x-cmd.com/mod/mistral#examples sufficient enough ? \r\n\r\n<img width=\"1007\" alt=\"image\" src=\"https://github.com/user-attachments/assets/1811a46b-11c5-49a7-95a4-4bd9705eccc7\">\r\n\r\n\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2283744118/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2283747759",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#issuecomment-2283747759",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/83",
        "id": 2283747759,
        "node_id": "IC_kwDOLBF5j86IHzmv",
        "user": {
          "login": "edwinjhlee",
          "id": 4426319,
          "node_id": "MDQ6VXNlcjQ0MjYzMTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4426319?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/edwinjhlee",
          "html_url": "https://github.com/edwinjhlee",
          "followers_url": "https://api.github.com/users/edwinjhlee/followers",
          "following_url": "https://api.github.com/users/edwinjhlee/following{/other_user}",
          "gists_url": "https://api.github.com/users/edwinjhlee/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/edwinjhlee/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/edwinjhlee/subscriptions",
          "organizations_url": "https://api.github.com/users/edwinjhlee/orgs",
          "repos_url": "https://api.github.com/users/edwinjhlee/repos",
          "events_url": "https://api.github.com/users/edwinjhlee/events{/privacy}",
          "received_events_url": "https://api.github.com/users/edwinjhlee/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-12T11:43:38Z",
        "updated_at": "2024-08-12T11:43:38Z",
        "author_association": "CONTRIBUTOR",
        "body": "OK. Now I see your points. I will write a short markdown documents and submit it to this repo.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2283747759/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2283824548",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#issuecomment-2283824548",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/83",
        "id": 2283824548,
        "node_id": "IC_kwDOLBF5j86IIGWk",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-12T12:21:15Z",
        "updated_at": "2024-08-12T12:21:15Z",
        "author_association": "COLLABORATOR",
        "body": "Thank you! The most detailed and practical the best! If possible to make a notebook would be great, if not a markdown file would be nice indeed!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2283824548/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 1
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2283827099",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#issuecomment-2283827099",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/83",
        "id": 2283827099,
        "node_id": "IC_kwDOLBF5j86IIG-b",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-12T12:22:31Z",
        "updated_at": "2024-08-12T12:22:31Z",
        "author_association": "COLLABORATOR",
        "body": "The demo video looks great btw ;>",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2283827099/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 1,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2290880049",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#issuecomment-2290880049",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/83",
        "id": 2290880049,
        "node_id": "IC_kwDOLBF5j86IjA4x",
        "user": {
          "login": "edwinjhlee",
          "id": 4426319,
          "node_id": "MDQ6VXNlcjQ0MjYzMTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4426319?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/edwinjhlee",
          "html_url": "https://github.com/edwinjhlee",
          "followers_url": "https://api.github.com/users/edwinjhlee/followers",
          "following_url": "https://api.github.com/users/edwinjhlee/following{/other_user}",
          "gists_url": "https://api.github.com/users/edwinjhlee/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/edwinjhlee/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/edwinjhlee/subscriptions",
          "organizations_url": "https://api.github.com/users/edwinjhlee/orgs",
          "repos_url": "https://api.github.com/users/edwinjhlee/repos",
          "events_url": "https://api.github.com/users/edwinjhlee/events{/privacy}",
          "received_events_url": "https://api.github.com/users/edwinjhlee/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-15T08:25:24Z",
        "updated_at": "2024-08-15T08:25:24Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Thank you! The most detailed and practical the best! If possible to make a notebook would be great, if not a markdown file would be nice indeed!\r\n\r\nHi, I already add some example in the README.ipynb ~\r\n\r\nFeel free to review and feedback. Thanks.\r\n\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2290880049/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2301572587",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#issuecomment-2301572587",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/83",
        "id": 2301572587,
        "node_id": "IC_kwDOLBF5j86JLzXr",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-21T09:19:04Z",
        "updated_at": "2024-08-21T09:19:04Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @edwinjhlee, thanks so much for the PR. Could you change your README.ipynb to README.md? I think a markdown file makes more sense here. Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2301572587/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 1
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2301656361",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#issuecomment-2301656361",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/83",
        "id": 2301656361,
        "node_id": "IC_kwDOLBF5j86JMH0p",
        "user": {
          "login": "edwinjhlee",
          "id": 4426319,
          "node_id": "MDQ6VXNlcjQ0MjYzMTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4426319?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/edwinjhlee",
          "html_url": "https://github.com/edwinjhlee",
          "followers_url": "https://api.github.com/users/edwinjhlee/followers",
          "following_url": "https://api.github.com/users/edwinjhlee/following{/other_user}",
          "gists_url": "https://api.github.com/users/edwinjhlee/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/edwinjhlee/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/edwinjhlee/subscriptions",
          "organizations_url": "https://api.github.com/users/edwinjhlee/orgs",
          "repos_url": "https://api.github.com/users/edwinjhlee/repos",
          "events_url": "https://api.github.com/users/edwinjhlee/events{/privacy}",
          "received_events_url": "https://api.github.com/users/edwinjhlee/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-21T10:01:38Z",
        "updated_at": "2024-08-21T10:01:38Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Hi @edwinjhlee, thanks so much for the PR. Could you change your README.ipynb to README.md? I think a markdown file makes more sense here. Thanks!\r\n\r\nOK. We will convert it to markdown.\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2301656361/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2301971907",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#issuecomment-2301971907",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/83",
        "id": 2301971907,
        "node_id": "IC_kwDOLBF5j86JNU3D",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-21T12:47:40Z",
        "updated_at": "2024-08-21T12:47:40Z",
        "author_association": "COLLABORATOR",
        "body": "Looks good! cc @sophiamyang merging?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2301971907/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2301973347",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#issuecomment-2301973347",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/83",
        "id": 2301973347,
        "node_id": "IC_kwDOLBF5j86JNVNj",
        "user": {
          "login": "edwinjhlee",
          "id": 4426319,
          "node_id": "MDQ6VXNlcjQ0MjYzMTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4426319?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/edwinjhlee",
          "html_url": "https://github.com/edwinjhlee",
          "followers_url": "https://api.github.com/users/edwinjhlee/followers",
          "following_url": "https://api.github.com/users/edwinjhlee/following{/other_user}",
          "gists_url": "https://api.github.com/users/edwinjhlee/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/edwinjhlee/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/edwinjhlee/subscriptions",
          "organizations_url": "https://api.github.com/users/edwinjhlee/orgs",
          "repos_url": "https://api.github.com/users/edwinjhlee/repos",
          "events_url": "https://api.github.com/users/edwinjhlee/events{/privacy}",
          "received_events_url": "https://api.github.com/users/edwinjhlee/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-21T12:48:25Z",
        "updated_at": "2024-08-21T12:48:55Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Looks good! cc @sophiamyang merging?\r\n\r\nSorry... We are refactoring the layout.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2301973347/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2301993020",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#issuecomment-2301993020",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/83",
        "id": 2301993020,
        "node_id": "IC_kwDOLBF5j86JNaA8",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-21T12:57:48Z",
        "updated_at": "2024-08-21T12:57:48Z",
        "author_association": "COLLABORATOR",
        "body": "oh no problem we can wait",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2301993020/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2302532688",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#issuecomment-2302532688",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/83",
        "id": 2302532688,
        "node_id": "IC_kwDOLBF5j86JPdxQ",
        "user": {
          "login": "edwinjhlee",
          "id": 4426319,
          "node_id": "MDQ6VXNlcjQ0MjYzMTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4426319?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/edwinjhlee",
          "html_url": "https://github.com/edwinjhlee",
          "followers_url": "https://api.github.com/users/edwinjhlee/followers",
          "following_url": "https://api.github.com/users/edwinjhlee/following{/other_user}",
          "gists_url": "https://api.github.com/users/edwinjhlee/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/edwinjhlee/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/edwinjhlee/subscriptions",
          "organizations_url": "https://api.github.com/users/edwinjhlee/orgs",
          "repos_url": "https://api.github.com/users/edwinjhlee/repos",
          "events_url": "https://api.github.com/users/edwinjhlee/events{/privacy}",
          "received_events_url": "https://api.github.com/users/edwinjhlee/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-21T16:44:41Z",
        "updated_at": "2024-08-21T16:44:41Z",
        "author_association": "CONTRIBUTOR",
        "body": "> oh no problem we can wait\r\n\r\nHello, we've finished making the changes. Would you mind taking a look?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2302532688/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2304082170",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#issuecomment-2304082170",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/83",
        "id": 2304082170,
        "node_id": "IC_kwDOLBF5j86JVYD6",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-22T08:29:12Z",
        "updated_at": "2024-08-22T08:29:12Z",
        "author_association": "COLLABORATOR",
        "body": "Looks good for me! Will be merging this soon! Thank you so much! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2304082170/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 1,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1724728648",
        "pull_request_review_id": 2250263705,
        "id": 1724728648,
        "node_id": "PRRC_kwDOLBF5j85mzUVI",
        "diff_hunk": "@@ -72,3 +72,4 @@ Disclaimer: Examples contributed by the community and partners do not represent\n | [Streamlit Integration - Chat with PDF](third_party/streamlit/README.md)                                        | UI chat, demo, RAG     | Streamlit  |\n | [SubQuestionQueryEngine.ipynb](third_party/LlamaIndex/RouterQueryEngine.ipynb)                                  | agent                  | LLamaIndex |\n | [LLM Judge: Detecting hallucinations in language models](third_party/wandb/README.md)                           | fine-tuning, evaluation | Weights & Biases |\n+| [`x mistrial`: CLI & TUI APP Module in X-CMD](third_party/x-cmd/README.ipynb)                                   | CLI, TUI APP, Chat     | x-cmd |",
        "path": "README.md",
        "commit_id": "78a695a2f55a7b59e26b64db974cd7705c502c61",
        "original_commit_id": "d1d0e4172a336a769a2fd1a4b1e3bf8fe869facd",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Small typo?",
        "created_at": "2024-08-21T09:19:15Z",
        "updated_at": "2024-08-21T09:19:15Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#discussion_r1724728648",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/83",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1724728648"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/83#discussion_r1724728648"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/83"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1724728648/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 75,
        "side": "RIGHT",
        "original_position": 4,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1724786635",
        "pull_request_review_id": 2250357625,
        "id": 1724786635,
        "node_id": "PRRC_kwDOLBF5j85mzifL",
        "diff_hunk": "@@ -72,3 +72,4 @@ Disclaimer: Examples contributed by the community and partners do not represent\n | [Streamlit Integration - Chat with PDF](third_party/streamlit/README.md)                                        | UI chat, demo, RAG     | Streamlit  |\n | [SubQuestionQueryEngine.ipynb](third_party/LlamaIndex/RouterQueryEngine.ipynb)                                  | agent                  | LLamaIndex |\n | [LLM Judge: Detecting hallucinations in language models](third_party/wandb/README.md)                           | fine-tuning, evaluation | Weights & Biases |\n+| [`x mistrial`: CLI & TUI APP Module in X-CMD](third_party/x-cmd/README.ipynb)                                   | CLI, TUI APP, Chat     | x-cmd |",
        "path": "README.md",
        "commit_id": "78a695a2f55a7b59e26b64db974cd7705c502c61",
        "original_commit_id": "d1d0e4172a336a769a2fd1a4b1e3bf8fe869facd",
        "user": {
          "login": "edwinjhlee",
          "id": 4426319,
          "node_id": "MDQ6VXNlcjQ0MjYzMTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4426319?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/edwinjhlee",
          "html_url": "https://github.com/edwinjhlee",
          "followers_url": "https://api.github.com/users/edwinjhlee/followers",
          "following_url": "https://api.github.com/users/edwinjhlee/following{/other_user}",
          "gists_url": "https://api.github.com/users/edwinjhlee/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/edwinjhlee/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/edwinjhlee/subscriptions",
          "organizations_url": "https://api.github.com/users/edwinjhlee/orgs",
          "repos_url": "https://api.github.com/users/edwinjhlee/repos",
          "events_url": "https://api.github.com/users/edwinjhlee/events{/privacy}",
          "received_events_url": "https://api.github.com/users/edwinjhlee/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "I am so so sorry ...\r\n\r\nWe will fix it right away.\r\n",
        "created_at": "2024-08-21T10:01:02Z",
        "updated_at": "2024-08-21T10:01:02Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/83#discussion_r1724786635",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/83",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1724786635"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/83#discussion_r1724786635"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/83"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1724786635/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 75,
        "side": "RIGHT",
        "in_reply_to_id": 1724728648,
        "original_position": 4,
        "position": null,
        "subject_type": "line"
      }
    ]
  },
  "76": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257751978",
        "html_url": "https://github.com/mistralai/cookbook/pull/76#issuecomment-2257751978",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/76",
        "id": 2257751978,
        "node_id": "IC_kwDOLBF5j86Gko-q",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-30T08:16:54Z",
        "updated_at": "2024-07-30T08:16:54Z",
        "author_association": "COLLABORATOR",
        "body": "Looks clean! Thank you for the notebook! Could you update the README table too? ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257751978/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257809765",
        "html_url": "https://github.com/mistralai/cookbook/pull/76#issuecomment-2257809765",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/76",
        "id": 2257809765,
        "node_id": "IC_kwDOLBF5j86Gk3Fl",
        "user": {
          "login": "ethux",
          "id": 30626044,
          "node_id": "MDQ6VXNlcjMwNjI2MDQ0",
          "avatar_url": "https://avatars.githubusercontent.com/u/30626044?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ethux",
          "html_url": "https://github.com/ethux",
          "followers_url": "https://api.github.com/users/ethux/followers",
          "following_url": "https://api.github.com/users/ethux/following{/other_user}",
          "gists_url": "https://api.github.com/users/ethux/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ethux/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ethux/subscriptions",
          "organizations_url": "https://api.github.com/users/ethux/orgs",
          "repos_url": "https://api.github.com/users/ethux/repos",
          "events_url": "https://api.github.com/users/ethux/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ethux/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-30T08:45:54Z",
        "updated_at": "2024-07-30T08:45:54Z",
        "author_association": "CONTRIBUTOR",
        "body": "@pandora-s-git updated the README and added some example questions! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257809765/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257927016",
        "html_url": "https://github.com/mistralai/cookbook/pull/76#issuecomment-2257927016",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/76",
        "id": 2257927016,
        "node_id": "IC_kwDOLBF5j86GlTto",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-30T09:41:58Z",
        "updated_at": "2024-07-30T09:41:58Z",
        "author_association": "COLLABORATOR",
        "body": "Looks good for me, and also works on colab, thank you!! Will be merging this ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257927016/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257929469",
        "html_url": "https://github.com/mistralai/cookbook/pull/76#issuecomment-2257929469",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/76",
        "id": 2257929469,
        "node_id": "IC_kwDOLBF5j86GlUT9",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-30T09:43:07Z",
        "updated_at": "2024-07-30T09:43:07Z",
        "author_association": "COLLABORATOR",
        "body": "Oh will the readme link work? I see that you updated the table not with the file directory? ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257929469/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257934677",
        "html_url": "https://github.com/mistralai/cookbook/pull/76#issuecomment-2257934677",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/76",
        "id": 2257934677,
        "node_id": "IC_kwDOLBF5j86GlVlV",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-30T09:45:41Z",
        "updated_at": "2024-07-30T09:45:41Z",
        "author_association": "COLLABORATOR",
        "body": "Thank you!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257934677/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "75": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2248215299",
        "html_url": "https://github.com/mistralai/cookbook/pull/75#issuecomment-2248215299",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/75",
        "id": 2248215299,
        "node_id": "IC_kwDOLBF5j86GAQsD",
        "user": {
          "login": "ishaan-jaff",
          "id": 29436595,
          "node_id": "MDQ6VXNlcjI5NDM2NTk1",
          "avatar_url": "https://avatars.githubusercontent.com/u/29436595?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ishaan-jaff",
          "html_url": "https://github.com/ishaan-jaff",
          "followers_url": "https://api.github.com/users/ishaan-jaff/followers",
          "following_url": "https://api.github.com/users/ishaan-jaff/following{/other_user}",
          "gists_url": "https://api.github.com/users/ishaan-jaff/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ishaan-jaff/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ishaan-jaff/subscriptions",
          "organizations_url": "https://api.github.com/users/ishaan-jaff/orgs",
          "repos_url": "https://api.github.com/users/ishaan-jaff/repos",
          "events_url": "https://api.github.com/users/ishaan-jaff/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ishaan-jaff/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-24T14:49:54Z",
        "updated_at": "2024-07-24T14:49:54Z",
        "author_association": "NONE",
        "body": "hi @sophiamyang can you review this PR? Happy to make any changes necessary ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2248215299/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257237130",
        "html_url": "https://github.com/mistralai/cookbook/pull/75#issuecomment-2257237130",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/75",
        "id": 2257237130,
        "node_id": "IC_kwDOLBF5j86GirSK",
        "user": {
          "login": "ishaan-jaff",
          "id": 29436595,
          "node_id": "MDQ6VXNlcjI5NDM2NTk1",
          "avatar_url": "https://avatars.githubusercontent.com/u/29436595?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ishaan-jaff",
          "html_url": "https://github.com/ishaan-jaff",
          "followers_url": "https://api.github.com/users/ishaan-jaff/followers",
          "following_url": "https://api.github.com/users/ishaan-jaff/following{/other_user}",
          "gists_url": "https://api.github.com/users/ishaan-jaff/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ishaan-jaff/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ishaan-jaff/subscriptions",
          "organizations_url": "https://api.github.com/users/ishaan-jaff/orgs",
          "repos_url": "https://api.github.com/users/ishaan-jaff/repos",
          "events_url": "https://api.github.com/users/ishaan-jaff/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ishaan-jaff/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-30T00:24:17Z",
        "updated_at": "2024-07-30T00:24:17Z",
        "author_association": "NONE",
        "body": "following up on this @sophiamyang - any other changes ? ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257237130/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257762990",
        "html_url": "https://github.com/mistralai/cookbook/pull/75#issuecomment-2257762990",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/75",
        "id": 2257762990,
        "node_id": "IC_kwDOLBF5j86Gkrqu",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-30T08:22:33Z",
        "updated_at": "2024-07-30T08:22:33Z",
        "author_association": "COLLABORATOR",
        "body": "Hi ishaan, I dont think this will work, our current SDK Python Client does not have the same methods and behavior as OpenAIs SDKs, it seems you are using chat.completions.create and other methods that do not current exist with the current SDK, possible to update it? And thank you for the notebook! \ud83d\ude4f",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2257762990/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501382709",
        "html_url": "https://github.com/mistralai/cookbook/pull/75#issuecomment-2501382709",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/75",
        "id": 2501382709,
        "node_id": "IC_kwDOLBF5j86VGBI1",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-26T16:46:57Z",
        "updated_at": "2024-11-26T16:46:57Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @ishaan-jaff, I think your code with Mistral client still has issues. Could you help update the code? You can see our docs [here](https://docs.mistral.ai/getting-started/quickstart/). ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501382709/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501695567",
        "html_url": "https://github.com/mistralai/cookbook/pull/75#issuecomment-2501695567",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/75",
        "id": 2501695567,
        "node_id": "IC_kwDOLBF5j86VHNhP",
        "user": {
          "login": "ishaan-jaff",
          "id": 29436595,
          "node_id": "MDQ6VXNlcjI5NDM2NTk1",
          "avatar_url": "https://avatars.githubusercontent.com/u/29436595?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ishaan-jaff",
          "html_url": "https://github.com/ishaan-jaff",
          "followers_url": "https://api.github.com/users/ishaan-jaff/followers",
          "following_url": "https://api.github.com/users/ishaan-jaff/following{/other_user}",
          "gists_url": "https://api.github.com/users/ishaan-jaff/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ishaan-jaff/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ishaan-jaff/subscriptions",
          "organizations_url": "https://api.github.com/users/ishaan-jaff/orgs",
          "repos_url": "https://api.github.com/users/ishaan-jaff/repos",
          "events_url": "https://api.github.com/users/ishaan-jaff/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ishaan-jaff/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-26T18:52:15Z",
        "updated_at": "2024-11-26T18:52:15Z",
        "author_association": "NONE",
        "body": "acknowledging this, will add this to my backlog @sophiamyang ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501695567/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1691775881",
        "pull_request_review_id": 2199814357,
        "id": 1691775881,
        "node_id": "PRRC_kwDOLBF5j85k1nOJ",
        "diff_hunk": "@@ -0,0 +1,159 @@\n+# Use LiteLLM Proxy to Call Mistral AI API\n+\n+Use [LiteLLM Proxy](https://docs.litellm.ai/docs/simple_proxy) for:\n+- Calling 100+ LLMs Mistral AI, OpenAI, Azure, Vertex, Bedrock/etc. in the OpenAI ChatCompletions & Completions format\n+- Track usage + set budgets with Virtual Keys\n+\n+Works for [Mistral AI API](https://docs.litellm.ai/docs/providers/mistral) + [Codestral API](https://docs.litellm.ai/docs/providers/codestral) + [Bedrock](https://docs.litellm.ai/docs/providers/bedrock)\n+\n+## Sample Usage\n+\n+### Step 1. Create a Config for LiteLLM proxy\n+\n+LiteLLM Requires a config with all your models define - we can call this file `litellm_config.yaml`\n+\n+[Detailed docs on how to setup litellm config - here](https://docs.litellm.ai/docs/proxy/configs)\n+\n+```yaml\n+model_list:\n+  - model_name: mistral-small-latest ### MODEL Alias ###\n+    litellm_params: # all params accepted by litellm.completion() - https://docs.litellm.ai/docs/completion/input\n+      model: mistral/mistral-small-latest ### MODEL NAME sent to `litellm.completion()` ###\n+      api_key: \"os.environ/MISTRAL_API_KEY\" # does os.getenv(\"MISTRAL_API_KEY\")\n+  - model_name: mistral-nemo\n+    litellm_params: \n+      model: mistral/open-mistral-nemo \n+      api_key: \"os.environ/MISTRAL_API_KEY\"\n+\n+```\n+\n+### Step 2. Start litellm proxy\n+\n+```shell\n+docker run \\\n+    -v $(pwd)/litellm_config.yaml:/app/config.yaml \\\n+    -e MISTRAL_API_KEY=<your-mistral-api-key>\n+    -p 4000:4000 \\\n+    ghcr.io/berriai/litellm:main-latest \\\n+    --config /app/config.yaml --detailed_debug\n+```\n+\n+### Step 3. Test it! \n+\n+[Use with Langchain, LlamaIndex, Instructor, etc.](https://docs.litellm.ai/docs/proxy/user_keys)\n+\n+```bash\n+import openai",
        "path": "third_party/LiteLLM/README.md",
        "commit_id": "4e88180d9f8faf93bc0d35edbc76d352c2fd7ce5",
        "original_commit_id": "d0933641a2ebad1ecaefe00d3ae1c3ca7e7fe5c0",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Could you use Mistral SDK instead of OpenAI please? ",
        "created_at": "2024-07-25T16:27:19Z",
        "updated_at": "2024-07-25T16:27:31Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/75#discussion_r1691775881",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/75",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1691775881"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/75#discussion_r1691775881"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/75"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1691775881/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 46,
        "side": "RIGHT",
        "original_position": 46,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1692430021",
        "pull_request_review_id": 2200826063,
        "id": 1692430021,
        "node_id": "PRRC_kwDOLBF5j85k4G7F",
        "diff_hunk": "@@ -0,0 +1,159 @@\n+# Use LiteLLM Proxy to Call Mistral AI API\n+\n+Use [LiteLLM Proxy](https://docs.litellm.ai/docs/simple_proxy) for:\n+- Calling 100+ LLMs Mistral AI, OpenAI, Azure, Vertex, Bedrock/etc. in the OpenAI ChatCompletions & Completions format\n+- Track usage + set budgets with Virtual Keys\n+\n+Works for [Mistral AI API](https://docs.litellm.ai/docs/providers/mistral) + [Codestral API](https://docs.litellm.ai/docs/providers/codestral) + [Bedrock](https://docs.litellm.ai/docs/providers/bedrock)\n+\n+## Sample Usage\n+\n+### Step 1. Create a Config for LiteLLM proxy\n+\n+LiteLLM Requires a config with all your models define - we can call this file `litellm_config.yaml`\n+\n+[Detailed docs on how to setup litellm config - here](https://docs.litellm.ai/docs/proxy/configs)\n+\n+```yaml\n+model_list:\n+  - model_name: mistral-small-latest ### MODEL Alias ###\n+    litellm_params: # all params accepted by litellm.completion() - https://docs.litellm.ai/docs/completion/input\n+      model: mistral/mistral-small-latest ### MODEL NAME sent to `litellm.completion()` ###\n+      api_key: \"os.environ/MISTRAL_API_KEY\" # does os.getenv(\"MISTRAL_API_KEY\")\n+  - model_name: mistral-nemo\n+    litellm_params: \n+      model: mistral/open-mistral-nemo \n+      api_key: \"os.environ/MISTRAL_API_KEY\"\n+\n+```\n+\n+### Step 2. Start litellm proxy\n+\n+```shell\n+docker run \\\n+    -v $(pwd)/litellm_config.yaml:/app/config.yaml \\\n+    -e MISTRAL_API_KEY=<your-mistral-api-key>\n+    -p 4000:4000 \\\n+    ghcr.io/berriai/litellm:main-latest \\\n+    --config /app/config.yaml --detailed_debug\n+```\n+\n+### Step 3. Test it! \n+\n+[Use with Langchain, LlamaIndex, Instructor, etc.](https://docs.litellm.ai/docs/proxy/user_keys)\n+\n+```bash\n+import openai",
        "path": "third_party/LiteLLM/README.md",
        "commit_id": "4e88180d9f8faf93bc0d35edbc76d352c2fd7ce5",
        "original_commit_id": "d0933641a2ebad1ecaefe00d3ae1c3ca7e7fe5c0",
        "user": {
          "login": "ishaan-jaff",
          "id": 29436595,
          "node_id": "MDQ6VXNlcjI5NDM2NTk1",
          "avatar_url": "https://avatars.githubusercontent.com/u/29436595?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ishaan-jaff",
          "html_url": "https://github.com/ishaan-jaff",
          "followers_url": "https://api.github.com/users/ishaan-jaff/followers",
          "following_url": "https://api.github.com/users/ishaan-jaff/following{/other_user}",
          "gists_url": "https://api.github.com/users/ishaan-jaff/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ishaan-jaff/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ishaan-jaff/subscriptions",
          "organizations_url": "https://api.github.com/users/ishaan-jaff/orgs",
          "repos_url": "https://api.github.com/users/ishaan-jaff/repos",
          "events_url": "https://api.github.com/users/ishaan-jaff/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ishaan-jaff/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Updated @sophiamyang - now examples use the Mistral SDK ",
        "created_at": "2024-07-26T03:01:05Z",
        "updated_at": "2024-07-26T03:01:05Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/75#discussion_r1692430021",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/75",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1692430021"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/75#discussion_r1692430021"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/75"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1692430021/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 46,
        "side": "RIGHT",
        "in_reply_to_id": 1691775881,
        "original_position": 46,
        "position": null,
        "subject_type": "line"
      }
    ]
  },
  "72": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2245804849",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#issuecomment-2245804849",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/72",
        "id": 2245804849,
        "node_id": "IC_kwDOLBF5j86F3EMx",
        "user": {
          "login": "maartenbreddels",
          "id": 1765949,
          "node_id": "MDQ6VXNlcjE3NjU5NDk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1765949?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/maartenbreddels",
          "html_url": "https://github.com/maartenbreddels",
          "followers_url": "https://api.github.com/users/maartenbreddels/followers",
          "following_url": "https://api.github.com/users/maartenbreddels/following{/other_user}",
          "gists_url": "https://api.github.com/users/maartenbreddels/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/maartenbreddels/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/maartenbreddels/subscriptions",
          "organizations_url": "https://api.github.com/users/maartenbreddels/orgs",
          "repos_url": "https://api.github.com/users/maartenbreddels/repos",
          "events_url": "https://api.github.com/users/maartenbreddels/events{/privacy}",
          "received_events_url": "https://api.github.com/users/maartenbreddels/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-23T17:16:40Z",
        "updated_at": "2024-07-23T17:16:40Z",
        "author_association": "CONTRIBUTOR",
        "body": "Happy to review it this week!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2245804849/reactions",
          "total_count": 2,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 1,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2263162488",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#issuecomment-2263162488",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/72",
        "id": 2263162488,
        "node_id": "IC_kwDOLBF5j86G5R54",
        "user": {
          "login": "alonsosilvaallende",
          "id": 30263736,
          "node_id": "MDQ6VXNlcjMwMjYzNzM2",
          "avatar_url": "https://avatars.githubusercontent.com/u/30263736?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/alonsosilvaallende",
          "html_url": "https://github.com/alonsosilvaallende",
          "followers_url": "https://api.github.com/users/alonsosilvaallende/followers",
          "following_url": "https://api.github.com/users/alonsosilvaallende/following{/other_user}",
          "gists_url": "https://api.github.com/users/alonsosilvaallende/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/alonsosilvaallende/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/alonsosilvaallende/subscriptions",
          "organizations_url": "https://api.github.com/users/alonsosilvaallende/orgs",
          "repos_url": "https://api.github.com/users/alonsosilvaallende/repos",
          "events_url": "https://api.github.com/users/alonsosilvaallende/events{/privacy}",
          "received_events_url": "https://api.github.com/users/alonsosilvaallende/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-08-01T14:03:05Z",
        "updated_at": "2024-08-01T14:03:05Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thank you very much @maartenbreddels \r\nI think the code is much cleaner now.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2263162488/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2379316617",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#issuecomment-2379316617",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/72",
        "id": 2379316617,
        "node_id": "IC_kwDOLBF5j86N0X2J",
        "user": {
          "login": "iisakkirotko",
          "id": 5592797,
          "node_id": "MDQ6VXNlcjU1OTI3OTc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/5592797?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/iisakkirotko",
          "html_url": "https://github.com/iisakkirotko",
          "followers_url": "https://api.github.com/users/iisakkirotko/followers",
          "following_url": "https://api.github.com/users/iisakkirotko/following{/other_user}",
          "gists_url": "https://api.github.com/users/iisakkirotko/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/iisakkirotko/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/iisakkirotko/subscriptions",
          "organizations_url": "https://api.github.com/users/iisakkirotko/orgs",
          "repos_url": "https://api.github.com/users/iisakkirotko/repos",
          "events_url": "https://api.github.com/users/iisakkirotko/events{/privacy}",
          "received_events_url": "https://api.github.com/users/iisakkirotko/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-09-27T13:41:51Z",
        "updated_at": "2024-09-27T13:41:51Z",
        "author_association": "NONE",
        "body": "Hi! What's the status on this PR?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2379316617/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2385156038",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#issuecomment-2385156038",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/72",
        "id": 2385156038,
        "node_id": "IC_kwDOLBF5j86OKpfG",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-10-01T08:43:38Z",
        "updated_at": "2024-10-01T08:44:23Z",
        "author_association": "COLLABORATOR",
        "body": "Hi, thanks so much! Before merging, would it be possible to know if the readme could be a colab notebook instead? Or it requires to be a script to work?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2385156038/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2385982091",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#issuecomment-2385982091",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/72",
        "id": 2385982091,
        "node_id": "IC_kwDOLBF5j86ONzKL",
        "user": {
          "login": "maartenbreddels",
          "id": 1765949,
          "node_id": "MDQ6VXNlcjE3NjU5NDk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1765949?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/maartenbreddels",
          "html_url": "https://github.com/maartenbreddels",
          "followers_url": "https://api.github.com/users/maartenbreddels/followers",
          "following_url": "https://api.github.com/users/maartenbreddels/following{/other_user}",
          "gists_url": "https://api.github.com/users/maartenbreddels/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/maartenbreddels/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/maartenbreddels/subscriptions",
          "organizations_url": "https://api.github.com/users/maartenbreddels/orgs",
          "repos_url": "https://api.github.com/users/maartenbreddels/repos",
          "events_url": "https://api.github.com/users/maartenbreddels/events{/privacy}",
          "received_events_url": "https://api.github.com/users/maartenbreddels/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-10-01T13:47:12Z",
        "updated_at": "2024-10-01T13:47:12Z",
        "author_association": "CONTRIBUTOR",
        "body": "> would it be possible to know if the readme could be a colab notebook instead?\r\n\r\nCurious to know why you would want that? If the reason is to be able to change/run the code, I was actually thinking of putting it on https://py.cafe",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2385982091/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2391067326",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#issuecomment-2391067326",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/72",
        "id": 2391067326,
        "node_id": "IC_kwDOLBF5j86OhMq-",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-10-03T10:30:38Z",
        "updated_at": "2024-10-03T10:32:02Z",
        "author_association": "COLLABORATOR",
        "body": "Its mostly to be able to run easily the code yes, since as a jupyter notebook for colab we can easily mention it on the docs and redirect the users to a colab for them to run the code. Most of the cookbooks are jupyter notebooks too unless that is not feasible.\r\n\r\nHowever if that is not possible its fine, py.cafe however does sound like a cool idea.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2391067326/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2401869242",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#issuecomment-2401869242",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/72",
        "id": 2401869242,
        "node_id": "IC_kwDOLBF5j86PKZ26",
        "user": {
          "login": "maartenbreddels",
          "id": 1765949,
          "node_id": "MDQ6VXNlcjE3NjU5NDk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1765949?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/maartenbreddels",
          "html_url": "https://github.com/maartenbreddels",
          "followers_url": "https://api.github.com/users/maartenbreddels/followers",
          "following_url": "https://api.github.com/users/maartenbreddels/following{/other_user}",
          "gists_url": "https://api.github.com/users/maartenbreddels/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/maartenbreddels/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/maartenbreddels/subscriptions",
          "organizations_url": "https://api.github.com/users/maartenbreddels/orgs",
          "repos_url": "https://api.github.com/users/maartenbreddels/repos",
          "events_url": "https://api.github.com/users/maartenbreddels/events{/privacy}",
          "received_events_url": "https://api.github.com/users/maartenbreddels/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-10-09T09:55:34Z",
        "updated_at": "2024-10-09T09:55:34Z",
        "author_association": "CONTRIBUTOR",
        "body": "I'll work with @alonsosilvaallende to get the first example on py.cafe (requires some development for the PyCafe team to support secrets, this should take ~1 week max).\r\n\r\nDue to the faiss dependency, we cannot run the chat with a pdf on PyCafe (yet).\r\n\r\n@alonsosilvaallende what do you think, does it make sense to turn the chat with pdf example into a notebook, so we can include a colab link? ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2401869242/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2405023414",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#issuecomment-2405023414",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/72",
        "id": 2405023414,
        "node_id": "IC_kwDOLBF5j86PWb62",
        "user": {
          "login": "alonsosilvaallende",
          "id": 30263736,
          "node_id": "MDQ6VXNlcjMwMjYzNzM2",
          "avatar_url": "https://avatars.githubusercontent.com/u/30263736?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/alonsosilvaallende",
          "html_url": "https://github.com/alonsosilvaallende",
          "followers_url": "https://api.github.com/users/alonsosilvaallende/followers",
          "following_url": "https://api.github.com/users/alonsosilvaallende/following{/other_user}",
          "gists_url": "https://api.github.com/users/alonsosilvaallende/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/alonsosilvaallende/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/alonsosilvaallende/subscriptions",
          "organizations_url": "https://api.github.com/users/alonsosilvaallende/orgs",
          "repos_url": "https://api.github.com/users/alonsosilvaallende/repos",
          "events_url": "https://api.github.com/users/alonsosilvaallende/events{/privacy}",
          "received_events_url": "https://api.github.com/users/alonsosilvaallende/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-10-10T12:59:18Z",
        "updated_at": "2024-10-10T12:59:18Z",
        "author_association": "CONTRIBUTOR",
        "body": "> I'll work with @alonsosilvaallende to get the first example on py.cafe (requires some development for the PyCafe team to support secrets, this should take ~1 week max).\r\n> \r\n> Due to the faiss dependency, we cannot run the chat with a pdf on PyCafe (yet).\r\n> \r\n> @alonsosilvaallende what do you think, does it make sense to turn the chat with pdf example into a notebook, so we can include a colab link?\r\n\r\nThank you @maartenbreddels Yes, we can do a colab with the chat with pdf example. If I remember correctly there was a problem with threads with colab and chat but I will check again.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2405023414/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501410533",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#issuecomment-2501410533",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/72",
        "id": 2501410533,
        "node_id": "IC_kwDOLBF5j86VGH7l",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-26T16:53:36Z",
        "updated_at": "2024-11-26T16:53:36Z",
        "author_association": "COLLABORATOR",
        "body": "Hi everyone, if I understand currently the cookbook wont be possible as a colab notebook for now correct? In that case if you believe this cookbook is ready we can review it and merge it as it is.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2501410533/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2504004179",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#issuecomment-2504004179",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/72",
        "id": 2504004179,
        "node_id": "IC_kwDOLBF5j86VQBJT",
        "user": {
          "login": "alonsosilvaallende",
          "id": 30263736,
          "node_id": "MDQ6VXNlcjMwMjYzNzM2",
          "avatar_url": "https://avatars.githubusercontent.com/u/30263736?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/alonsosilvaallende",
          "html_url": "https://github.com/alonsosilvaallende",
          "followers_url": "https://api.github.com/users/alonsosilvaallende/followers",
          "following_url": "https://api.github.com/users/alonsosilvaallende/following{/other_user}",
          "gists_url": "https://api.github.com/users/alonsosilvaallende/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/alonsosilvaallende/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/alonsosilvaallende/subscriptions",
          "organizations_url": "https://api.github.com/users/alonsosilvaallende/orgs",
          "repos_url": "https://api.github.com/users/alonsosilvaallende/repos",
          "events_url": "https://api.github.com/users/alonsosilvaallende/events{/privacy}",
          "received_events_url": "https://api.github.com/users/alonsosilvaallende/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-11-27T14:21:04Z",
        "updated_at": "2024-11-27T14:21:04Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thank you @pandora-s-git \r\nYes, that is correct. I believe this cookbook is ready. Thank you.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2504004179/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521081707",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#issuecomment-2521081707",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/72",
        "id": 2521081707,
        "node_id": "IC_kwDOLBF5j86WRKdr",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-05T18:06:15Z",
        "updated_at": "2024-12-05T18:06:15Z",
        "author_association": "COLLABORATOR",
        "body": "Thank you for the cookbook! Merged!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521081707/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 1,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521273751",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#issuecomment-2521273751",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/72",
        "id": 2521273751,
        "node_id": "IC_kwDOLBF5j86WR5WX",
        "user": {
          "login": "alonsosilvaallende",
          "id": 30263736,
          "node_id": "MDQ6VXNlcjMwMjYzNzM2",
          "avatar_url": "https://avatars.githubusercontent.com/u/30263736?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/alonsosilvaallende",
          "html_url": "https://github.com/alonsosilvaallende",
          "followers_url": "https://api.github.com/users/alonsosilvaallende/followers",
          "following_url": "https://api.github.com/users/alonsosilvaallende/following{/other_user}",
          "gists_url": "https://api.github.com/users/alonsosilvaallende/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/alonsosilvaallende/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/alonsosilvaallende/subscriptions",
          "organizations_url": "https://api.github.com/users/alonsosilvaallende/orgs",
          "repos_url": "https://api.github.com/users/alonsosilvaallende/repos",
          "events_url": "https://api.github.com/users/alonsosilvaallende/events{/privacy}",
          "received_events_url": "https://api.github.com/users/alonsosilvaallende/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-05T19:55:49Z",
        "updated_at": "2024-12-05T19:55:49Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thank you very much!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521273751/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699902931",
        "pull_request_review_id": 2212332935,
        "id": 1699902931,
        "node_id": "PRRC_kwDOLBF5j85lUnXT",
        "diff_hunk": "@@ -0,0 +1,399 @@\n+# Chat with Your PDF using Mistral and Solara\n+\n+*Author: Alonso Silva Allende (Nokia Bell Labs), GitHub handle: [alonsosilvaallende](https://github.com/alonsosilvaallende/)*\n+\n+In this guide, we introduce the basics of building a chatbot with chat and PDF reading capabilities using `solara`\n+\n+## Chat Interface\n+\n+Let's implement a simple chat interface. To do this, we need to import `solara` and `mistralai` libraries.\n+\n+```shell\n+pip install solara mistralai\n+```\n+\n+*This demo uses `solara===1.35.1` and `mistralai===0.4.2`*\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+```\n+\n+Create your `MistralClient` instance using your Mistral API key.\n+\n+```py\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+```\n+\n+Let's initialize a reactive variable where all messages will be stored.\n+\n+```py\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+```\n+\n+Given a list of messages (for the moment empty but not for long), we query Mistral and retrieve the response. To make the interaction smooth, we handle it by streaming the response. For this, we define a generator.\n+\n+```py\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+We stream the response by displaying each chunk as it is received.\n+\n+```py\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+```\n+\n+Given a list of messages, we display them on the screen:\n+\n+```py\n+@sl.component\n+def Page():\n+    with sl.lab.ChatBox():\n+        for item in messages.value:\n+            with sl.lab.ChatMessage(\n+                user=item[\"role\"] == \"user\",\n+                name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+            ):\n+                sl.Markdown(item[\"content\"])\n+```\n+\n+The following step is to retrieve the input from the user and store it in the list of messages. For this, we will use `ChatInput` from `solara`\n+\n+```py\n+        def send(user_message):\n+            messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+        sl.lab.ChatInput(send_callback=send)\n+```\n+\n+We need to handle a streamed response. Therefore we create a task which will be activated by a change on the number of user messages.\n+```py\n+        user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+        def response(messages):\n+            messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+            for chunk in response_generator(messages):\n+                add_chunk_to_ai_message(chunk)\n+        def result():\n+            if messages.value != []:\n+                response(messages)\n+        result = sl.lab.use_task(result, dependencies=[user_message_count])\n+```\n+\n+That's it! An interface where you can chat with Mistral's models. I added some optional styling below.\n+\n+To run this code, enter `solara run chat.py` in the console.\n+\n+<details>\n+<summary><b>chat.py</b></summary>\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key=mistral_api_key)\n+\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+    def send(user_message):\n+        messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+    def response(messages):\n+        messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+        for chunk in response_generator(messages.value[:-1]):\n+            add_chunk_to_ai_message(chunk)\n+    def result():\n+        if messages.value != []:\n+            response(messages)\n+    result = sl.lab.use_task(result, dependencies=[user_message_count])\n+    with sl.Column(align=\"center\"):\n+        with sl.lab.ChatBox(style={\"position\": \"fixed\", \"overflow-y\": \"scroll\",\"scrollbar-width\": \"none\", \"-ms-overflow-style\": \"none\", \"top\": \"0\", \"bottom\": \"10rem\", \"width\": \"60%\"}):\n+            for item in messages.value:\n+                with sl.lab.ChatMessage(\n+                    user=item[\"role\"] == \"user\",\n+                    name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+                ):\n+                    sl.Markdown(item[\"content\"])\n+        sl.lab.ChatInput(send_callback=send, style={\"position\": \"fixed\", \"bottom\": \"3rem\", \"width\": \"70%\"})\n+```\n+\n+</details>\n+\n+## Chatting with PDFs\n+\n+To enable our model to read PDFs, we need to convert the content, extract the text, and then use Mistral's embedding model to retrieve chunks of our document(s) to feed to the model. We need to implement some basic RAG (Retrieval-Augmented Generation)!\n+\n+For this task, we require `faiss` and `PyPDF2`. Let's import them:\n+```py\n+pip install PyPDF2 faiss\n+```\n+\n+**For CPU only please install faiss-cpu instead.**\n+\n+This demo uses `PyPDF2===3.0.1` and `faiss-cpu===1.8.0`\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+```\n+\n+Now, we need to add the possibility to upload PDF files. For this, let's use `FileDropMultiple` from `solara`. The PDFs will then be stored in a new reactive variable:\n+\n+```py\n+from solara.components.file_drop import FileInfo\n+\n+content, set_content = sl.use_state(cast(List[bytes], []))\n+\n+def on_file(files: List[FileInfo]):\n+    set_content([file[\"file_obj\"].read() for file in files])\n+\n+sl.FileDropMultiple(\n+    label=\"Drag and drop your PDF file(s) here.\",\n+    on_file=on_file,\n+    lazy=True,\n+)\n+```\n+\n+The PDFs are stored, but as they are, we just have a large amount of bytes. To be able to chat with the PDF, we will need to extract the text:\n+```py\n+txt = sl.use_reactive(cast(List[str], []))\n+\n+def get_text():\n+    txt_all = []\n+    for _content in content:\n+        bytes_io = io.BytesIO(_content)\n+        reader = PyPDF2.PdfReader(bytes_io)\n+        txt_aux = \"\"\n+        for page in reader.pages:\n+            txt_aux += page.extract_text()\n+        txt_all.append(txt_aux)\n+    return txt_all\n+\n+if content:\n+    sl.Info(\"File(s) has been uploaded. Showing the beginning of the file(s)...\")\n+    result: Task[List[str]] = use_task(get_text, dependencies=[content])\n+    if result.finished:\n+        txt.value = result.value\n+    sl.ProgressLinear(result.pending)\n+    for text in txt.value:\n+        sl.Markdown(f\"{text[:100]}\")\n+```\n+\n+Now that we have the texts, let's use Mistral's embeddings to retrieve the relevant chunks. First, let's define a function that converts text to embeddings with Mistral:\n+\n+```py\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+```\n+\n+Next, we can declare a function that will handle all the retrieval part. This step will make use of `faiss` for the vector store and the previously created `get_text_embedding function`. This will cut the different files into chunks, create the embeddings, and retrieve the best 4 chunks among them, which will then be concatenated into a single string:\n+\n+```py\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+```\n+\n+Finally, we edit `response_generator` to implement our new RAG with the files! This function, when there are PDFs, will extract the text with PyPDF2 and make use of `rag_pdf` to retrieve the relevant data. It will only then send the request to the model:\n+\n+```py\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\",\n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+And everything is done! Now we can run our new interface with `solara run chat_with_pdfs.py`\n+\n+<details>\n+<summary><b>chat_with_pdfs.py</b></summary>\n+\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+from solara.components.file_drop import FileInfo\n+from solara.lab import use_task, Task\n+from typing import List, cast\n+from typing_extensions import TypedDict\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\", \n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    with sl.Sidebar():\n+        content, set_content = sl.use_state(cast(List[bytes], []))\n+        filename, set_filename = sl.use_state(cast(List[str], []))",
        "path": "third_party/solara/README.md",
        "commit_id": "441fd7ce5505c9016b5fc6c5544cb5f02c680e85",
        "original_commit_id": "31a9695363a8bbb0b566b148af79c4d57880ae75",
        "user": {
          "login": "maartenbreddels",
          "id": 1765949,
          "node_id": "MDQ6VXNlcjE3NjU5NDk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1765949?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/maartenbreddels",
          "html_url": "https://github.com/maartenbreddels",
          "followers_url": "https://api.github.com/users/maartenbreddels/followers",
          "following_url": "https://api.github.com/users/maartenbreddels/following{/other_user}",
          "gists_url": "https://api.github.com/users/maartenbreddels/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/maartenbreddels/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/maartenbreddels/subscriptions",
          "organizations_url": "https://api.github.com/users/maartenbreddels/orgs",
          "repos_url": "https://api.github.com/users/maartenbreddels/repos",
          "events_url": "https://api.github.com/users/maartenbreddels/events{/privacy}",
          "received_events_url": "https://api.github.com/users/maartenbreddels/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "```suggestion\r\n        filename, set_filename = sl.use_state(cast(List[str], []))\r\n```\r\nnot used",
        "created_at": "2024-08-01T10:18:26Z",
        "updated_at": "2024-08-01T10:34:02Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699902931",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/72",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699902931"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699902931"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/72"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699902931/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 1,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 342,
        "side": "RIGHT",
        "original_position": 342,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699905709",
        "pull_request_review_id": 2212332935,
        "id": 1699905709,
        "node_id": "PRRC_kwDOLBF5j85lUoCt",
        "diff_hunk": "@@ -0,0 +1,399 @@\n+# Chat with Your PDF using Mistral and Solara\n+\n+*Author: Alonso Silva Allende (Nokia Bell Labs), GitHub handle: [alonsosilvaallende](https://github.com/alonsosilvaallende/)*\n+\n+In this guide, we introduce the basics of building a chatbot with chat and PDF reading capabilities using `solara`\n+\n+## Chat Interface\n+\n+Let's implement a simple chat interface. To do this, we need to import `solara` and `mistralai` libraries.\n+\n+```shell\n+pip install solara mistralai\n+```\n+\n+*This demo uses `solara===1.35.1` and `mistralai===0.4.2`*\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+```\n+\n+Create your `MistralClient` instance using your Mistral API key.\n+\n+```py\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+```\n+\n+Let's initialize a reactive variable where all messages will be stored.\n+\n+```py\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+```\n+\n+Given a list of messages (for the moment empty but not for long), we query Mistral and retrieve the response. To make the interaction smooth, we handle it by streaming the response. For this, we define a generator.\n+\n+```py\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+We stream the response by displaying each chunk as it is received.\n+\n+```py\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+```\n+\n+Given a list of messages, we display them on the screen:\n+\n+```py\n+@sl.component\n+def Page():\n+    with sl.lab.ChatBox():\n+        for item in messages.value:\n+            with sl.lab.ChatMessage(\n+                user=item[\"role\"] == \"user\",\n+                name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+            ):\n+                sl.Markdown(item[\"content\"])\n+```\n+\n+The following step is to retrieve the input from the user and store it in the list of messages. For this, we will use `ChatInput` from `solara`\n+\n+```py\n+        def send(user_message):\n+            messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+        sl.lab.ChatInput(send_callback=send)\n+```\n+\n+We need to handle a streamed response. Therefore we create a task which will be activated by a change on the number of user messages.\n+```py\n+        user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+        def response(messages):\n+            messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+            for chunk in response_generator(messages):\n+                add_chunk_to_ai_message(chunk)\n+        def result():\n+            if messages.value != []:\n+                response(messages)\n+        result = sl.lab.use_task(result, dependencies=[user_message_count])\n+```\n+\n+That's it! An interface where you can chat with Mistral's models. I added some optional styling below.\n+\n+To run this code, enter `solara run chat.py` in the console.\n+\n+<details>\n+<summary><b>chat.py</b></summary>\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key=mistral_api_key)\n+\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+    def send(user_message):\n+        messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+    def response(messages):\n+        messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+        for chunk in response_generator(messages.value[:-1]):\n+            add_chunk_to_ai_message(chunk)\n+    def result():\n+        if messages.value != []:\n+            response(messages)\n+    result = sl.lab.use_task(result, dependencies=[user_message_count])\n+    with sl.Column(align=\"center\"):\n+        with sl.lab.ChatBox(style={\"position\": \"fixed\", \"overflow-y\": \"scroll\",\"scrollbar-width\": \"none\", \"-ms-overflow-style\": \"none\", \"top\": \"0\", \"bottom\": \"10rem\", \"width\": \"60%\"}):\n+            for item in messages.value:\n+                with sl.lab.ChatMessage(\n+                    user=item[\"role\"] == \"user\",\n+                    name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+                ):\n+                    sl.Markdown(item[\"content\"])\n+        sl.lab.ChatInput(send_callback=send, style={\"position\": \"fixed\", \"bottom\": \"3rem\", \"width\": \"70%\"})\n+```\n+\n+</details>\n+\n+## Chatting with PDFs\n+\n+To enable our model to read PDFs, we need to convert the content, extract the text, and then use Mistral's embedding model to retrieve chunks of our document(s) to feed to the model. We need to implement some basic RAG (Retrieval-Augmented Generation)!\n+\n+For this task, we require `faiss` and `PyPDF2`. Let's import them:\n+```py\n+pip install PyPDF2 faiss\n+```\n+\n+**For CPU only please install faiss-cpu instead.**\n+\n+This demo uses `PyPDF2===3.0.1` and `faiss-cpu===1.8.0`\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+```\n+\n+Now, we need to add the possibility to upload PDF files. For this, let's use `FileDropMultiple` from `solara`. The PDFs will then be stored in a new reactive variable:\n+\n+```py\n+from solara.components.file_drop import FileInfo\n+\n+content, set_content = sl.use_state(cast(List[bytes], []))\n+\n+def on_file(files: List[FileInfo]):\n+    set_content([file[\"file_obj\"].read() for file in files])\n+\n+sl.FileDropMultiple(\n+    label=\"Drag and drop your PDF file(s) here.\",\n+    on_file=on_file,\n+    lazy=True,\n+)\n+```\n+\n+The PDFs are stored, but as they are, we just have a large amount of bytes. To be able to chat with the PDF, we will need to extract the text:\n+```py\n+txt = sl.use_reactive(cast(List[str], []))\n+\n+def get_text():\n+    txt_all = []\n+    for _content in content:\n+        bytes_io = io.BytesIO(_content)\n+        reader = PyPDF2.PdfReader(bytes_io)\n+        txt_aux = \"\"\n+        for page in reader.pages:\n+            txt_aux += page.extract_text()\n+        txt_all.append(txt_aux)\n+    return txt_all\n+\n+if content:\n+    sl.Info(\"File(s) has been uploaded. Showing the beginning of the file(s)...\")\n+    result: Task[List[str]] = use_task(get_text, dependencies=[content])\n+    if result.finished:\n+        txt.value = result.value\n+    sl.ProgressLinear(result.pending)\n+    for text in txt.value:\n+        sl.Markdown(f\"{text[:100]}\")\n+```\n+\n+Now that we have the texts, let's use Mistral's embeddings to retrieve the relevant chunks. First, let's define a function that converts text to embeddings with Mistral:\n+\n+```py\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+```\n+\n+Next, we can declare a function that will handle all the retrieval part. This step will make use of `faiss` for the vector store and the previously created `get_text_embedding function`. This will cut the different files into chunks, create the embeddings, and retrieve the best 4 chunks among them, which will then be concatenated into a single string:\n+\n+```py\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+```\n+\n+Finally, we edit `response_generator` to implement our new RAG with the files! This function, when there are PDFs, will extract the text with PyPDF2 and make use of `rag_pdf` to retrieve the relevant data. It will only then send the request to the model:\n+\n+```py\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\",\n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+And everything is done! Now we can run our new interface with `solara run chat_with_pdfs.py`\n+\n+<details>\n+<summary><b>chat_with_pdfs.py</b></summary>\n+\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+from solara.components.file_drop import FileInfo\n+from solara.lab import use_task, Task\n+from typing import List, cast\n+from typing_extensions import TypedDict\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\", \n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    with sl.Sidebar():\n+        content, set_content = sl.use_state(cast(List[bytes], []))\n+        filename, set_filename = sl.use_state(cast(List[str], []))\n+        txt = sl.use_reactive(cast(List[str], []))\n+\n+        def on_file(files: List[FileInfo]):\n+            set_filename([file[\"name\"] for file in files])\n+            set_content([file[\"file_obj\"].read() for file in files])\n+\n+        def get_text():\n+            txt_all = []\n+            for _content in content:\n+                bytes_io = io.BytesIO(_content)\n+                reader = PyPDF2.PdfReader(bytes_io)\n+                txt_aux = \"\"\n+                for page in reader.pages:\n+                    txt_aux += page.extract_text()\n+                txt_all.append(txt_aux)\n+            return txt_all",
        "path": "third_party/solara/README.md",
        "commit_id": "441fd7ce5505c9016b5fc6c5544cb5f02c680e85",
        "original_commit_id": "31a9695363a8bbb0b566b148af79c4d57880ae75",
        "user": {
          "login": "maartenbreddels",
          "id": 1765949,
          "node_id": "MDQ6VXNlcjE3NjU5NDk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1765949?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/maartenbreddels",
          "html_url": "https://github.com/maartenbreddels",
          "followers_url": "https://api.github.com/users/maartenbreddels/followers",
          "following_url": "https://api.github.com/users/maartenbreddels/following{/other_user}",
          "gists_url": "https://api.github.com/users/maartenbreddels/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/maartenbreddels/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/maartenbreddels/subscriptions",
          "organizations_url": "https://api.github.com/users/maartenbreddels/orgs",
          "repos_url": "https://api.github.com/users/maartenbreddels/repos",
          "events_url": "https://api.github.com/users/maartenbreddels/events{/privacy}",
          "received_events_url": "https://api.github.com/users/maartenbreddels/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "```suggestion\r\n        @solara.task\r\n        def get_text(pdf_content):\r\n            txt_all = []\r\n            for _content in pdf_content:\r\n                bytes_io = io.BytesIO(_content)\r\n                reader = PyPDF2.PdfReader(bytes_io)\r\n                txt_aux = \"\"\r\n                for page in reader.pages:\r\n                    txt_aux += page.extract_text()\r\n                txt_all.append(txt_aux)\r\n            return txt_all\r\n```\r\nI would create a top level task, and call that directly from `on_file`. That reduces complexity instead of executing the task indirectly via the content state, which is not used anymore.",
        "created_at": "2024-08-01T10:20:40Z",
        "updated_at": "2024-08-01T10:34:02Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699905709",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/72",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699905709"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699905709"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/72"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699905709/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 1,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": 349,
        "start_side": "RIGHT",
        "line": null,
        "original_line": 358,
        "side": "RIGHT",
        "original_position": 358,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699907015",
        "pull_request_review_id": 2212332935,
        "id": 1699907015,
        "node_id": "PRRC_kwDOLBF5j85lUoXH",
        "diff_hunk": "@@ -0,0 +1,399 @@\n+# Chat with Your PDF using Mistral and Solara\n+\n+*Author: Alonso Silva Allende (Nokia Bell Labs), GitHub handle: [alonsosilvaallende](https://github.com/alonsosilvaallende/)*\n+\n+In this guide, we introduce the basics of building a chatbot with chat and PDF reading capabilities using `solara`\n+\n+## Chat Interface\n+\n+Let's implement a simple chat interface. To do this, we need to import `solara` and `mistralai` libraries.\n+\n+```shell\n+pip install solara mistralai\n+```\n+\n+*This demo uses `solara===1.35.1` and `mistralai===0.4.2`*\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+```\n+\n+Create your `MistralClient` instance using your Mistral API key.\n+\n+```py\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+```\n+\n+Let's initialize a reactive variable where all messages will be stored.\n+\n+```py\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+```\n+\n+Given a list of messages (for the moment empty but not for long), we query Mistral and retrieve the response. To make the interaction smooth, we handle it by streaming the response. For this, we define a generator.\n+\n+```py\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+We stream the response by displaying each chunk as it is received.\n+\n+```py\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+```\n+\n+Given a list of messages, we display them on the screen:\n+\n+```py\n+@sl.component\n+def Page():\n+    with sl.lab.ChatBox():\n+        for item in messages.value:\n+            with sl.lab.ChatMessage(\n+                user=item[\"role\"] == \"user\",\n+                name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+            ):\n+                sl.Markdown(item[\"content\"])\n+```\n+\n+The following step is to retrieve the input from the user and store it in the list of messages. For this, we will use `ChatInput` from `solara`\n+\n+```py\n+        def send(user_message):\n+            messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+        sl.lab.ChatInput(send_callback=send)\n+```\n+\n+We need to handle a streamed response. Therefore we create a task which will be activated by a change on the number of user messages.\n+```py\n+        user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+        def response(messages):\n+            messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+            for chunk in response_generator(messages):\n+                add_chunk_to_ai_message(chunk)\n+        def result():\n+            if messages.value != []:\n+                response(messages)\n+        result = sl.lab.use_task(result, dependencies=[user_message_count])\n+```\n+\n+That's it! An interface where you can chat with Mistral's models. I added some optional styling below.\n+\n+To run this code, enter `solara run chat.py` in the console.\n+\n+<details>\n+<summary><b>chat.py</b></summary>\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key=mistral_api_key)\n+\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+    def send(user_message):\n+        messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+    def response(messages):\n+        messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+        for chunk in response_generator(messages.value[:-1]):\n+            add_chunk_to_ai_message(chunk)\n+    def result():\n+        if messages.value != []:\n+            response(messages)\n+    result = sl.lab.use_task(result, dependencies=[user_message_count])\n+    with sl.Column(align=\"center\"):\n+        with sl.lab.ChatBox(style={\"position\": \"fixed\", \"overflow-y\": \"scroll\",\"scrollbar-width\": \"none\", \"-ms-overflow-style\": \"none\", \"top\": \"0\", \"bottom\": \"10rem\", \"width\": \"60%\"}):\n+            for item in messages.value:\n+                with sl.lab.ChatMessage(\n+                    user=item[\"role\"] == \"user\",\n+                    name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+                ):\n+                    sl.Markdown(item[\"content\"])\n+        sl.lab.ChatInput(send_callback=send, style={\"position\": \"fixed\", \"bottom\": \"3rem\", \"width\": \"70%\"})\n+```\n+\n+</details>\n+\n+## Chatting with PDFs\n+\n+To enable our model to read PDFs, we need to convert the content, extract the text, and then use Mistral's embedding model to retrieve chunks of our document(s) to feed to the model. We need to implement some basic RAG (Retrieval-Augmented Generation)!\n+\n+For this task, we require `faiss` and `PyPDF2`. Let's import them:\n+```py\n+pip install PyPDF2 faiss\n+```\n+\n+**For CPU only please install faiss-cpu instead.**\n+\n+This demo uses `PyPDF2===3.0.1` and `faiss-cpu===1.8.0`\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+```\n+\n+Now, we need to add the possibility to upload PDF files. For this, let's use `FileDropMultiple` from `solara`. The PDFs will then be stored in a new reactive variable:\n+\n+```py\n+from solara.components.file_drop import FileInfo\n+\n+content, set_content = sl.use_state(cast(List[bytes], []))\n+\n+def on_file(files: List[FileInfo]):\n+    set_content([file[\"file_obj\"].read() for file in files])\n+\n+sl.FileDropMultiple(\n+    label=\"Drag and drop your PDF file(s) here.\",\n+    on_file=on_file,\n+    lazy=True,\n+)\n+```\n+\n+The PDFs are stored, but as they are, we just have a large amount of bytes. To be able to chat with the PDF, we will need to extract the text:\n+```py\n+txt = sl.use_reactive(cast(List[str], []))\n+\n+def get_text():\n+    txt_all = []\n+    for _content in content:\n+        bytes_io = io.BytesIO(_content)\n+        reader = PyPDF2.PdfReader(bytes_io)\n+        txt_aux = \"\"\n+        for page in reader.pages:\n+            txt_aux += page.extract_text()\n+        txt_all.append(txt_aux)\n+    return txt_all\n+\n+if content:\n+    sl.Info(\"File(s) has been uploaded. Showing the beginning of the file(s)...\")\n+    result: Task[List[str]] = use_task(get_text, dependencies=[content])\n+    if result.finished:\n+        txt.value = result.value\n+    sl.ProgressLinear(result.pending)\n+    for text in txt.value:\n+        sl.Markdown(f\"{text[:100]}\")\n+```\n+\n+Now that we have the texts, let's use Mistral's embeddings to retrieve the relevant chunks. First, let's define a function that converts text to embeddings with Mistral:\n+\n+```py\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+```\n+\n+Next, we can declare a function that will handle all the retrieval part. This step will make use of `faiss` for the vector store and the previously created `get_text_embedding function`. This will cut the different files into chunks, create the embeddings, and retrieve the best 4 chunks among them, which will then be concatenated into a single string:\n+\n+```py\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+```\n+\n+Finally, we edit `response_generator` to implement our new RAG with the files! This function, when there are PDFs, will extract the text with PyPDF2 and make use of `rag_pdf` to retrieve the relevant data. It will only then send the request to the model:\n+\n+```py\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\",\n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+And everything is done! Now we can run our new interface with `solara run chat_with_pdfs.py`\n+\n+<details>\n+<summary><b>chat_with_pdfs.py</b></summary>\n+\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+from solara.components.file_drop import FileInfo\n+from solara.lab import use_task, Task\n+from typing import List, cast\n+from typing_extensions import TypedDict\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\", \n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    with sl.Sidebar():\n+        content, set_content = sl.use_state(cast(List[bytes], []))\n+        filename, set_filename = sl.use_state(cast(List[str], []))\n+        txt = sl.use_reactive(cast(List[str], []))\n+\n+        def on_file(files: List[FileInfo]):\n+            set_filename([file[\"name\"] for file in files])\n+            set_content([file[\"file_obj\"].read() for file in files])",
        "path": "third_party/solara/README.md",
        "commit_id": "441fd7ce5505c9016b5fc6c5544cb5f02c680e85",
        "original_commit_id": "31a9695363a8bbb0b566b148af79c4d57880ae75",
        "user": {
          "login": "maartenbreddels",
          "id": 1765949,
          "node_id": "MDQ6VXNlcjE3NjU5NDk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1765949?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/maartenbreddels",
          "html_url": "https://github.com/maartenbreddels",
          "followers_url": "https://api.github.com/users/maartenbreddels/followers",
          "following_url": "https://api.github.com/users/maartenbreddels/following{/other_user}",
          "gists_url": "https://api.github.com/users/maartenbreddels/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/maartenbreddels/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/maartenbreddels/subscriptions",
          "organizations_url": "https://api.github.com/users/maartenbreddels/orgs",
          "repos_url": "https://api.github.com/users/maartenbreddels/repos",
          "events_url": "https://api.github.com/users/maartenbreddels/events{/privacy}",
          "received_events_url": "https://api.github.com/users/maartenbreddels/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "```suggestion\r\n        def on_file(files: List[FileInfo]):\r\n            get_text([file[\"data\"] for file in files])\r\n```",
        "created_at": "2024-08-01T10:21:45Z",
        "updated_at": "2024-08-01T10:34:02Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699907015",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/72",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699907015"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699907015"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/72"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699907015/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": 345,
        "start_side": "RIGHT",
        "line": null,
        "original_line": 347,
        "side": "RIGHT",
        "original_position": 347,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699917237",
        "pull_request_review_id": 2212332935,
        "id": 1699917237,
        "node_id": "PRRC_kwDOLBF5j85lUq21",
        "diff_hunk": "@@ -0,0 +1,399 @@\n+# Chat with Your PDF using Mistral and Solara\n+\n+*Author: Alonso Silva Allende (Nokia Bell Labs), GitHub handle: [alonsosilvaallende](https://github.com/alonsosilvaallende/)*\n+\n+In this guide, we introduce the basics of building a chatbot with chat and PDF reading capabilities using `solara`\n+\n+## Chat Interface\n+\n+Let's implement a simple chat interface. To do this, we need to import `solara` and `mistralai` libraries.\n+\n+```shell\n+pip install solara mistralai\n+```\n+\n+*This demo uses `solara===1.35.1` and `mistralai===0.4.2`*\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+```\n+\n+Create your `MistralClient` instance using your Mistral API key.\n+\n+```py\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+```\n+\n+Let's initialize a reactive variable where all messages will be stored.\n+\n+```py\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+```\n+\n+Given a list of messages (for the moment empty but not for long), we query Mistral and retrieve the response. To make the interaction smooth, we handle it by streaming the response. For this, we define a generator.\n+\n+```py\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+We stream the response by displaying each chunk as it is received.\n+\n+```py\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+```\n+\n+Given a list of messages, we display them on the screen:\n+\n+```py\n+@sl.component\n+def Page():\n+    with sl.lab.ChatBox():\n+        for item in messages.value:\n+            with sl.lab.ChatMessage(\n+                user=item[\"role\"] == \"user\",\n+                name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+            ):\n+                sl.Markdown(item[\"content\"])\n+```\n+\n+The following step is to retrieve the input from the user and store it in the list of messages. For this, we will use `ChatInput` from `solara`\n+\n+```py\n+        def send(user_message):\n+            messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+        sl.lab.ChatInput(send_callback=send)\n+```\n+\n+We need to handle a streamed response. Therefore we create a task which will be activated by a change on the number of user messages.\n+```py\n+        user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+        def response(messages):\n+            messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+            for chunk in response_generator(messages):\n+                add_chunk_to_ai_message(chunk)\n+        def result():\n+            if messages.value != []:\n+                response(messages)\n+        result = sl.lab.use_task(result, dependencies=[user_message_count])\n+```\n+\n+That's it! An interface where you can chat with Mistral's models. I added some optional styling below.\n+\n+To run this code, enter `solara run chat.py` in the console.\n+\n+<details>\n+<summary><b>chat.py</b></summary>\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key=mistral_api_key)\n+\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+    def send(user_message):\n+        messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+    def response(messages):\n+        messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+        for chunk in response_generator(messages.value[:-1]):\n+            add_chunk_to_ai_message(chunk)\n+    def result():\n+        if messages.value != []:\n+            response(messages)\n+    result = sl.lab.use_task(result, dependencies=[user_message_count])\n+    with sl.Column(align=\"center\"):\n+        with sl.lab.ChatBox(style={\"position\": \"fixed\", \"overflow-y\": \"scroll\",\"scrollbar-width\": \"none\", \"-ms-overflow-style\": \"none\", \"top\": \"0\", \"bottom\": \"10rem\", \"width\": \"60%\"}):\n+            for item in messages.value:\n+                with sl.lab.ChatMessage(\n+                    user=item[\"role\"] == \"user\",\n+                    name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+                ):\n+                    sl.Markdown(item[\"content\"])\n+        sl.lab.ChatInput(send_callback=send, style={\"position\": \"fixed\", \"bottom\": \"3rem\", \"width\": \"70%\"})\n+```\n+\n+</details>\n+\n+## Chatting with PDFs\n+\n+To enable our model to read PDFs, we need to convert the content, extract the text, and then use Mistral's embedding model to retrieve chunks of our document(s) to feed to the model. We need to implement some basic RAG (Retrieval-Augmented Generation)!\n+\n+For this task, we require `faiss` and `PyPDF2`. Let's import them:\n+```py\n+pip install PyPDF2 faiss\n+```\n+\n+**For CPU only please install faiss-cpu instead.**\n+\n+This demo uses `PyPDF2===3.0.1` and `faiss-cpu===1.8.0`\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+```\n+\n+Now, we need to add the possibility to upload PDF files. For this, let's use `FileDropMultiple` from `solara`. The PDFs will then be stored in a new reactive variable:\n+\n+```py\n+from solara.components.file_drop import FileInfo\n+\n+content, set_content = sl.use_state(cast(List[bytes], []))\n+\n+def on_file(files: List[FileInfo]):\n+    set_content([file[\"file_obj\"].read() for file in files])\n+\n+sl.FileDropMultiple(\n+    label=\"Drag and drop your PDF file(s) here.\",\n+    on_file=on_file,\n+    lazy=True,\n+)\n+```\n+\n+The PDFs are stored, but as they are, we just have a large amount of bytes. To be able to chat with the PDF, we will need to extract the text:\n+```py\n+txt = sl.use_reactive(cast(List[str], []))\n+\n+def get_text():\n+    txt_all = []\n+    for _content in content:\n+        bytes_io = io.BytesIO(_content)\n+        reader = PyPDF2.PdfReader(bytes_io)\n+        txt_aux = \"\"\n+        for page in reader.pages:\n+            txt_aux += page.extract_text()\n+        txt_all.append(txt_aux)\n+    return txt_all\n+\n+if content:\n+    sl.Info(\"File(s) has been uploaded. Showing the beginning of the file(s)...\")\n+    result: Task[List[str]] = use_task(get_text, dependencies=[content])\n+    if result.finished:\n+        txt.value = result.value\n+    sl.ProgressLinear(result.pending)\n+    for text in txt.value:\n+        sl.Markdown(f\"{text[:100]}\")\n+```\n+\n+Now that we have the texts, let's use Mistral's embeddings to retrieve the relevant chunks. First, let's define a function that converts text to embeddings with Mistral:\n+\n+```py\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+```\n+\n+Next, we can declare a function that will handle all the retrieval part. This step will make use of `faiss` for the vector store and the previously created `get_text_embedding function`. This will cut the different files into chunks, create the embeddings, and retrieve the best 4 chunks among them, which will then be concatenated into a single string:\n+\n+```py\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+```\n+\n+Finally, we edit `response_generator` to implement our new RAG with the files! This function, when there are PDFs, will extract the text with PyPDF2 and make use of `rag_pdf` to retrieve the relevant data. It will only then send the request to the model:\n+\n+```py\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\",\n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+And everything is done! Now we can run our new interface with `solara run chat_with_pdfs.py`\n+\n+<details>\n+<summary><b>chat_with_pdfs.py</b></summary>\n+\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+from solara.components.file_drop import FileInfo\n+from solara.lab import use_task, Task\n+from typing import List, cast\n+from typing_extensions import TypedDict\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\", \n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    with sl.Sidebar():\n+        content, set_content = sl.use_state(cast(List[bytes], []))\n+        filename, set_filename = sl.use_state(cast(List[str], []))\n+        txt = sl.use_reactive(cast(List[str], []))\n+\n+        def on_file(files: List[FileInfo]):\n+            set_filename([file[\"name\"] for file in files])\n+            set_content([file[\"file_obj\"].read() for file in files])\n+\n+        def get_text():\n+            txt_all = []\n+            for _content in content:\n+                bytes_io = io.BytesIO(_content)\n+                reader = PyPDF2.PdfReader(bytes_io)\n+                txt_aux = \"\"\n+                for page in reader.pages:\n+                    txt_aux += page.extract_text()\n+                txt_all.append(txt_aux)\n+            return txt_all\n+\n+\n+        sl.FileDropMultiple(\n+            label=\"Drag and drop your PDF file(s) here.\",\n+            on_file=on_file,\n+            lazy=True,\n+        )\n+\n+        if content:\n+            sl.Info(\"File(s) has been uploaded. Showing the beginning of the file(s)...\")\n+            result: Task[List[str]] = use_task(get_text, dependencies=[content])\n+            if result.finished:\n+                txt.value = result.value\n+            sl.ProgressLinear(result.pending)\n+            for text in txt.value:\n+                sl.Markdown(f\"{text[:100]}\")",
        "path": "third_party/solara/README.md",
        "commit_id": "441fd7ce5505c9016b5fc6c5544cb5f02c680e85",
        "original_commit_id": "31a9695363a8bbb0b566b148af79c4d57880ae75",
        "user": {
          "login": "maartenbreddels",
          "id": 1765949,
          "node_id": "MDQ6VXNlcjE3NjU5NDk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1765949?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/maartenbreddels",
          "html_url": "https://github.com/maartenbreddels",
          "followers_url": "https://api.github.com/users/maartenbreddels/followers",
          "following_url": "https://api.github.com/users/maartenbreddels/following{/other_user}",
          "gists_url": "https://api.github.com/users/maartenbreddels/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/maartenbreddels/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/maartenbreddels/subscriptions",
          "organizations_url": "https://api.github.com/users/maartenbreddels/orgs",
          "repos_url": "https://api.github.com/users/maartenbreddels/repos",
          "events_url": "https://api.github.com/users/maartenbreddels/events{/privacy}",
          "received_events_url": "https://api.github.com/users/maartenbreddels/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "```suggestion\r\n        if content:\r\n            sl.Info(\"File(s) has been uploaded. Showing the beginning of the file(s)...\")\r\n            result: Task[List[str]] = use_task(get_text, dependencies=[content])\r\n            if result.finished:\r\n                txt.value = result.value\r\n            sl.ProgressLinear(result.pending)\r\n            for text in txt.value:\r\n                sl.Markdown(f\"{text[:100]}\")\r\n```\r\n```suggestion\r\n        sl.ProgressLinear(get_text.pending)\r\n        if get_text.value:\r\n            sl.Info(\"File(s) has been uploaded. Showing the beginning of the file(s)...\")\r\n            for text in get_text.value:\r\n                sl.Markdown(f\"{text[:100]}\")\r\n```",
        "created_at": "2024-08-01T10:29:31Z",
        "updated_at": "2024-08-01T10:34:02Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699917237",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/72",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699917237"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699917237"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/72"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699917237/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": 367,
        "start_side": "RIGHT",
        "line": null,
        "original_line": 374,
        "side": "RIGHT",
        "original_position": 374,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699917966",
        "pull_request_review_id": 2212332935,
        "id": 1699917966,
        "node_id": "PRRC_kwDOLBF5j85lUrCO",
        "diff_hunk": "@@ -0,0 +1,399 @@\n+# Chat with Your PDF using Mistral and Solara\n+\n+*Author: Alonso Silva Allende (Nokia Bell Labs), GitHub handle: [alonsosilvaallende](https://github.com/alonsosilvaallende/)*\n+\n+In this guide, we introduce the basics of building a chatbot with chat and PDF reading capabilities using `solara`\n+\n+## Chat Interface\n+\n+Let's implement a simple chat interface. To do this, we need to import `solara` and `mistralai` libraries.\n+\n+```shell\n+pip install solara mistralai\n+```\n+\n+*This demo uses `solara===1.35.1` and `mistralai===0.4.2`*\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+```\n+\n+Create your `MistralClient` instance using your Mistral API key.\n+\n+```py\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+```\n+\n+Let's initialize a reactive variable where all messages will be stored.\n+\n+```py\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+```\n+\n+Given a list of messages (for the moment empty but not for long), we query Mistral and retrieve the response. To make the interaction smooth, we handle it by streaming the response. For this, we define a generator.\n+\n+```py\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+We stream the response by displaying each chunk as it is received.\n+\n+```py\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+```\n+\n+Given a list of messages, we display them on the screen:\n+\n+```py\n+@sl.component\n+def Page():\n+    with sl.lab.ChatBox():\n+        for item in messages.value:\n+            with sl.lab.ChatMessage(\n+                user=item[\"role\"] == \"user\",\n+                name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+            ):\n+                sl.Markdown(item[\"content\"])\n+```\n+\n+The following step is to retrieve the input from the user and store it in the list of messages. For this, we will use `ChatInput` from `solara`\n+\n+```py\n+        def send(user_message):\n+            messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+        sl.lab.ChatInput(send_callback=send)\n+```\n+\n+We need to handle a streamed response. Therefore we create a task which will be activated by a change on the number of user messages.\n+```py\n+        user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+        def response(messages):\n+            messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+            for chunk in response_generator(messages):\n+                add_chunk_to_ai_message(chunk)\n+        def result():\n+            if messages.value != []:\n+                response(messages)\n+        result = sl.lab.use_task(result, dependencies=[user_message_count])\n+```\n+\n+That's it! An interface where you can chat with Mistral's models. I added some optional styling below.\n+\n+To run this code, enter `solara run chat.py` in the console.\n+\n+<details>\n+<summary><b>chat.py</b></summary>\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key=mistral_api_key)\n+\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+    def send(user_message):\n+        messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+    def response(messages):\n+        messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+        for chunk in response_generator(messages.value[:-1]):\n+            add_chunk_to_ai_message(chunk)\n+    def result():\n+        if messages.value != []:\n+            response(messages)\n+    result = sl.lab.use_task(result, dependencies=[user_message_count])\n+    with sl.Column(align=\"center\"):\n+        with sl.lab.ChatBox(style={\"position\": \"fixed\", \"overflow-y\": \"scroll\",\"scrollbar-width\": \"none\", \"-ms-overflow-style\": \"none\", \"top\": \"0\", \"bottom\": \"10rem\", \"width\": \"60%\"}):\n+            for item in messages.value:\n+                with sl.lab.ChatMessage(\n+                    user=item[\"role\"] == \"user\",\n+                    name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+                ):\n+                    sl.Markdown(item[\"content\"])\n+        sl.lab.ChatInput(send_callback=send, style={\"position\": \"fixed\", \"bottom\": \"3rem\", \"width\": \"70%\"})\n+```\n+\n+</details>\n+\n+## Chatting with PDFs\n+\n+To enable our model to read PDFs, we need to convert the content, extract the text, and then use Mistral's embedding model to retrieve chunks of our document(s) to feed to the model. We need to implement some basic RAG (Retrieval-Augmented Generation)!\n+\n+For this task, we require `faiss` and `PyPDF2`. Let's import them:\n+```py\n+pip install PyPDF2 faiss\n+```\n+\n+**For CPU only please install faiss-cpu instead.**\n+\n+This demo uses `PyPDF2===3.0.1` and `faiss-cpu===1.8.0`\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+```\n+\n+Now, we need to add the possibility to upload PDF files. For this, let's use `FileDropMultiple` from `solara`. The PDFs will then be stored in a new reactive variable:\n+\n+```py\n+from solara.components.file_drop import FileInfo\n+\n+content, set_content = sl.use_state(cast(List[bytes], []))\n+\n+def on_file(files: List[FileInfo]):\n+    set_content([file[\"file_obj\"].read() for file in files])\n+\n+sl.FileDropMultiple(\n+    label=\"Drag and drop your PDF file(s) here.\",\n+    on_file=on_file,\n+    lazy=True,\n+)\n+```\n+\n+The PDFs are stored, but as they are, we just have a large amount of bytes. To be able to chat with the PDF, we will need to extract the text:\n+```py\n+txt = sl.use_reactive(cast(List[str], []))\n+\n+def get_text():\n+    txt_all = []\n+    for _content in content:\n+        bytes_io = io.BytesIO(_content)\n+        reader = PyPDF2.PdfReader(bytes_io)\n+        txt_aux = \"\"\n+        for page in reader.pages:\n+            txt_aux += page.extract_text()\n+        txt_all.append(txt_aux)\n+    return txt_all\n+\n+if content:\n+    sl.Info(\"File(s) has been uploaded. Showing the beginning of the file(s)...\")\n+    result: Task[List[str]] = use_task(get_text, dependencies=[content])\n+    if result.finished:\n+        txt.value = result.value\n+    sl.ProgressLinear(result.pending)\n+    for text in txt.value:\n+        sl.Markdown(f\"{text[:100]}\")\n+```\n+\n+Now that we have the texts, let's use Mistral's embeddings to retrieve the relevant chunks. First, let's define a function that converts text to embeddings with Mistral:\n+\n+```py\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+```\n+\n+Next, we can declare a function that will handle all the retrieval part. This step will make use of `faiss` for the vector store and the previously created `get_text_embedding function`. This will cut the different files into chunks, create the embeddings, and retrieve the best 4 chunks among them, which will then be concatenated into a single string:\n+\n+```py\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+```\n+\n+Finally, we edit `response_generator` to implement our new RAG with the files! This function, when there are PDFs, will extract the text with PyPDF2 and make use of `rag_pdf` to retrieve the relevant data. It will only then send the request to the model:\n+\n+```py\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\",\n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+And everything is done! Now we can run our new interface with `solara run chat_with_pdfs.py`\n+\n+<details>\n+<summary><b>chat_with_pdfs.py</b></summary>\n+\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+from solara.components.file_drop import FileInfo\n+from solara.lab import use_task, Task\n+from typing import List, cast\n+from typing_extensions import TypedDict\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\", \n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    with sl.Sidebar():\n+        content, set_content = sl.use_state(cast(List[bytes], []))\n+        filename, set_filename = sl.use_state(cast(List[str], []))\n+        txt = sl.use_reactive(cast(List[str], []))",
        "path": "third_party/solara/README.md",
        "commit_id": "441fd7ce5505c9016b5fc6c5544cb5f02c680e85",
        "original_commit_id": "31a9695363a8bbb0b566b148af79c4d57880ae75",
        "user": {
          "login": "maartenbreddels",
          "id": 1765949,
          "node_id": "MDQ6VXNlcjE3NjU5NDk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1765949?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/maartenbreddels",
          "html_url": "https://github.com/maartenbreddels",
          "followers_url": "https://api.github.com/users/maartenbreddels/followers",
          "following_url": "https://api.github.com/users/maartenbreddels/following{/other_user}",
          "gists_url": "https://api.github.com/users/maartenbreddels/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/maartenbreddels/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/maartenbreddels/subscriptions",
          "organizations_url": "https://api.github.com/users/maartenbreddels/orgs",
          "repos_url": "https://api.github.com/users/maartenbreddels/repos",
          "events_url": "https://api.github.com/users/maartenbreddels/events{/privacy}",
          "received_events_url": "https://api.github.com/users/maartenbreddels/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "```suggestion\r\n```\r\nNo need for an extra reactive variable, the less state the better, we can use the get_txt.value now",
        "created_at": "2024-08-01T10:30:13Z",
        "updated_at": "2024-08-01T10:34:02Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699917966",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/72",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699917966"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699917966"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/72"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699917966/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 1,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 343,
        "side": "RIGHT",
        "original_position": 343,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699919265",
        "pull_request_review_id": 2212332935,
        "id": 1699919265,
        "node_id": "PRRC_kwDOLBF5j85lUrWh",
        "diff_hunk": "@@ -0,0 +1,399 @@\n+# Chat with Your PDF using Mistral and Solara\n+\n+*Author: Alonso Silva Allende (Nokia Bell Labs), GitHub handle: [alonsosilvaallende](https://github.com/alonsosilvaallende/)*\n+\n+In this guide, we introduce the basics of building a chatbot with chat and PDF reading capabilities using `solara`\n+\n+## Chat Interface\n+\n+Let's implement a simple chat interface. To do this, we need to import `solara` and `mistralai` libraries.\n+\n+```shell\n+pip install solara mistralai\n+```\n+\n+*This demo uses `solara===1.35.1` and `mistralai===0.4.2`*\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+```\n+\n+Create your `MistralClient` instance using your Mistral API key.\n+\n+```py\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+```\n+\n+Let's initialize a reactive variable where all messages will be stored.\n+\n+```py\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+```\n+\n+Given a list of messages (for the moment empty but not for long), we query Mistral and retrieve the response. To make the interaction smooth, we handle it by streaming the response. For this, we define a generator.\n+\n+```py\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+We stream the response by displaying each chunk as it is received.\n+\n+```py\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+```\n+\n+Given a list of messages, we display them on the screen:\n+\n+```py\n+@sl.component\n+def Page():\n+    with sl.lab.ChatBox():\n+        for item in messages.value:\n+            with sl.lab.ChatMessage(\n+                user=item[\"role\"] == \"user\",\n+                name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+            ):\n+                sl.Markdown(item[\"content\"])\n+```\n+\n+The following step is to retrieve the input from the user and store it in the list of messages. For this, we will use `ChatInput` from `solara`\n+\n+```py\n+        def send(user_message):\n+            messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+        sl.lab.ChatInput(send_callback=send)\n+```\n+\n+We need to handle a streamed response. Therefore we create a task which will be activated by a change on the number of user messages.\n+```py\n+        user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+        def response(messages):\n+            messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+            for chunk in response_generator(messages):\n+                add_chunk_to_ai_message(chunk)\n+        def result():\n+            if messages.value != []:\n+                response(messages)\n+        result = sl.lab.use_task(result, dependencies=[user_message_count])\n+```\n+\n+That's it! An interface where you can chat with Mistral's models. I added some optional styling below.\n+\n+To run this code, enter `solara run chat.py` in the console.\n+\n+<details>\n+<summary><b>chat.py</b></summary>\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key=mistral_api_key)\n+\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+    def send(user_message):\n+        messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+    def response(messages):\n+        messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+        for chunk in response_generator(messages.value[:-1]):\n+            add_chunk_to_ai_message(chunk)\n+    def result():\n+        if messages.value != []:\n+            response(messages)\n+    result = sl.lab.use_task(result, dependencies=[user_message_count])\n+    with sl.Column(align=\"center\"):\n+        with sl.lab.ChatBox(style={\"position\": \"fixed\", \"overflow-y\": \"scroll\",\"scrollbar-width\": \"none\", \"-ms-overflow-style\": \"none\", \"top\": \"0\", \"bottom\": \"10rem\", \"width\": \"60%\"}):\n+            for item in messages.value:\n+                with sl.lab.ChatMessage(\n+                    user=item[\"role\"] == \"user\",\n+                    name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+                ):\n+                    sl.Markdown(item[\"content\"])\n+        sl.lab.ChatInput(send_callback=send, style={\"position\": \"fixed\", \"bottom\": \"3rem\", \"width\": \"70%\"})\n+```\n+\n+</details>\n+\n+## Chatting with PDFs\n+\n+To enable our model to read PDFs, we need to convert the content, extract the text, and then use Mistral's embedding model to retrieve chunks of our document(s) to feed to the model. We need to implement some basic RAG (Retrieval-Augmented Generation)!\n+\n+For this task, we require `faiss` and `PyPDF2`. Let's import them:\n+```py\n+pip install PyPDF2 faiss\n+```\n+\n+**For CPU only please install faiss-cpu instead.**\n+\n+This demo uses `PyPDF2===3.0.1` and `faiss-cpu===1.8.0`\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+```\n+\n+Now, we need to add the possibility to upload PDF files. For this, let's use `FileDropMultiple` from `solara`. The PDFs will then be stored in a new reactive variable:\n+\n+```py\n+from solara.components.file_drop import FileInfo\n+\n+content, set_content = sl.use_state(cast(List[bytes], []))\n+\n+def on_file(files: List[FileInfo]):\n+    set_content([file[\"file_obj\"].read() for file in files])\n+\n+sl.FileDropMultiple(\n+    label=\"Drag and drop your PDF file(s) here.\",\n+    on_file=on_file,\n+    lazy=True,\n+)\n+```\n+\n+The PDFs are stored, but as they are, we just have a large amount of bytes. To be able to chat with the PDF, we will need to extract the text:\n+```py\n+txt = sl.use_reactive(cast(List[str], []))\n+\n+def get_text():\n+    txt_all = []\n+    for _content in content:\n+        bytes_io = io.BytesIO(_content)\n+        reader = PyPDF2.PdfReader(bytes_io)\n+        txt_aux = \"\"\n+        for page in reader.pages:\n+            txt_aux += page.extract_text()\n+        txt_all.append(txt_aux)\n+    return txt_all\n+\n+if content:\n+    sl.Info(\"File(s) has been uploaded. Showing the beginning of the file(s)...\")\n+    result: Task[List[str]] = use_task(get_text, dependencies=[content])\n+    if result.finished:\n+        txt.value = result.value\n+    sl.ProgressLinear(result.pending)\n+    for text in txt.value:\n+        sl.Markdown(f\"{text[:100]}\")\n+```\n+\n+Now that we have the texts, let's use Mistral's embeddings to retrieve the relevant chunks. First, let's define a function that converts text to embeddings with Mistral:\n+\n+```py\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+```\n+\n+Next, we can declare a function that will handle all the retrieval part. This step will make use of `faiss` for the vector store and the previously created `get_text_embedding function`. This will cut the different files into chunks, create the embeddings, and retrieve the best 4 chunks among them, which will then be concatenated into a single string:\n+\n+```py\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+```\n+\n+Finally, we edit `response_generator` to implement our new RAG with the files! This function, when there are PDFs, will extract the text with PyPDF2 and make use of `rag_pdf` to retrieve the relevant data. It will only then send the request to the model:\n+\n+```py\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\",\n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+And everything is done! Now we can run our new interface with `solara run chat_with_pdfs.py`\n+\n+<details>\n+<summary><b>chat_with_pdfs.py</b></summary>\n+\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+from solara.components.file_drop import FileInfo\n+from solara.lab import use_task, Task\n+from typing import List, cast\n+from typing_extensions import TypedDict\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\", \n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    with sl.Sidebar():\n+        content, set_content = sl.use_state(cast(List[bytes], []))",
        "path": "third_party/solara/README.md",
        "commit_id": "441fd7ce5505c9016b5fc6c5544cb5f02c680e85",
        "original_commit_id": "31a9695363a8bbb0b566b148af79c4d57880ae75",
        "user": {
          "login": "maartenbreddels",
          "id": 1765949,
          "node_id": "MDQ6VXNlcjE3NjU5NDk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1765949?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/maartenbreddels",
          "html_url": "https://github.com/maartenbreddels",
          "followers_url": "https://api.github.com/users/maartenbreddels/followers",
          "following_url": "https://api.github.com/users/maartenbreddels/following{/other_user}",
          "gists_url": "https://api.github.com/users/maartenbreddels/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/maartenbreddels/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/maartenbreddels/subscriptions",
          "organizations_url": "https://api.github.com/users/maartenbreddels/orgs",
          "repos_url": "https://api.github.com/users/maartenbreddels/repos",
          "events_url": "https://api.github.com/users/maartenbreddels/events{/privacy}",
          "received_events_url": "https://api.github.com/users/maartenbreddels/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "```suggestion\r\n```\r\nNot needed anymore, with the get_text task.\r\nAlso, I would not mix use_state and use_reactive, I would simply use one (I prefer use_reactive), it will only confuse new users I think.",
        "created_at": "2024-08-01T10:31:20Z",
        "updated_at": "2024-08-01T10:34:02Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699919265",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/72",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699919265"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699919265"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/72"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699919265/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 341,
        "side": "RIGHT",
        "original_position": 341,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699921808",
        "pull_request_review_id": 2212332935,
        "id": 1699921808,
        "node_id": "PRRC_kwDOLBF5j85lUr-Q",
        "diff_hunk": "@@ -0,0 +1,399 @@\n+# Chat with Your PDF using Mistral and Solara\n+\n+*Author: Alonso Silva Allende (Nokia Bell Labs), GitHub handle: [alonsosilvaallende](https://github.com/alonsosilvaallende/)*\n+\n+In this guide, we introduce the basics of building a chatbot with chat and PDF reading capabilities using `solara`\n+\n+## Chat Interface\n+\n+Let's implement a simple chat interface. To do this, we need to import `solara` and `mistralai` libraries.\n+\n+```shell\n+pip install solara mistralai\n+```\n+\n+*This demo uses `solara===1.35.1` and `mistralai===0.4.2`*\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+```\n+\n+Create your `MistralClient` instance using your Mistral API key.\n+\n+```py\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+```\n+\n+Let's initialize a reactive variable where all messages will be stored.\n+\n+```py\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+```\n+\n+Given a list of messages (for the moment empty but not for long), we query Mistral and retrieve the response. To make the interaction smooth, we handle it by streaming the response. For this, we define a generator.\n+\n+```py\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+We stream the response by displaying each chunk as it is received.\n+\n+```py\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+```\n+\n+Given a list of messages, we display them on the screen:\n+\n+```py\n+@sl.component\n+def Page():\n+    with sl.lab.ChatBox():\n+        for item in messages.value:\n+            with sl.lab.ChatMessage(\n+                user=item[\"role\"] == \"user\",\n+                name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+            ):\n+                sl.Markdown(item[\"content\"])\n+```\n+\n+The following step is to retrieve the input from the user and store it in the list of messages. For this, we will use `ChatInput` from `solara`\n+\n+```py\n+        def send(user_message):\n+            messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+        sl.lab.ChatInput(send_callback=send)\n+```\n+\n+We need to handle a streamed response. Therefore we create a task which will be activated by a change on the number of user messages.\n+```py\n+        user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+        def response(messages):\n+            messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+            for chunk in response_generator(messages):\n+                add_chunk_to_ai_message(chunk)\n+        def result():\n+            if messages.value != []:\n+                response(messages)\n+        result = sl.lab.use_task(result, dependencies=[user_message_count])\n+```\n+\n+That's it! An interface where you can chat with Mistral's models. I added some optional styling below.\n+\n+To run this code, enter `solara run chat.py` in the console.\n+\n+<details>\n+<summary><b>chat.py</b></summary>\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key=mistral_api_key)\n+\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+    def send(user_message):\n+        messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+    def response(messages):\n+        messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+        for chunk in response_generator(messages.value[:-1]):\n+            add_chunk_to_ai_message(chunk)\n+    def result():\n+        if messages.value != []:\n+            response(messages)\n+    result = sl.lab.use_task(result, dependencies=[user_message_count])\n+    with sl.Column(align=\"center\"):\n+        with sl.lab.ChatBox(style={\"position\": \"fixed\", \"overflow-y\": \"scroll\",\"scrollbar-width\": \"none\", \"-ms-overflow-style\": \"none\", \"top\": \"0\", \"bottom\": \"10rem\", \"width\": \"60%\"}):\n+            for item in messages.value:\n+                with sl.lab.ChatMessage(\n+                    user=item[\"role\"] == \"user\",\n+                    name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+                ):\n+                    sl.Markdown(item[\"content\"])\n+        sl.lab.ChatInput(send_callback=send, style={\"position\": \"fixed\", \"bottom\": \"3rem\", \"width\": \"70%\"})\n+```\n+\n+</details>\n+\n+## Chatting with PDFs\n+\n+To enable our model to read PDFs, we need to convert the content, extract the text, and then use Mistral's embedding model to retrieve chunks of our document(s) to feed to the model. We need to implement some basic RAG (Retrieval-Augmented Generation)!\n+\n+For this task, we require `faiss` and `PyPDF2`. Let's import them:\n+```py\n+pip install PyPDF2 faiss\n+```\n+\n+**For CPU only please install faiss-cpu instead.**\n+\n+This demo uses `PyPDF2===3.0.1` and `faiss-cpu===1.8.0`\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+```\n+\n+Now, we need to add the possibility to upload PDF files. For this, let's use `FileDropMultiple` from `solara`. The PDFs will then be stored in a new reactive variable:\n+\n+```py\n+from solara.components.file_drop import FileInfo\n+\n+content, set_content = sl.use_state(cast(List[bytes], []))\n+\n+def on_file(files: List[FileInfo]):\n+    set_content([file[\"file_obj\"].read() for file in files])\n+\n+sl.FileDropMultiple(\n+    label=\"Drag and drop your PDF file(s) here.\",\n+    on_file=on_file,\n+    lazy=True,\n+)\n+```\n+\n+The PDFs are stored, but as they are, we just have a large amount of bytes. To be able to chat with the PDF, we will need to extract the text:\n+```py\n+txt = sl.use_reactive(cast(List[str], []))\n+\n+def get_text():\n+    txt_all = []\n+    for _content in content:\n+        bytes_io = io.BytesIO(_content)\n+        reader = PyPDF2.PdfReader(bytes_io)\n+        txt_aux = \"\"\n+        for page in reader.pages:\n+            txt_aux += page.extract_text()\n+        txt_all.append(txt_aux)\n+    return txt_all\n+\n+if content:\n+    sl.Info(\"File(s) has been uploaded. Showing the beginning of the file(s)...\")\n+    result: Task[List[str]] = use_task(get_text, dependencies=[content])\n+    if result.finished:\n+        txt.value = result.value\n+    sl.ProgressLinear(result.pending)\n+    for text in txt.value:\n+        sl.Markdown(f\"{text[:100]}\")\n+```\n+\n+Now that we have the texts, let's use Mistral's embeddings to retrieve the relevant chunks. First, let's define a function that converts text to embeddings with Mistral:\n+\n+```py\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+```\n+\n+Next, we can declare a function that will handle all the retrieval part. This step will make use of `faiss` for the vector store and the previously created `get_text_embedding function`. This will cut the different files into chunks, create the embeddings, and retrieve the best 4 chunks among them, which will then be concatenated into a single string:\n+\n+```py\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+```\n+\n+Finally, we edit `response_generator` to implement our new RAG with the files! This function, when there are PDFs, will extract the text with PyPDF2 and make use of `rag_pdf` to retrieve the relevant data. It will only then send the request to the model:\n+\n+```py\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\",\n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+And everything is done! Now we can run our new interface with `solara run chat_with_pdfs.py`\n+\n+<details>\n+<summary><b>chat_with_pdfs.py</b></summary>\n+\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+from solara.components.file_drop import FileInfo\n+from solara.lab import use_task, Task\n+from typing import List, cast\n+from typing_extensions import TypedDict\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\", \n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    with sl.Sidebar():\n+        content, set_content = sl.use_state(cast(List[bytes], []))\n+        filename, set_filename = sl.use_state(cast(List[str], []))\n+        txt = sl.use_reactive(cast(List[str], []))\n+\n+        def on_file(files: List[FileInfo]):\n+            set_filename([file[\"name\"] for file in files])\n+            set_content([file[\"file_obj\"].read() for file in files])\n+\n+        def get_text():\n+            txt_all = []\n+            for _content in content:\n+                bytes_io = io.BytesIO(_content)\n+                reader = PyPDF2.PdfReader(bytes_io)\n+                txt_aux = \"\"\n+                for page in reader.pages:\n+                    txt_aux += page.extract_text()\n+                txt_all.append(txt_aux)\n+            return txt_all\n+\n+\n+        sl.FileDropMultiple(\n+            label=\"Drag and drop your PDF file(s) here.\",\n+            on_file=on_file,\n+            lazy=True,\n+        )\n+\n+        if content:\n+            sl.Info(\"File(s) has been uploaded. Showing the beginning of the file(s)...\")\n+            result: Task[List[str]] = use_task(get_text, dependencies=[content])\n+            if result.finished:\n+                txt.value = result.value\n+            sl.ProgressLinear(result.pending)\n+            for text in txt.value:\n+                sl.Markdown(f\"{text[:100]}\")",
        "path": "third_party/solara/README.md",
        "commit_id": "441fd7ce5505c9016b5fc6c5544cb5f02c680e85",
        "original_commit_id": "31a9695363a8bbb0b566b148af79c4d57880ae75",
        "user": {
          "login": "maartenbreddels",
          "id": 1765949,
          "node_id": "MDQ6VXNlcjE3NjU5NDk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1765949?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/maartenbreddels",
          "html_url": "https://github.com/maartenbreddels",
          "followers_url": "https://api.github.com/users/maartenbreddels/followers",
          "following_url": "https://api.github.com/users/maartenbreddels/following{/other_user}",
          "gists_url": "https://api.github.com/users/maartenbreddels/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/maartenbreddels/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/maartenbreddels/subscriptions",
          "organizations_url": "https://api.github.com/users/maartenbreddels/orgs",
          "repos_url": "https://api.github.com/users/maartenbreddels/repos",
          "events_url": "https://api.github.com/users/maartenbreddels/events{/privacy}",
          "received_events_url": "https://api.github.com/users/maartenbreddels/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "The conditional hook is now allowed; using a top-level task can avoid this.",
        "created_at": "2024-08-01T10:33:33Z",
        "updated_at": "2024-08-01T10:34:02Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699921808",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/72",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699921808"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/72#discussion_r1699921808"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/72"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1699921808/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 1,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": 367,
        "start_side": "RIGHT",
        "line": null,
        "original_line": 374,
        "side": "RIGHT",
        "in_reply_to_id": 1699917237,
        "original_position": 374,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1700240363",
        "pull_request_review_id": 2212905873,
        "id": 1700240363,
        "node_id": "PRRC_kwDOLBF5j85lV5vr",
        "diff_hunk": "@@ -0,0 +1,399 @@\n+# Chat with Your PDF using Mistral and Solara\n+\n+*Author: Alonso Silva Allende (Nokia Bell Labs), GitHub handle: [alonsosilvaallende](https://github.com/alonsosilvaallende/)*\n+\n+In this guide, we introduce the basics of building a chatbot with chat and PDF reading capabilities using `solara`\n+\n+## Chat Interface\n+\n+Let's implement a simple chat interface. To do this, we need to import `solara` and `mistralai` libraries.\n+\n+```shell\n+pip install solara mistralai\n+```\n+\n+*This demo uses `solara===1.35.1` and `mistralai===0.4.2`*\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+```\n+\n+Create your `MistralClient` instance using your Mistral API key.\n+\n+```py\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+```\n+\n+Let's initialize a reactive variable where all messages will be stored.\n+\n+```py\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+```\n+\n+Given a list of messages (for the moment empty but not for long), we query Mistral and retrieve the response. To make the interaction smooth, we handle it by streaming the response. For this, we define a generator.\n+\n+```py\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+We stream the response by displaying each chunk as it is received.\n+\n+```py\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+```\n+\n+Given a list of messages, we display them on the screen:\n+\n+```py\n+@sl.component\n+def Page():\n+    with sl.lab.ChatBox():\n+        for item in messages.value:\n+            with sl.lab.ChatMessage(\n+                user=item[\"role\"] == \"user\",\n+                name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+            ):\n+                sl.Markdown(item[\"content\"])\n+```\n+\n+The following step is to retrieve the input from the user and store it in the list of messages. For this, we will use `ChatInput` from `solara`\n+\n+```py\n+        def send(user_message):\n+            messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+        sl.lab.ChatInput(send_callback=send)\n+```\n+\n+We need to handle a streamed response. Therefore we create a task which will be activated by a change on the number of user messages.\n+```py\n+        user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+        def response(messages):\n+            messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+            for chunk in response_generator(messages):\n+                add_chunk_to_ai_message(chunk)\n+        def result():\n+            if messages.value != []:\n+                response(messages)\n+        result = sl.lab.use_task(result, dependencies=[user_message_count])\n+```\n+\n+That's it! An interface where you can chat with Mistral's models. I added some optional styling below.\n+\n+To run this code, enter `solara run chat.py` in the console.\n+\n+<details>\n+<summary><b>chat.py</b></summary>\n+\n+```py\n+import solara as sl\n+from mistralai.client import MistralClient\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key=mistral_api_key)\n+\n+from typing import List\n+from typing_extensions import TypedDict\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages):\n+    response = client.chat_stream(model = \"open-mistral-7b\", messages = messages, max_tokens = 1024)\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    user_message_count = len([m for m in messages.value if m[\"role\"] == \"user\"])\n+    def send(user_message):\n+        messages.value = [*messages.value, {\"role\": \"user\", \"content\": user_message}]\n+    def response(messages):\n+        messages.value = [*messages.value, {\"role\": \"assistant\", \"content\": \"\"}]\n+        for chunk in response_generator(messages.value[:-1]):\n+            add_chunk_to_ai_message(chunk)\n+    def result():\n+        if messages.value != []:\n+            response(messages)\n+    result = sl.lab.use_task(result, dependencies=[user_message_count])\n+    with sl.Column(align=\"center\"):\n+        with sl.lab.ChatBox(style={\"position\": \"fixed\", \"overflow-y\": \"scroll\",\"scrollbar-width\": \"none\", \"-ms-overflow-style\": \"none\", \"top\": \"0\", \"bottom\": \"10rem\", \"width\": \"60%\"}):\n+            for item in messages.value:\n+                with sl.lab.ChatMessage(\n+                    user=item[\"role\"] == \"user\",\n+                    name=\"User\" if item[\"role\"] == \"user\" else \"Assistant\"\n+                ):\n+                    sl.Markdown(item[\"content\"])\n+        sl.lab.ChatInput(send_callback=send, style={\"position\": \"fixed\", \"bottom\": \"3rem\", \"width\": \"70%\"})\n+```\n+\n+</details>\n+\n+## Chatting with PDFs\n+\n+To enable our model to read PDFs, we need to convert the content, extract the text, and then use Mistral's embedding model to retrieve chunks of our document(s) to feed to the model. We need to implement some basic RAG (Retrieval-Augmented Generation)!\n+\n+For this task, we require `faiss` and `PyPDF2`. Let's import them:\n+```py\n+pip install PyPDF2 faiss\n+```\n+\n+**For CPU only please install faiss-cpu instead.**\n+\n+This demo uses `PyPDF2===3.0.1` and `faiss-cpu===1.8.0`\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+```\n+\n+Now, we need to add the possibility to upload PDF files. For this, let's use `FileDropMultiple` from `solara`. The PDFs will then be stored in a new reactive variable:\n+\n+```py\n+from solara.components.file_drop import FileInfo\n+\n+content, set_content = sl.use_state(cast(List[bytes], []))\n+\n+def on_file(files: List[FileInfo]):\n+    set_content([file[\"file_obj\"].read() for file in files])\n+\n+sl.FileDropMultiple(\n+    label=\"Drag and drop your PDF file(s) here.\",\n+    on_file=on_file,\n+    lazy=True,\n+)\n+```\n+\n+The PDFs are stored, but as they are, we just have a large amount of bytes. To be able to chat with the PDF, we will need to extract the text:\n+```py\n+txt = sl.use_reactive(cast(List[str], []))\n+\n+def get_text():\n+    txt_all = []\n+    for _content in content:\n+        bytes_io = io.BytesIO(_content)\n+        reader = PyPDF2.PdfReader(bytes_io)\n+        txt_aux = \"\"\n+        for page in reader.pages:\n+            txt_aux += page.extract_text()\n+        txt_all.append(txt_aux)\n+    return txt_all\n+\n+if content:\n+    sl.Info(\"File(s) has been uploaded. Showing the beginning of the file(s)...\")\n+    result: Task[List[str]] = use_task(get_text, dependencies=[content])\n+    if result.finished:\n+        txt.value = result.value\n+    sl.ProgressLinear(result.pending)\n+    for text in txt.value:\n+        sl.Markdown(f\"{text[:100]}\")\n+```\n+\n+Now that we have the texts, let's use Mistral's embeddings to retrieve the relevant chunks. First, let's define a function that converts text to embeddings with Mistral:\n+\n+```py\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+```\n+\n+Next, we can declare a function that will handle all the retrieval part. This step will make use of `faiss` for the vector store and the previously created `get_text_embedding function`. This will cut the different files into chunks, create the embeddings, and retrieve the best 4 chunks among them, which will then be concatenated into a single string:\n+\n+```py\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+```\n+\n+Finally, we edit `response_generator` to implement our new RAG with the files! This function, when there are PDFs, will extract the text with PyPDF2 and make use of `rag_pdf` to retrieve the relevant data. It will only then send the request to the model:\n+\n+```py\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\",\n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+```\n+\n+And everything is done! Now we can run our new interface with `solara run chat_with_pdfs.py`\n+\n+<details>\n+<summary><b>chat_with_pdfs.py</b></summary>\n+\n+```py\n+import io\n+import solara as sl\n+from mistralai.client import MistralClient\n+import numpy as np\n+import PyPDF2\n+import faiss\n+from solara.components.file_drop import FileInfo\n+from solara.lab import use_task, Task\n+from typing import List, cast\n+from typing_extensions import TypedDict\n+\n+mistral_api_key = \"your_api_key\"\n+client = MistralClient(api_key = mistral_api_key)\n+\n+def get_text_embedding(input_text: str):\n+    embeddings_batch_response = client.embeddings(\n+          model = \"mistral-embed\",\n+          input = input_text\n+      )\n+    return embeddings_batch_response.data[0].embedding\n+\n+def rag_pdf(txt: List[str], question: str) -> str:\n+    chunk_size = 1024\n+    chunks = []\n+    for _txt in txt:\n+        chunks += [_txt[i:i + chunk_size] for i in range(0, len(_txt), chunk_size)]\n+\n+    text_embeddings = np.array([get_text_embedding(chunk) for chunk in chunks])\n+    d = text_embeddings.shape[1]\n+    index = faiss.IndexFlatL2(d)\n+    index.add(text_embeddings)\n+\n+    question_embeddings = np.array([get_text_embedding(question)])\n+    D, I = index.search(question_embeddings, k = 3)\n+    retrieved_chunk = [chunks[i] for i in I.tolist()[0]]\n+    text_retrieved = \"\\n\\n\".join(retrieved_chunk)\n+    return text_retrieved\n+\n+class MessageDict(TypedDict):\n+    role: str\n+    content: str\n+\n+messages: sl.Reactive[List[MessageDict]] = sl.reactive([])\n+\n+def response_generator(messages: list, txt: List[str]):\n+    response = client.chat_stream(\n+        model = \"open-mistral-7b\", \n+        messages = messages[:-1] + [{\"role\":\"user\",\"content\": rag_pdf(txt, messages[-1][\"content\"]) + \"\\n\\n\" + messages[-1][\"content\"]}],\n+        max_tokens = 1024\n+    )\n+    for chunk in response:\n+        yield chunk.choices[0].delta.content\n+\n+def add_chunk_to_ai_message(chunk: str):\n+    messages.value = [\n+        *messages.value[:-1],\n+        {\n+            \"role\": \"assistant\",\n+            \"content\": messages.value[-1][\"content\"] + chunk,\n+        },\n+    ]\n+\n+@sl.component\n+def Page():\n+    with sl.Sidebar():\n+        content, set_content = sl.use_state(cast(List[bytes], []))\n+        filename, set_filename = sl.use_state(cast(List[str], []))\n+        txt = sl.use_reactive(cast(List[str], []))\n+\n+        def on_file(files: List[FileInfo]):\n+            set_filename([file[\"name\"] for file in files])\n+            set_content([file[\"file_obj\"].read() for file in files])\n+\n+        def get_text():\n+            txt_all = []\n+            for _content in content:\n+                bytes_io = io.BytesIO(_content)\n+                reader = PyPDF2.PdfReader(bytes_io)\n+                txt_aux = \"\"\n+                for page in reader.pages:\n+                    txt_aux += page.extract_text()\n+                txt_all.append(txt_aux)\n+            return txt_all",
        "path": "third_party/solara/README.md",
        "commit_id": "441fd7ce5505c9016b5fc6c5544cb5f02c680e85",
        "original_commit_id": "31a9695363a8bbb0b566b148af79c4d57880ae75",
        "user": {
          "login": "alonsosilvaallende",
          "id": 30263736,
          "node_id": "MDQ6VXNlcjMwMjYzNzM2",
          "avatar_url": "https://avatars.githubusercontent.com/u/30263736?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/alonsosilvaallende",
          "html_url": "https://github.com/alonsosilvaallende",
          "followers_url": "https://api.github.com/users/alonsosilvaallende/followers",
          "following_url": "https://api.github.com/users/alonsosilvaallende/following{/other_user}",
          "gists_url": "https://api.github.com/users/alonsosilvaallende/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/alonsosilvaallende/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/alonsosilvaallende/subscriptions",
          "organizations_url": "https://api.github.com/users/alonsosilvaallende/orgs",
          "repos_url": "https://api.github.com/users/alonsosilvaallende/repos",
          "events_url": "https://api.github.com/users/alonsosilvaallende/events{/privacy}",
          "received_events_url": "https://api.github.com/users/alonsosilvaallende/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "This is very nice. I love this @solara.task",
        "created_at": "2024-08-01T13:54:41Z",
        "updated_at": "2024-08-01T13:54:42Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/72#discussion_r1700240363",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/72",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1700240363"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/72#discussion_r1700240363"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/72"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1700240363/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": 349,
        "start_side": "RIGHT",
        "line": null,
        "original_line": 358,
        "side": "RIGHT",
        "in_reply_to_id": 1699905709,
        "original_position": 358,
        "position": null,
        "subject_type": "line"
      }
    ]
  },
  "69": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2227380249",
        "html_url": "https://github.com/mistralai/cookbook/pull/69#issuecomment-2227380249",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/69",
        "id": 2227380249,
        "node_id": "IC_kwDOLBF5j86EwyAZ",
        "user": {
          "login": "cozypet",
          "id": 7107896,
          "node_id": "MDQ6VXNlcjcxMDc4OTY=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7107896?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cozypet",
          "html_url": "https://github.com/cozypet",
          "followers_url": "https://api.github.com/users/cozypet/followers",
          "following_url": "https://api.github.com/users/cozypet/following{/other_user}",
          "gists_url": "https://api.github.com/users/cozypet/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cozypet/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cozypet/subscriptions",
          "organizations_url": "https://api.github.com/users/cozypet/orgs",
          "repos_url": "https://api.github.com/users/cozypet/repos",
          "events_url": "https://api.github.com/users/cozypet/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cozypet/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-14T15:05:18Z",
        "updated_at": "2024-07-14T15:05:18Z",
        "author_association": "CONTRIBUTOR",
        "body": "@sophiamyang New PR to replace old one",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2227380249/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 1,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2228033995",
        "html_url": "https://github.com/mistralai/cookbook/pull/69#issuecomment-2228033995",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/69",
        "id": 2228033995,
        "node_id": "IC_kwDOLBF5j86EzRnL",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-15T09:10:52Z",
        "updated_at": "2024-07-15T09:10:52Z",
        "author_association": "COLLABORATOR",
        "body": "Merged! Thanks so much for the great work!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2228033995/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "66": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2219906782",
        "html_url": "https://github.com/mistralai/cookbook/pull/66#issuecomment-2219906782",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/66",
        "id": 2219906782,
        "node_id": "IC_kwDOLBF5j86EURbe",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-10T08:38:38Z",
        "updated_at": "2024-07-10T08:38:38Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @tizkovatereza, thanks so much for the PR! There are some conflicts in your PR, could you help resolve? Also, would it be possible for you to ping package versions when installing packages? ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2219906782/reactions",
          "total_count": 2,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 1
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2219948982",
        "html_url": "https://github.com/mistralai/cookbook/pull/66#issuecomment-2219948982",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/66",
        "id": 2219948982,
        "node_id": "IC_kwDOLBF5j86EUbu2",
        "user": {
          "login": "socket-security[bot]",
          "id": 95510084,
          "node_id": "BOT_kgDOBbFeRA",
          "avatar_url": "https://avatars.githubusercontent.com/in/156372?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/socket-security%5Bbot%5D",
          "html_url": "https://github.com/apps/socket-security",
          "followers_url": "https://api.github.com/users/socket-security%5Bbot%5D/followers",
          "following_url": "https://api.github.com/users/socket-security%5Bbot%5D/following{/other_user}",
          "gists_url": "https://api.github.com/users/socket-security%5Bbot%5D/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/socket-security%5Bbot%5D/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/socket-security%5Bbot%5D/subscriptions",
          "organizations_url": "https://api.github.com/users/socket-security%5Bbot%5D/orgs",
          "repos_url": "https://api.github.com/users/socket-security%5Bbot%5D/repos",
          "events_url": "https://api.github.com/users/socket-security%5Bbot%5D/events{/privacy}",
          "received_events_url": "https://api.github.com/users/socket-security%5Bbot%5D/received_events",
          "type": "Bot",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-10T08:59:18Z",
        "updated_at": "2024-07-10T13:16:29Z",
        "author_association": "NONE",
        "body": "<!-- overview-comment -->\n**New dependencies detected.** Learn more about [Socket for GitHub \u2197\ufe0e](https://socket.dev?utm_medium=gh)\n\n\n| Package | New capabilities | Transitives | Size | Publisher |\n|:--- |:--- |:--- |:--- |:--- |\n| [npm/@e2b/code-interpreter@0.0.5](https://socket.dev/npm/package/@e2b/code-interpreter/overview/0.0.5) | <a href=\"https://socket.dev/npm/package/@e2b/code-interpreter/alerts/0.0.5?alert_name=networkAccess\">network</a> Transitive: <a href=\"https://socket.dev/npm/package/@e2b/code-interpreter/alerts/0.0.5?tab=dependencies&alert_name=envVars\">environment</a>, <a href=\"https://socket.dev/npm/package/@e2b/code-interpreter/alerts/0.0.5?tab=dependencies&alert_name=filesystemAccess\">filesystem</a> | <a href=\"https://socket.dev/npm/package/@e2b/code-interpreter/dependencies/0.0.5\">`+10`</a> | 2 MB | <a href=\"https://socket.dev/npm/user/jakbuno\">jakbuno</a> |\n| [npm/@mistralai/mistralai@0.4.0](https://socket.dev/npm/package/@mistralai/mistralai/overview/0.4.0) | Transitive: <a href=\"https://socket.dev/npm/package/@mistralai/mistralai/alerts/0.4.0?tab=dependencies&alert_name=networkAccess\">network</a> | <a href=\"https://socket.dev/npm/package/@mistralai/mistralai/dependencies/0.4.0\">`+4`</a> | 1.79 MB | <a href=\"https://socket.dev/npm/user/bam4d\">bam4d</a> |\n| [npm/@types/node@20.14.0](https://socket.dev/npm/package/@types/node/overview/20.14.0) | None | <a href=\"https://socket.dev/npm/package/@types/node/dependencies/20.14.0\">`+1`</a> | 2.16 MB | <a href=\"https://socket.dev/npm/user/types\">types</a> |\n| [npm/dotenv@16.4.5](https://socket.dev/npm/package/dotenv/overview/16.4.5) | <a href=\"https://socket.dev/npm/package/dotenv/alerts/16.4.5?alert_name=envVars\">environment</a>, <a href=\"https://socket.dev/npm/package/dotenv/alerts/16.4.5?alert_name=filesystemAccess\">filesystem</a> | <a href=\"https://socket.dev/npm/package/dotenv/dependencies/16.4.5\">`0`</a> | 79.1 kB | <a href=\"https://socket.dev/npm/user/motdotla\">motdotla</a> |\n| [npm/esbuild@0.20.2](https://socket.dev/npm/package/esbuild/overview/0.20.2) | <a href=\"https://socket.dev/npm/package/esbuild/alerts/0.20.2?alert_name=envVars\">environment</a>, <a href=\"https://socket.dev/npm/package/esbuild/alerts/0.20.2?alert_name=filesystemAccess\">filesystem</a>, <a href=\"https://socket.dev/npm/package/esbuild/alerts/0.20.2?alert_name=networkAccess\">network</a>, <a href=\"https://socket.dev/npm/package/esbuild/alerts/0.20.2?alert_name=shellAccess\">shell</a> | <a href=\"https://socket.dev/npm/package/esbuild/dependencies/0.20.2\">`+23`</a> | 224 MB | <a href=\"https://socket.dev/npm/user/evanw\">evanw</a> |\n| [npm/globals@15.3.0](https://socket.dev/npm/package/globals/overview/15.3.0) | None | <a href=\"https://socket.dev/npm/package/globals/dependencies/15.3.0\">`0`</a> | 152 kB | <a href=\"https://socket.dev/npm/user/sindresorhus\">sindresorhus</a> |\n| [npm/ts-node@10.9.2](https://socket.dev/npm/package/ts-node/overview/10.9.2) | <a href=\"https://socket.dev/npm/package/ts-node/alerts/10.9.2?alert_name=envVars\">environment</a>, <a href=\"https://socket.dev/npm/package/ts-node/alerts/10.9.2?alert_name=filesystemAccess\">filesystem</a>, <a href=\"https://socket.dev/npm/package/ts-node/alerts/10.9.2?alert_name=\">unsafe</a> | <a href=\"https://socket.dev/npm/package/ts-node/dependencies/10.9.2\">`+16`</a> | 2.03 MB | <a href=\"https://socket.dev/npm/user/blakeembrey\">blakeembrey</a> |\n| [npm/tsx@4.11.2](https://socket.dev/npm/package/tsx/overview/4.11.2) | Transitive: <a href=\"https://socket.dev/npm/package/tsx/alerts/4.11.2?tab=dependencies&alert_name=filesystemAccess\">filesystem</a>, <a href=\"https://socket.dev/npm/package/tsx/alerts/4.11.2?tab=dependencies&alert_name=\">unsafe</a> | <a href=\"https://socket.dev/npm/package/tsx/dependencies/4.11.2\">`+3`</a> | 687 kB | <a href=\"https://socket.dev/npm/user/hirokiosame\">hirokiosame</a> |\n| [npm/typescript-eslint@7.12.0](https://socket.dev/npm/package/typescript-eslint/overview/7.12.0) | Transitive: <a href=\"https://socket.dev/npm/package/typescript-eslint/alerts/7.12.0?tab=dependencies&alert_name=envVars\">environment</a>, <a href=\"https://socket.dev/npm/package/typescript-eslint/alerts/7.12.0?tab=dependencies&alert_name=usesEval\">eval</a>, <a href=\"https://socket.dev/npm/package/typescript-eslint/alerts/7.12.0?tab=dependencies&alert_name=filesystemAccess\">filesystem</a>, <a href=\"https://socket.dev/npm/package/typescript-eslint/alerts/7.12.0?tab=dependencies&alert_name=shellAccess\">shell</a>, <a href=\"https://socket.dev/npm/package/typescript-eslint/alerts/7.12.0?tab=dependencies&alert_name=\">unsafe</a> | <a href=\"https://socket.dev/npm/package/typescript-eslint/dependencies/7.12.0\">`+125`</a> | 17.1 MB | <a href=\"https://socket.dev/npm/user/jameshenry\">jameshenry</a> |\n| [npm/typescript@5.4.5](https://socket.dev/npm/package/typescript/overview/5.4.5) | None | <a href=\"https://socket.dev/npm/package/typescript/dependencies/5.4.5\">`0`</a> | 32.4 MB | <a href=\"https://socket.dev/npm/user/typescript-bot\">typescript-bot</a> |\n| [pypi/e2b-code-interpreter@0.0.10](https://socket.dev/pypi/package/e2b-code-interpreter/overview/0.0.10/tar-gz) | network Transitive: environment, eval, filesystem, shell, unsafe | <a href=\"https://socket.dev/pypi/package/e2b-code-interpreter/dependencies/0.0.10/tar-gz\">`+2`</a> | 5.68 MB | <a href=\"https://socket.dev/pypi/user/e2b\">e2b</a>, <a href=\"https://socket.dev/pypi/user/jcube\">jcube</a>, <a href=\"https://socket.dev/pypi/user/mlejva\">mlejva</a> |\n| [pypi/mistralai@0.4.2](https://socket.dev/pypi/package/mistralai/overview/0.4.2/tar-gz) | environment Transitive: eval, filesystem, network, shell, unsafe | <a href=\"https://socket.dev/pypi/package/mistralai/dependencies/0.4.2/tar-gz\">`+300`</a> | 5.77 GB | <a href=\"https://socket.dev/pypi/user/mistralai\">mistralai</a>, <a href=\"https://socket.dev/pypi/user/patrickvonplaten\">patrickvonplaten</a> |\n\n\n[**View full report\u2197\ufe0e**](https://socket.dev/dashboard/org/mistralai/diff/7420946b-df12-4ce2-9e79-13594ed6b24d/3aea3d91-27e1-4531-b310-4e66de012872)",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2219948982/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 1
        },
        "performed_via_github_app": {
          "id": 156372,
          "client_id": "Iv1.0dc8bfb0ebf2ec17",
          "slug": "socket-security",
          "node_id": "A_kwHOBCHXrM4AAmLU",
          "owner": {
            "login": "SocketDev",
            "id": 69326764,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY5MzI2NzY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/69326764?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SocketDev",
            "html_url": "https://github.com/SocketDev",
            "followers_url": "https://api.github.com/users/SocketDev/followers",
            "following_url": "https://api.github.com/users/SocketDev/following{/other_user}",
            "gists_url": "https://api.github.com/users/SocketDev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SocketDev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SocketDev/subscriptions",
            "organizations_url": "https://api.github.com/users/SocketDev/orgs",
            "repos_url": "https://api.github.com/users/SocketDev/repos",
            "events_url": "https://api.github.com/users/SocketDev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SocketDev/received_events",
            "type": "Organization",
            "user_view_type": "public",
            "site_admin": false
          },
          "name": "Socket Security",
          "description": "### Socket protects your app from malicious dependencies lurking in your open source supply chain.\r\n\r\nOpen source code makes up 90% of most codebases. It is critical to manage it effectively to reduce your security risk.\r\n\r\n## Detect and block open source supply chain attacks\r\n\r\nSecurity teams depend on Socket to prevent malicious open source dependencies from infiltrating their apps.\r\n\r\nSocket dramatically improves your open source security posture by _detecting and blocking the attacks you don't expect_ \u2013 malware, install scripts, hidden code, typo-squatting, and more \u2013 which aren't caught by traditional vulnerability scanners.\r\n\r\n- **Block malware** \u2013 Block emerging malware threats\r\n\r\n- **Block typo-squatting** \u2013 Block malicious packages that differ in name by only a few characters, and recommend the correct package\r\n\r\n- **Detect hidden code** \u2013 Detect obfuscated, minified, or hidden code\r\n\r\n- **Detect privileged API usage** \u2013 Report when a dependency update introduces new risky API usage \u2013 filesystem, network, child_process, eval()\r\n\r\n- **Detect suspicious updates** \u2013 Sudden inclusion of privileged APIs in patch or minor releases\r\n\r\nSocket currently [supports 60 detections](https://socket.dev/npm/issue) in 5 categories: supply chain risk, quality, maintenance, known vulnerabilities, and license problems.\r\n\r\n## Take charge of your dependency health\r\n\r\nSocket improves security outcomes and reduces work for security teams by **surfacing actionable security information directly inline in GitHub** so developers are empowered to make better decisions.\r\n\r\n- **Five minute deployment** \u2013 The easiest security product you'll ever deploy in your organization. Just install a GitHub app and you're done.\r\n\r\n- **Provide security feedback directly on PRs** \u2013 Empower developers to solve security issues before they're deployed into production.\r\n\r\n- **Automated security** \u2013 Spend security team resources auditing the highest-impact dependencies, instead of all or nothing.\r\n\r\n## Socket detects what vulnerability scanners can\u2019t\r\n\r\nIt's no longer sufficient to scan for known vulnerabilities (CVEs) and stop there. And yet, that's what the leading \"supply chain security\" products do, leaving you vulnerable.\r\n\r\nIt can take weeks or months for a CVE to be discovered, reported, and detected by tools. But in today's culture of fast development, a malicious dependency can be updated, merged, and running in production in days or even sometimes hours.\r\n\r\nDefenders need a new approach to address emerging threats from malicious dependencies:\r\n\r\n- **Maintainer intentionally added malware** \u2013 Rogue maintainer sabotaged his own open source package with 100M downloads/month, affecting companies such as Amazon AWS\r\n\r\n- **Package hijacked and poisoned w/ cryptominers and password-stealing malware** \u2013 Deliberate malware introduced into multiple packages with 30M downloads/month each\r\n\r\n- **Package hijacked to add backdoor targeting a specific organization** \u2013 Obfuscated malware added to a dependency which targeted a single company, went undetected for over a week, and made it into their production build\r\n\r\n- **NPM package manager allowed anyone to publish new versions of any package** \u2013 Attackers could publish new versions of any NPM package without authorization _for multiple years_\r\n\r\nUsing third-party dependencies without proper vetting leaves you open to hacking, breaches, and assorted security misfortune.",
          "external_url": "https://socket.dev",
          "html_url": "https://github.com/apps/socket-security",
          "created_at": "2021-12-04T00:33:05Z",
          "updated_at": "2023-03-08T20:20:07Z",
          "permissions": {
            "checks": "write",
            "contents": "read",
            "emails": "read",
            "issues": "read",
            "members": "read",
            "metadata": "read",
            "pull_requests": "write"
          },
          "events": [
            "check_run",
            "check_suite",
            "issue_comment",
            "member",
            "organization",
            "public",
            "pull_request",
            "push",
            "repository"
          ]
        }
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2219949090",
        "html_url": "https://github.com/mistralai/cookbook/pull/66#issuecomment-2219949090",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/66",
        "id": 2219949090,
        "node_id": "IC_kwDOLBF5j86EUbwi",
        "user": {
          "login": "socket-security[bot]",
          "id": 95510084,
          "node_id": "BOT_kgDOBbFeRA",
          "avatar_url": "https://avatars.githubusercontent.com/in/156372?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/socket-security%5Bbot%5D",
          "html_url": "https://github.com/apps/socket-security",
          "followers_url": "https://api.github.com/users/socket-security%5Bbot%5D/followers",
          "following_url": "https://api.github.com/users/socket-security%5Bbot%5D/following{/other_user}",
          "gists_url": "https://api.github.com/users/socket-security%5Bbot%5D/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/socket-security%5Bbot%5D/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/socket-security%5Bbot%5D/subscriptions",
          "organizations_url": "https://api.github.com/users/socket-security%5Bbot%5D/orgs",
          "repos_url": "https://api.github.com/users/socket-security%5Bbot%5D/repos",
          "events_url": "https://api.github.com/users/socket-security%5Bbot%5D/events{/privacy}",
          "received_events_url": "https://api.github.com/users/socket-security%5Bbot%5D/received_events",
          "type": "Bot",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-10T08:59:21Z",
        "updated_at": "2024-07-10T13:16:30Z",
        "author_association": "NONE",
        "body": "**\ud83d\udea8 Potential security issues detected.** Learn more about [Socket for GitHub \u2197\ufe0e](https://socket.dev?utm_medium=gh)\n\nTo accept the risk, merge this PR and you will not be notified again.\n\n<table>\n    <thead>\n      <tr>\n        <th align=\"left\">Alert</th>\n        <th align=\"left\">Package</th>\n        <th align=\"left\">Note</th><th align=\"left\">Source</th><th align=\"left\">CI</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n            <td align=\"left\">\n              <a href=\"https://socket.dev/npm/package/esbuild/alerts/0.20.2?alert_name=installScripts\"> Install scripts </a>\n            </td>\n            <td align=\"left\">\n              <a href=\"https://socket.dev/npm/package/esbuild/overview/0.20.2\"> npm/esbuild@0.20.2 </a>\n            </td>\n            <td align=\"left\">\n                              <ul>\n                                                     <li><strong>Install script:</strong> <a href=\"https://socket.dev/npm/package/esbuild/overview/0.20.2\">postinstall</a></li>\n                                                     <li><strong>Source:</strong> <code>node install.js</code></li>\n                                                   </ul>\n                            </td><td align=\"left\">                   <ul>                                           <li><a href=\"https://github.com/mistralai/cookbook/pull/66/files#diff-a7fd1409ba404ff1d4110e5134d76f9e0f693bb3a7980efaf3fc69252f976405\"><code>third_party/E2B_Code_Interpreting/codestral-code-interpreter-js/package-lock.json</code></a></li>                                           <li><a href=\"https://github.com/mistralai/cookbook/pull/66/files#diff-dbef76ac545681b7b765babfd09a0640a38bd55eb5cec6b6419e277f67d68296\"><code>third_party/E2B_Code_Interpreting/codestral-code-interpreter-js/package.json</code></a></li>                                         </ul>                 </td><td align=\"left\"><span title=\"Warn: Pass CI Check\">\u26a0\ufe0e</span>           </td>\n          </tr>\n    </tbody>\n  </table>\n\n\n[**View full report\u2197\ufe0e**](https://socket.dev/dashboard/org/mistralai/diff/7420946b-df12-4ce2-9e79-13594ed6b24d/3aea3d91-27e1-4531-b310-4e66de012872)\n### Next steps\n\n<details>\n    <summary>\n      <strong> What is an install script? </strong>\n    </summary>\n    <p>Install scripts are run when the package is installed. The majority of malware in npm is hidden in install scripts.</p>\n    <p>Packages should not be running non-essential scripts during install and there are often solutions to problems people solve with install scripts that can be run at publish time instead.</p>\n  </details>\n<details>\n    <summary>\n      <strong> Take a deeper look at the dependency </strong>\n    </summary>\n    <p>\n      Take a moment to review the security alert above. Review the linked\n      package source code to understand the potential risk. Ensure the package\n      is not malicious before proceeding. If you're unsure how to proceed, reach\n      out to your security team or ask the Socket team for help at support [AT]\n      socket [DOT] dev.\n    </p>\n  </details>\n<details>\n    <summary>\n      <strong> Remove the package </strong>\n    </summary>\n    <p>\n      If you happen to install a dependency that Socket reports as <a href=\"https://socket.dev/npm/issue/malware\">Known Malware</a> you should immediately remove it and select a different dependency. For other alert types, you may may wish to investigate alternative packages or consider if there are other ways to mitigate the specific risk posed by the dependency.\n    </p>\n  </details>\n<details>\n<summary>\n<strong>Mark a package as acceptable risk</strong>\n</summary>\n<p>To ignore an alert, reply with a comment starting with <code>@SocketSecurity ignore</code> followed by a space separated list of <code>ecosystem/package-name@version</code> specifiers. e.g. <code>@SocketSecurity ignore npm/foo@1.0.0</code> or ignore all packages with <code>@SocketSecurity ignore-all</code></p>\n<ul>\n<li><code>@SocketSecurity ignore npm/esbuild@0.20.2</code></li>\n</ul>\n\n</details>",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2219949090/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 1
        },
        "performed_via_github_app": {
          "id": 156372,
          "client_id": "Iv1.0dc8bfb0ebf2ec17",
          "slug": "socket-security",
          "node_id": "A_kwHOBCHXrM4AAmLU",
          "owner": {
            "login": "SocketDev",
            "id": 69326764,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjY5MzI2NzY0",
            "avatar_url": "https://avatars.githubusercontent.com/u/69326764?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/SocketDev",
            "html_url": "https://github.com/SocketDev",
            "followers_url": "https://api.github.com/users/SocketDev/followers",
            "following_url": "https://api.github.com/users/SocketDev/following{/other_user}",
            "gists_url": "https://api.github.com/users/SocketDev/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/SocketDev/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/SocketDev/subscriptions",
            "organizations_url": "https://api.github.com/users/SocketDev/orgs",
            "repos_url": "https://api.github.com/users/SocketDev/repos",
            "events_url": "https://api.github.com/users/SocketDev/events{/privacy}",
            "received_events_url": "https://api.github.com/users/SocketDev/received_events",
            "type": "Organization",
            "user_view_type": "public",
            "site_admin": false
          },
          "name": "Socket Security",
          "description": "### Socket protects your app from malicious dependencies lurking in your open source supply chain.\r\n\r\nOpen source code makes up 90% of most codebases. It is critical to manage it effectively to reduce your security risk.\r\n\r\n## Detect and block open source supply chain attacks\r\n\r\nSecurity teams depend on Socket to prevent malicious open source dependencies from infiltrating their apps.\r\n\r\nSocket dramatically improves your open source security posture by _detecting and blocking the attacks you don't expect_ \u2013 malware, install scripts, hidden code, typo-squatting, and more \u2013 which aren't caught by traditional vulnerability scanners.\r\n\r\n- **Block malware** \u2013 Block emerging malware threats\r\n\r\n- **Block typo-squatting** \u2013 Block malicious packages that differ in name by only a few characters, and recommend the correct package\r\n\r\n- **Detect hidden code** \u2013 Detect obfuscated, minified, or hidden code\r\n\r\n- **Detect privileged API usage** \u2013 Report when a dependency update introduces new risky API usage \u2013 filesystem, network, child_process, eval()\r\n\r\n- **Detect suspicious updates** \u2013 Sudden inclusion of privileged APIs in patch or minor releases\r\n\r\nSocket currently [supports 60 detections](https://socket.dev/npm/issue) in 5 categories: supply chain risk, quality, maintenance, known vulnerabilities, and license problems.\r\n\r\n## Take charge of your dependency health\r\n\r\nSocket improves security outcomes and reduces work for security teams by **surfacing actionable security information directly inline in GitHub** so developers are empowered to make better decisions.\r\n\r\n- **Five minute deployment** \u2013 The easiest security product you'll ever deploy in your organization. Just install a GitHub app and you're done.\r\n\r\n- **Provide security feedback directly on PRs** \u2013 Empower developers to solve security issues before they're deployed into production.\r\n\r\n- **Automated security** \u2013 Spend security team resources auditing the highest-impact dependencies, instead of all or nothing.\r\n\r\n## Socket detects what vulnerability scanners can\u2019t\r\n\r\nIt's no longer sufficient to scan for known vulnerabilities (CVEs) and stop there. And yet, that's what the leading \"supply chain security\" products do, leaving you vulnerable.\r\n\r\nIt can take weeks or months for a CVE to be discovered, reported, and detected by tools. But in today's culture of fast development, a malicious dependency can be updated, merged, and running in production in days or even sometimes hours.\r\n\r\nDefenders need a new approach to address emerging threats from malicious dependencies:\r\n\r\n- **Maintainer intentionally added malware** \u2013 Rogue maintainer sabotaged his own open source package with 100M downloads/month, affecting companies such as Amazon AWS\r\n\r\n- **Package hijacked and poisoned w/ cryptominers and password-stealing malware** \u2013 Deliberate malware introduced into multiple packages with 30M downloads/month each\r\n\r\n- **Package hijacked to add backdoor targeting a specific organization** \u2013 Obfuscated malware added to a dependency which targeted a single company, went undetected for over a week, and made it into their production build\r\n\r\n- **NPM package manager allowed anyone to publish new versions of any package** \u2013 Attackers could publish new versions of any NPM package without authorization _for multiple years_\r\n\r\nUsing third-party dependencies without proper vetting leaves you open to hacking, breaches, and assorted security misfortune.",
          "external_url": "https://socket.dev",
          "html_url": "https://github.com/apps/socket-security",
          "created_at": "2021-12-04T00:33:05Z",
          "updated_at": "2023-03-08T20:20:07Z",
          "permissions": {
            "checks": "write",
            "contents": "read",
            "emails": "read",
            "issues": "read",
            "members": "read",
            "metadata": "read",
            "pull_requests": "write"
          },
          "events": [
            "check_run",
            "check_suite",
            "issue_comment",
            "member",
            "organization",
            "public",
            "pull_request",
            "push",
            "repository"
          ]
        }
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2222753954",
        "html_url": "https://github.com/mistralai/cookbook/pull/66#issuecomment-2222753954",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/66",
        "id": 2222753954,
        "node_id": "IC_kwDOLBF5j86EfIii",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-11T12:03:59Z",
        "updated_at": "2024-07-11T12:03:59Z",
        "author_association": "COLLABORATOR",
        "body": "Merged! Thank you so much @tizkovatereza! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2222753954/reactions",
          "total_count": 2,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 1,
          "confused": 0,
          "heart": 1,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "58": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2192380517",
        "html_url": "https://github.com/mistralai/cookbook/pull/58#issuecomment-2192380517",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/58",
        "id": 2192380517,
        "node_id": "IC_kwDOLBF5j86CrRJl",
        "user": {
          "login": "rishiraj",
          "id": 44090649,
          "node_id": "MDQ6VXNlcjQ0MDkwNjQ5",
          "avatar_url": "https://avatars.githubusercontent.com/u/44090649?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rishiraj",
          "html_url": "https://github.com/rishiraj",
          "followers_url": "https://api.github.com/users/rishiraj/followers",
          "following_url": "https://api.github.com/users/rishiraj/following{/other_user}",
          "gists_url": "https://api.github.com/users/rishiraj/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rishiraj/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rishiraj/subscriptions",
          "organizations_url": "https://api.github.com/users/rishiraj/orgs",
          "repos_url": "https://api.github.com/users/rishiraj/repos",
          "events_url": "https://api.github.com/users/rishiraj/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rishiraj/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-26T18:27:10Z",
        "updated_at": "2024-06-26T18:27:10Z",
        "author_association": "CONTRIBUTOR",
        "body": "Maybe sorting in alphabetical order was not wanted so I changed the table order to as it is and just add our examples in the right place.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2192380517/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194057117",
        "html_url": "https://github.com/mistralai/cookbook/pull/58#issuecomment-2194057117",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/58",
        "id": 2194057117,
        "node_id": "IC_kwDOLBF5j86Cxqed",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-27T08:06:56Z",
        "updated_at": "2024-06-27T08:06:56Z",
        "author_association": "COLLABORATOR",
        "body": "Hi, thank you for the PR! Would it be possible to make them notebooks?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194057117/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194191297",
        "html_url": "https://github.com/mistralai/cookbook/pull/58#issuecomment-2194191297",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/58",
        "id": 2194191297,
        "node_id": "IC_kwDOLBF5j86CyLPB",
        "user": {
          "login": "rishiraj",
          "id": 44090649,
          "node_id": "MDQ6VXNlcjQ0MDkwNjQ5",
          "avatar_url": "https://avatars.githubusercontent.com/u/44090649?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rishiraj",
          "html_url": "https://github.com/rishiraj",
          "followers_url": "https://api.github.com/users/rishiraj/followers",
          "following_url": "https://api.github.com/users/rishiraj/following{/other_user}",
          "gists_url": "https://api.github.com/users/rishiraj/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rishiraj/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rishiraj/subscriptions",
          "organizations_url": "https://api.github.com/users/rishiraj/orgs",
          "repos_url": "https://api.github.com/users/rishiraj/repos",
          "events_url": "https://api.github.com/users/rishiraj/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rishiraj/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-27T09:16:58Z",
        "updated_at": "2024-06-27T09:16:58Z",
        "author_association": "CONTRIBUTOR",
        "body": "@pandora-s-git made the requested changes.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194191297/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194406078",
        "html_url": "https://github.com/mistralai/cookbook/pull/58#issuecomment-2194406078",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/58",
        "id": 2194406078,
        "node_id": "IC_kwDOLBF5j86Cy_q-",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-27T11:10:20Z",
        "updated_at": "2024-06-27T11:10:20Z",
        "author_association": "COLLABORATOR",
        "body": "Is it possible to make it run on colab? Thank you in advance.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194406078/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194547350",
        "html_url": "https://github.com/mistralai/cookbook/pull/58#issuecomment-2194547350",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/58",
        "id": 2194547350,
        "node_id": "IC_kwDOLBF5j86CziKW",
        "user": {
          "login": "rishiraj",
          "id": 44090649,
          "node_id": "MDQ6VXNlcjQ0MDkwNjQ5",
          "avatar_url": "https://avatars.githubusercontent.com/u/44090649?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rishiraj",
          "html_url": "https://github.com/rishiraj",
          "followers_url": "https://api.github.com/users/rishiraj/followers",
          "following_url": "https://api.github.com/users/rishiraj/following{/other_user}",
          "gists_url": "https://api.github.com/users/rishiraj/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rishiraj/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rishiraj/subscriptions",
          "organizations_url": "https://api.github.com/users/rishiraj/orgs",
          "repos_url": "https://api.github.com/users/rishiraj/repos",
          "events_url": "https://api.github.com/users/rishiraj/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rishiraj/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-27T12:24:51Z",
        "updated_at": "2024-06-27T12:24:51Z",
        "author_association": "CONTRIBUTOR",
        "body": "@pandora-s-git unfortunately it's not possible to run on colab since this requires a server running on local.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194547350/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194596183",
        "html_url": "https://github.com/mistralai/cookbook/pull/58#issuecomment-2194596183",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/58",
        "id": 2194596183,
        "node_id": "IC_kwDOLBF5j86CzuFX",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-27T12:51:01Z",
        "updated_at": "2024-06-27T12:51:01Z",
        "author_association": "COLLABORATOR",
        "body": "I see! It should be fine, thank you for the cookbook!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194596183/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "57": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2191948226",
        "html_url": "https://github.com/mistralai/cookbook/pull/57#issuecomment-2191948226",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/57",
        "id": 2191948226,
        "node_id": "IC_kwDOLBF5j86CpnnC",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-26T15:06:38Z",
        "updated_at": "2024-06-26T15:06:38Z",
        "author_association": "COLLABORATOR",
        "body": "It looks good, maybe add a few imports and !pip install in the notebook just in case.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2191948226/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2191994626",
        "html_url": "https://github.com/mistralai/cookbook/pull/57#issuecomment-2191994626",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/57",
        "id": 2191994626,
        "node_id": "IC_kwDOLBF5j86Cpy8C",
        "user": {
          "login": "desaxce",
          "id": 6545903,
          "node_id": "MDQ6VXNlcjY1NDU5MDM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6545903?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/desaxce",
          "html_url": "https://github.com/desaxce",
          "followers_url": "https://api.github.com/users/desaxce/followers",
          "following_url": "https://api.github.com/users/desaxce/following{/other_user}",
          "gists_url": "https://api.github.com/users/desaxce/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/desaxce/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/desaxce/subscriptions",
          "organizations_url": "https://api.github.com/users/desaxce/orgs",
          "repos_url": "https://api.github.com/users/desaxce/repos",
          "events_url": "https://api.github.com/users/desaxce/events{/privacy}",
          "received_events_url": "https://api.github.com/users/desaxce/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-26T15:27:07Z",
        "updated_at": "2024-06-26T15:27:07Z",
        "author_association": "CONTRIBUTOR",
        "body": "> It looks good, maybe add a few imports and !pip install in the notebook just in case.\r\n\r\nGood point, I've added a requirements section to the notebook with package installation.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2191994626/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194043826",
        "html_url": "https://github.com/mistralai/cookbook/pull/57#issuecomment-2194043826",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/57",
        "id": 2194043826,
        "node_id": "IC_kwDOLBF5j86CxnOy",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-27T08:00:03Z",
        "updated_at": "2024-06-27T08:00:03Z",
        "author_association": "COLLABORATOR",
        "body": "Nice! Could you add it to the table in the readme?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194043826/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194725014",
        "html_url": "https://github.com/mistralai/cookbook/pull/57#issuecomment-2194725014",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/57",
        "id": 2194725014,
        "node_id": "IC_kwDOLBF5j86C0NiW",
        "user": {
          "login": "desaxce",
          "id": 6545903,
          "node_id": "MDQ6VXNlcjY1NDU5MDM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6545903?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/desaxce",
          "html_url": "https://github.com/desaxce",
          "followers_url": "https://api.github.com/users/desaxce/followers",
          "following_url": "https://api.github.com/users/desaxce/following{/other_user}",
          "gists_url": "https://api.github.com/users/desaxce/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/desaxce/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/desaxce/subscriptions",
          "organizations_url": "https://api.github.com/users/desaxce/orgs",
          "repos_url": "https://api.github.com/users/desaxce/repos",
          "events_url": "https://api.github.com/users/desaxce/events{/privacy}",
          "received_events_url": "https://api.github.com/users/desaxce/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-27T13:42:38Z",
        "updated_at": "2024-06-27T13:42:38Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Nice! Could you add it to the table in the readme?\r\n\r\nAbsolutely! Also sorted the table alphabetically on tool name. Let me know if you had something else in mind.\r\n\r\n<img width=\"648\" alt=\"image\" src=\"https://github.com/mistralai/cookbook/assets/6545903/020eca0f-bef2-4a7a-a66f-2d1ec6f92f22\">\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2194725014/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2195085215",
        "html_url": "https://github.com/mistralai/cookbook/pull/57#issuecomment-2195085215",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/57",
        "id": 2195085215,
        "node_id": "IC_kwDOLBF5j86C1lef",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-27T15:54:58Z",
        "updated_at": "2024-06-27T15:57:08Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @desaxce , thanks so much for contributing to our cookbook! Would it be possible for you to add Mistral to your [docs](https://docs.chainlit.io/get-started/overview#integrations) as well? ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2195085215/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2196122429",
        "html_url": "https://github.com/mistralai/cookbook/pull/57#issuecomment-2196122429",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/57",
        "id": 2196122429,
        "node_id": "IC_kwDOLBF5j86C5is9",
        "user": {
          "login": "desaxce",
          "id": 6545903,
          "node_id": "MDQ6VXNlcjY1NDU5MDM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6545903?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/desaxce",
          "html_url": "https://github.com/desaxce",
          "followers_url": "https://api.github.com/users/desaxce/followers",
          "following_url": "https://api.github.com/users/desaxce/following{/other_user}",
          "gists_url": "https://api.github.com/users/desaxce/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/desaxce/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/desaxce/subscriptions",
          "organizations_url": "https://api.github.com/users/desaxce/orgs",
          "repos_url": "https://api.github.com/users/desaxce/repos",
          "events_url": "https://api.github.com/users/desaxce/events{/privacy}",
          "received_events_url": "https://api.github.com/users/desaxce/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-28T04:34:25Z",
        "updated_at": "2024-06-28T04:34:25Z",
        "author_association": "CONTRIBUTOR",
        "body": "> Hi @desaxce , thanks so much for contributing to our cookbook! Would it be possible for you to add Mistral to your [docs](https://docs.chainlit.io/get-started/overview#integrations) as well?\r\n\r\nNo problem, I just added it - check it at https://docs.chainlit.io/get-started/overview#integrations",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2196122429/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2200162393",
        "html_url": "https://github.com/mistralai/cookbook/pull/57#issuecomment-2200162393",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/57",
        "id": 2200162393,
        "node_id": "IC_kwDOLBF5j86DI9BZ",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-01T13:29:51Z",
        "updated_at": "2024-07-01T13:29:51Z",
        "author_association": "COLLABORATOR",
        "body": "Awesome! Thanks so much! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2200162393/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "52": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160518479",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#issuecomment-2160518479",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/52",
        "id": 2160518479,
        "node_id": "IC_kwDOLBF5j86AxuVP",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-11T11:32:00Z",
        "updated_at": "2024-06-11T11:32:00Z",
        "author_association": "COLLABORATOR",
        "body": "Nice! You can add it to the readme under the mistral section, since this uses mostly our documentation I believe it deserves to be in there and we can merge it!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160518479/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160629994",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#issuecomment-2160629994",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/52",
        "id": 2160629994,
        "node_id": "IC_kwDOLBF5j86AyJjq",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-11T12:24:48Z",
        "updated_at": "2024-06-11T12:24:48Z",
        "author_association": "COLLABORATOR",
        "body": "This should do, thanks for the contribution!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160629994/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634387141",
        "pull_request_review_id": 2109645043,
        "id": 1634387141,
        "node_id": "PRRC_kwDOLBF5j85hasTF",
        "diff_hunk": "@@ -0,0 +1,721 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 81,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/html\": [\n+       \"<details>\\n\",\n+       \"<summary>Click to view session information</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"aiohttp             3.9.5\\n\",\n+       \"bs4                 4.12.3\\n\",\n+       \"dotenv              NA\\n\",\n+       \"faiss               1.8.0\\n\",\n+       \"lxml                5.2.2\\n\",\n+       \"mistralai           NA\\n\",\n+       \"nest_asyncio        NA\\n\",\n+       \"numpy               1.26.4\\n\",\n+       \"pandas              2.2.2\\n\",\n+       \"requests            2.32.3\\n\",\n+       \"session_info        1.0.0\\n\",\n+       \"-----\\n\",\n+       \"</pre>\\n\",\n+       \"<details>\\n\",\n+       \"<summary>Click to view modules imported as dependencies</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"aiosignal           1.3.1\\n\",\n+       \"annotated_types     0.7.0\\n\",\n+       \"anyio               NA\\n\",\n+       \"appnope             0.1.4\\n\",\n+       \"asttokens           NA\\n\",\n+       \"async_timeout       4.0.3\\n\",\n+       \"attr                23.2.0\\n\",\n+       \"certifi             2024.06.02\\n\",\n+       \"charset_normalizer  3.3.2\\n\",\n+       \"comm                0.2.2\\n\",\n+       \"cython_runtime      NA\\n\",\n+       \"dateutil            2.9.0\\n\",\n+       \"debugpy             1.6.7\\n\",\n+       \"decorator           5.1.1\\n\",\n+       \"exceptiongroup      1.2.0\\n\",\n+       \"executing           2.0.1\\n\",\n+       \"frozenlist          1.4.1\\n\",\n+       \"h11                 0.14.0\\n\",\n+       \"httpcore            1.0.5\\n\",\n+       \"httpx               0.25.2\\n\",\n+       \"idna                3.7\\n\",\n+       \"ipykernel           6.29.4\\n\",\n+       \"jedi                0.19.1\\n\",\n+       \"multidict           6.0.5\\n\",\n+       \"orjson              3.10.4\\n\",\n+       \"packaging           24.0\\n\",\n+       \"parso               0.8.4\\n\",\n+       \"pickleshare         0.7.5\\n\",\n+       \"pkg_resources       NA\\n\",\n+       \"platformdirs        4.2.2\\n\",\n+       \"prompt_toolkit      3.0.47\\n\",\n+       \"psutil              5.9.0\\n\",\n+       \"pure_eval           0.2.2\\n\",\n+       \"pydantic            2.7.3\\n\",\n+       \"pydantic_core       2.18.4\\n\",\n+       \"pydev_ipython       NA\\n\",\n+       \"pydevconsole        NA\\n\",\n+       \"pydevd              2.9.5\\n\",\n+       \"pydevd_file_utils   NA\\n\",\n+       \"pydevd_plugins      NA\\n\",\n+       \"pydevd_tracing      NA\\n\",\n+       \"pygments            2.18.0\\n\",\n+       \"pytz                2024.1\\n\",\n+       \"six                 1.16.0\\n\",\n+       \"sniffio             1.3.1\\n\",\n+       \"soupsieve           2.5\\n\",\n+       \"stack_data          0.6.2\\n\",\n+       \"swig_runtime_data4  NA\\n\",\n+       \"tornado             6.3.3\\n\",\n+       \"traitlets           5.14.3\\n\",\n+       \"typing_extensions   NA\\n\",\n+       \"urllib3             2.2.1\\n\",\n+       \"vscode              NA\\n\",\n+       \"wcwidth             0.2.13\\n\",\n+       \"yarl                1.9.4\\n\",\n+       \"zmq                 25.1.2\\n\",\n+       \"zoneinfo            NA\\n\",\n+       \"</pre>\\n\",\n+       \"</details> <!-- seems like this ends pre, so might as well be explicit -->\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"IPython             8.25.0\\n\",\n+       \"jupyter_client      8.6.2\\n\",\n+       \"jupyter_core        5.5.0\\n\",\n+       \"-----\\n\",\n+       \"Python 3.10.14 (main, May  6 2024, 14:42:37) [Clang 14.0.6 ]\\n\",\n+       \"macOS-14.4-arm64-arm-64bit\\n\",\n+       \"-----\\n\",\n+       \"Session information updated at 2024-06-11 03:48\\n\",\n+       \"</pre>\\n\",\n+       \"</details>\"\n+      ],\n+      \"text/plain\": [\n+       \"<IPython.core.display.HTML object>\"\n+      ]\n+     },\n+     \"execution_count\": 81,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"import session_info\\n\",",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "eea83eeb46b69049e026f1766362c52f63d2f5fc",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "!pip install session_info is maybe missing?",
        "created_at": "2024-06-11T08:01:13Z",
        "updated_at": "2024-06-11T08:01:14Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634387141",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634387141"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634387141"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634387141/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 120,
        "side": "RIGHT",
        "original_position": 120,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634390613",
        "pull_request_review_id": 2109650590,
        "id": 1634390613,
        "node_id": "PRRC_kwDOLBF5j85hatJV",
        "diff_hunk": "@@ -0,0 +1,721 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 81,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/html\": [\n+       \"<details>\\n\",\n+       \"<summary>Click to view session information</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"aiohttp             3.9.5\\n\",\n+       \"bs4                 4.12.3\\n\",\n+       \"dotenv              NA\\n\",\n+       \"faiss               1.8.0\\n\",\n+       \"lxml                5.2.2\\n\",\n+       \"mistralai           NA\\n\",\n+       \"nest_asyncio        NA\\n\",\n+       \"numpy               1.26.4\\n\",\n+       \"pandas              2.2.2\\n\",\n+       \"requests            2.32.3\\n\",\n+       \"session_info        1.0.0\\n\",\n+       \"-----\\n\",\n+       \"</pre>\\n\",\n+       \"<details>\\n\",\n+       \"<summary>Click to view modules imported as dependencies</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"aiosignal           1.3.1\\n\",\n+       \"annotated_types     0.7.0\\n\",\n+       \"anyio               NA\\n\",\n+       \"appnope             0.1.4\\n\",\n+       \"asttokens           NA\\n\",\n+       \"async_timeout       4.0.3\\n\",\n+       \"attr                23.2.0\\n\",\n+       \"certifi             2024.06.02\\n\",\n+       \"charset_normalizer  3.3.2\\n\",\n+       \"comm                0.2.2\\n\",\n+       \"cython_runtime      NA\\n\",\n+       \"dateutil            2.9.0\\n\",\n+       \"debugpy             1.6.7\\n\",\n+       \"decorator           5.1.1\\n\",\n+       \"exceptiongroup      1.2.0\\n\",\n+       \"executing           2.0.1\\n\",\n+       \"frozenlist          1.4.1\\n\",\n+       \"h11                 0.14.0\\n\",\n+       \"httpcore            1.0.5\\n\",\n+       \"httpx               0.25.2\\n\",\n+       \"idna                3.7\\n\",\n+       \"ipykernel           6.29.4\\n\",\n+       \"jedi                0.19.1\\n\",\n+       \"multidict           6.0.5\\n\",\n+       \"orjson              3.10.4\\n\",\n+       \"packaging           24.0\\n\",\n+       \"parso               0.8.4\\n\",\n+       \"pickleshare         0.7.5\\n\",\n+       \"pkg_resources       NA\\n\",\n+       \"platformdirs        4.2.2\\n\",\n+       \"prompt_toolkit      3.0.47\\n\",\n+       \"psutil              5.9.0\\n\",\n+       \"pure_eval           0.2.2\\n\",\n+       \"pydantic            2.7.3\\n\",\n+       \"pydantic_core       2.18.4\\n\",\n+       \"pydev_ipython       NA\\n\",\n+       \"pydevconsole        NA\\n\",\n+       \"pydevd              2.9.5\\n\",\n+       \"pydevd_file_utils   NA\\n\",\n+       \"pydevd_plugins      NA\\n\",\n+       \"pydevd_tracing      NA\\n\",\n+       \"pygments            2.18.0\\n\",\n+       \"pytz                2024.1\\n\",\n+       \"six                 1.16.0\\n\",\n+       \"sniffio             1.3.1\\n\",\n+       \"soupsieve           2.5\\n\",\n+       \"stack_data          0.6.2\\n\",\n+       \"swig_runtime_data4  NA\\n\",\n+       \"tornado             6.3.3\\n\",\n+       \"traitlets           5.14.3\\n\",\n+       \"typing_extensions   NA\\n\",\n+       \"urllib3             2.2.1\\n\",\n+       \"vscode              NA\\n\",\n+       \"wcwidth             0.2.13\\n\",\n+       \"yarl                1.9.4\\n\",\n+       \"zmq                 25.1.2\\n\",\n+       \"zoneinfo            NA\\n\",\n+       \"</pre>\\n\",\n+       \"</details> <!-- seems like this ends pre, so might as well be explicit -->\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"IPython             8.25.0\\n\",\n+       \"jupyter_client      8.6.2\\n\",\n+       \"jupyter_core        5.5.0\\n\",\n+       \"-----\\n\",\n+       \"Python 3.10.14 (main, May  6 2024, 14:42:37) [Clang 14.0.6 ]\\n\",\n+       \"macOS-14.4-arm64-arm-64bit\\n\",\n+       \"-----\\n\",\n+       \"Session information updated at 2024-06-11 03:48\\n\",\n+       \"</pre>\\n\",\n+       \"</details>\"\n+      ],\n+      \"text/plain\": [\n+       \"<IPython.core.display.HTML object>\"\n+      ]\n+     },\n+     \"execution_count\": 81,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"import session_info\\n\",\n+    \"session_info.show()\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"!pip install aiohttp bs4 faiss-cpu lxml mistralai nest_asyncio nest_asyncio pandas requests python-dotenv\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 80,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from dotenv import load_dotenv\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"load_dotenv()  # load environment variables from .env file\\n\",\n+    \"MISTRAL_API_KEY = os.getenv(\\\"MISTRAL_API_KEY\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Scraper Definitions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 46,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Exception ignored in: <function MistralClient.__del__ at 0x11efd1ab0>\\n\",\n+      \"Traceback (most recent call last):\\n\",\n+      \"  File \\\"/Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages/mistralai/client.py\\\", line 49, in __del__\\n\",\n+      \"    self._client.close()\\n\",\n+      \"AttributeError: 'MistralClient' object has no attribute '_client'\\n\"",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "eea83eeb46b69049e026f1766362c52f63d2f5fc",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Is it possible to handle this error?",
        "created_at": "2024-06-11T08:03:42Z",
        "updated_at": "2024-06-11T08:03:42Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634390613",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634390613"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634390613"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634390613/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 174,
        "side": "RIGHT",
        "original_position": 174,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634391112",
        "pull_request_review_id": 2109651450,
        "id": 1634391112,
        "node_id": "PRRC_kwDOLBF5j85hatRI",
        "diff_hunk": "@@ -0,0 +1,721 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 81,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/html\": [\n+       \"<details>\\n\",\n+       \"<summary>Click to view session information</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"aiohttp             3.9.5\\n\",\n+       \"bs4                 4.12.3\\n\",\n+       \"dotenv              NA\\n\",\n+       \"faiss               1.8.0\\n\",\n+       \"lxml                5.2.2\\n\",\n+       \"mistralai           NA\\n\",\n+       \"nest_asyncio        NA\\n\",\n+       \"numpy               1.26.4\\n\",\n+       \"pandas              2.2.2\\n\",\n+       \"requests            2.32.3\\n\",\n+       \"session_info        1.0.0\\n\",\n+       \"-----\\n\",\n+       \"</pre>\\n\",\n+       \"<details>\\n\",\n+       \"<summary>Click to view modules imported as dependencies</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"aiosignal           1.3.1\\n\",\n+       \"annotated_types     0.7.0\\n\",\n+       \"anyio               NA\\n\",\n+       \"appnope             0.1.4\\n\",\n+       \"asttokens           NA\\n\",\n+       \"async_timeout       4.0.3\\n\",\n+       \"attr                23.2.0\\n\",\n+       \"certifi             2024.06.02\\n\",\n+       \"charset_normalizer  3.3.2\\n\",\n+       \"comm                0.2.2\\n\",\n+       \"cython_runtime      NA\\n\",\n+       \"dateutil            2.9.0\\n\",\n+       \"debugpy             1.6.7\\n\",\n+       \"decorator           5.1.1\\n\",\n+       \"exceptiongroup      1.2.0\\n\",\n+       \"executing           2.0.1\\n\",\n+       \"frozenlist          1.4.1\\n\",\n+       \"h11                 0.14.0\\n\",\n+       \"httpcore            1.0.5\\n\",\n+       \"httpx               0.25.2\\n\",\n+       \"idna                3.7\\n\",\n+       \"ipykernel           6.29.4\\n\",\n+       \"jedi                0.19.1\\n\",\n+       \"multidict           6.0.5\\n\",\n+       \"orjson              3.10.4\\n\",\n+       \"packaging           24.0\\n\",\n+       \"parso               0.8.4\\n\",\n+       \"pickleshare         0.7.5\\n\",\n+       \"pkg_resources       NA\\n\",\n+       \"platformdirs        4.2.2\\n\",\n+       \"prompt_toolkit      3.0.47\\n\",\n+       \"psutil              5.9.0\\n\",\n+       \"pure_eval           0.2.2\\n\",\n+       \"pydantic            2.7.3\\n\",\n+       \"pydantic_core       2.18.4\\n\",\n+       \"pydev_ipython       NA\\n\",\n+       \"pydevconsole        NA\\n\",\n+       \"pydevd              2.9.5\\n\",\n+       \"pydevd_file_utils   NA\\n\",\n+       \"pydevd_plugins      NA\\n\",\n+       \"pydevd_tracing      NA\\n\",\n+       \"pygments            2.18.0\\n\",\n+       \"pytz                2024.1\\n\",\n+       \"six                 1.16.0\\n\",\n+       \"sniffio             1.3.1\\n\",\n+       \"soupsieve           2.5\\n\",\n+       \"stack_data          0.6.2\\n\",\n+       \"swig_runtime_data4  NA\\n\",\n+       \"tornado             6.3.3\\n\",\n+       \"traitlets           5.14.3\\n\",\n+       \"typing_extensions   NA\\n\",\n+       \"urllib3             2.2.1\\n\",\n+       \"vscode              NA\\n\",\n+       \"wcwidth             0.2.13\\n\",\n+       \"yarl                1.9.4\\n\",\n+       \"zmq                 25.1.2\\n\",\n+       \"zoneinfo            NA\\n\",\n+       \"</pre>\\n\",\n+       \"</details> <!-- seems like this ends pre, so might as well be explicit -->\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"IPython             8.25.0\\n\",\n+       \"jupyter_client      8.6.2\\n\",\n+       \"jupyter_core        5.5.0\\n\",\n+       \"-----\\n\",\n+       \"Python 3.10.14 (main, May  6 2024, 14:42:37) [Clang 14.0.6 ]\\n\",\n+       \"macOS-14.4-arm64-arm-64bit\\n\",\n+       \"-----\\n\",\n+       \"Session information updated at 2024-06-11 03:48\\n\",\n+       \"</pre>\\n\",\n+       \"</details>\"\n+      ],\n+      \"text/plain\": [\n+       \"<IPython.core.display.HTML object>\"\n+      ]\n+     },\n+     \"execution_count\": 81,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"import session_info\\n\",",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "eea83eeb46b69049e026f1766362c52f63d2f5fc",
        "user": {
          "login": "HugoLB0",
          "id": 66400773,
          "node_id": "MDQ6VXNlcjY2NDAwNzcz",
          "avatar_url": "https://avatars.githubusercontent.com/u/66400773?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/HugoLB0",
          "html_url": "https://github.com/HugoLB0",
          "followers_url": "https://api.github.com/users/HugoLB0/followers",
          "following_url": "https://api.github.com/users/HugoLB0/following{/other_user}",
          "gists_url": "https://api.github.com/users/HugoLB0/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/HugoLB0/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/HugoLB0/subscriptions",
          "organizations_url": "https://api.github.com/users/HugoLB0/orgs",
          "repos_url": "https://api.github.com/users/HugoLB0/repos",
          "events_url": "https://api.github.com/users/HugoLB0/events{/privacy}",
          "received_events_url": "https://api.github.com/users/HugoLB0/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "session-info is only to display the libraries version, it is not necessary required.",
        "created_at": "2024-06-11T08:04:05Z",
        "updated_at": "2024-06-11T08:04:05Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634391112",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634391112"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634391112"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634391112/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 120,
        "side": "RIGHT",
        "in_reply_to_id": 1634387141,
        "original_position": 120,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634391588",
        "pull_request_review_id": 2109652232,
        "id": 1634391588,
        "node_id": "PRRC_kwDOLBF5j85hatYk",
        "diff_hunk": "@@ -0,0 +1,721 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 81,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/html\": [\n+       \"<details>\\n\",\n+       \"<summary>Click to view session information</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"aiohttp             3.9.5\\n\",\n+       \"bs4                 4.12.3\\n\",\n+       \"dotenv              NA\\n\",\n+       \"faiss               1.8.0\\n\",\n+       \"lxml                5.2.2\\n\",\n+       \"mistralai           NA\\n\",\n+       \"nest_asyncio        NA\\n\",\n+       \"numpy               1.26.4\\n\",\n+       \"pandas              2.2.2\\n\",\n+       \"requests            2.32.3\\n\",\n+       \"session_info        1.0.0\\n\",\n+       \"-----\\n\",\n+       \"</pre>\\n\",\n+       \"<details>\\n\",\n+       \"<summary>Click to view modules imported as dependencies</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"aiosignal           1.3.1\\n\",\n+       \"annotated_types     0.7.0\\n\",\n+       \"anyio               NA\\n\",\n+       \"appnope             0.1.4\\n\",\n+       \"asttokens           NA\\n\",\n+       \"async_timeout       4.0.3\\n\",\n+       \"attr                23.2.0\\n\",\n+       \"certifi             2024.06.02\\n\",\n+       \"charset_normalizer  3.3.2\\n\",\n+       \"comm                0.2.2\\n\",\n+       \"cython_runtime      NA\\n\",\n+       \"dateutil            2.9.0\\n\",\n+       \"debugpy             1.6.7\\n\",\n+       \"decorator           5.1.1\\n\",\n+       \"exceptiongroup      1.2.0\\n\",\n+       \"executing           2.0.1\\n\",\n+       \"frozenlist          1.4.1\\n\",\n+       \"h11                 0.14.0\\n\",\n+       \"httpcore            1.0.5\\n\",\n+       \"httpx               0.25.2\\n\",\n+       \"idna                3.7\\n\",\n+       \"ipykernel           6.29.4\\n\",\n+       \"jedi                0.19.1\\n\",\n+       \"multidict           6.0.5\\n\",\n+       \"orjson              3.10.4\\n\",\n+       \"packaging           24.0\\n\",\n+       \"parso               0.8.4\\n\",\n+       \"pickleshare         0.7.5\\n\",\n+       \"pkg_resources       NA\\n\",\n+       \"platformdirs        4.2.2\\n\",\n+       \"prompt_toolkit      3.0.47\\n\",\n+       \"psutil              5.9.0\\n\",\n+       \"pure_eval           0.2.2\\n\",\n+       \"pydantic            2.7.3\\n\",\n+       \"pydantic_core       2.18.4\\n\",\n+       \"pydev_ipython       NA\\n\",\n+       \"pydevconsole        NA\\n\",\n+       \"pydevd              2.9.5\\n\",\n+       \"pydevd_file_utils   NA\\n\",\n+       \"pydevd_plugins      NA\\n\",\n+       \"pydevd_tracing      NA\\n\",\n+       \"pygments            2.18.0\\n\",\n+       \"pytz                2024.1\\n\",\n+       \"six                 1.16.0\\n\",\n+       \"sniffio             1.3.1\\n\",\n+       \"soupsieve           2.5\\n\",\n+       \"stack_data          0.6.2\\n\",\n+       \"swig_runtime_data4  NA\\n\",\n+       \"tornado             6.3.3\\n\",\n+       \"traitlets           5.14.3\\n\",\n+       \"typing_extensions   NA\\n\",\n+       \"urllib3             2.2.1\\n\",\n+       \"vscode              NA\\n\",\n+       \"wcwidth             0.2.13\\n\",\n+       \"yarl                1.9.4\\n\",\n+       \"zmq                 25.1.2\\n\",\n+       \"zoneinfo            NA\\n\",\n+       \"</pre>\\n\",\n+       \"</details> <!-- seems like this ends pre, so might as well be explicit -->\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"IPython             8.25.0\\n\",\n+       \"jupyter_client      8.6.2\\n\",\n+       \"jupyter_core        5.5.0\\n\",\n+       \"-----\\n\",\n+       \"Python 3.10.14 (main, May  6 2024, 14:42:37) [Clang 14.0.6 ]\\n\",\n+       \"macOS-14.4-arm64-arm-64bit\\n\",\n+       \"-----\\n\",\n+       \"Session information updated at 2024-06-11 03:48\\n\",\n+       \"</pre>\\n\",\n+       \"</details>\"\n+      ],\n+      \"text/plain\": [\n+       \"<IPython.core.display.HTML object>\"\n+      ]\n+     },\n+     \"execution_count\": 81,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"import session_info\\n\",\n+    \"session_info.show()\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"!pip install aiohttp bs4 faiss-cpu lxml mistralai nest_asyncio nest_asyncio pandas requests python-dotenv\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 80,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from dotenv import load_dotenv\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"load_dotenv()  # load environment variables from .env file\\n\",\n+    \"MISTRAL_API_KEY = os.getenv(\\\"MISTRAL_API_KEY\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Scraper Definitions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 46,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Exception ignored in: <function MistralClient.__del__ at 0x11efd1ab0>\\n\",\n+      \"Traceback (most recent call last):\\n\",\n+      \"  File \\\"/Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages/mistralai/client.py\\\", line 49, in __del__\\n\",\n+      \"    self._client.close()\\n\",\n+      \"AttributeError: 'MistralClient' object has no attribute '_client'\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"import aiohttp\\n\",\n+    \"import asyncio\\n\",\n+    \"import nest_asyncio\\n\",\n+    \"from bs4 import BeautifulSoup\\n\",\n+    \"from concurrent.futures import ThreadPoolExecutor\\n\",\n+    \"import requests\\n\",\n+    \"import re\\n\",\n+    \"import pandas as pd\\n\",\n+    \"import faiss\\n\",\n+    \"import numpy as np\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"from mistralai.models.chat_completion import ChatMessage\\n\",\n+    \"\\n\",\n+    \"# Apply the nest_asyncio patch\\n\",\n+    \"nest_asyncio.apply()\\n\",\n+    \"\\n\",\n+    \"headers = {\\n\",\n+    \"    \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\\\"\\n\",\n+    \"}\\n\",\n+    \"\\n\",\n+    \"total_results_to_fetch = 10  # total number of results to fetch\\n\",\n+    \"chunk_size = 1000  # size of each text chunk\\n\",\n+    \"\\n\",\n+    \"dataframe_out_path = 'temp.csv'\\n\",\n+    \"faiss_index_path = 'faiss_index.index'\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = MISTRAL_API_KEY  # replace with your actual API key\\n\",\n+    \"\\n\",\n+    \"async def fetch(session, url, params=None):\\n\",\n+    \"    async with session.get(url, params=params, headers=headers, timeout=30) as response:\\n\",\n+    \"        return await response.text()\\n\",\n+    \"\\n\",\n+    \"async def fetch_page(session, params, page_num, results):\\n\",\n+    \"    print(f\\\"Fetching page: {page_num}\\\")\\n\",\n+    \"    params[\\\"start\\\"] = (page_num - 1) * params[\\\"num\\\"]\\n\",\n+    \"    html = await fetch(session, \\\"https://www.google.com/search\\\", params)\\n\",\n+    \"    soup = BeautifulSoup(html, 'html.parser')\\n\",\n+    \"\\n\",\n+    \"    for result in soup.select(\\\".tF2Cxc\\\"):\\n\",\n+    \"        if len(results) >= total_results_to_fetch:\\n\",\n+    \"            break\\n\",\n+    \"        title = result.select_one(\\\".DKV0Md\\\").text\\n\",\n+    \"        links = result.select_one(\\\".yuRUbf a\\\")[\\\"href\\\"]\\n\",\n+    \"\\n\",\n+    \"        results.append({\\n\",\n+    \"            \\\"title\\\": title,\\n\",\n+    \"            \\\"links\\\": links\\n\",\n+    \"        })\\n\",\n+    \"\\n\",\n+    \"async def fetch_content(session, url):\\n\",\n+    \"    async with session.get(url, headers=headers, timeout=30) as response:\\n\",\n+    \"        return await response.text()\\n\",\n+    \"\\n\",\n+    \"async def fetch_all_content(urls):\\n\",\n+    \"    async with aiohttp.ClientSession() as session:\\n\",\n+    \"        tasks = [fetch_content(session, url) for url in urls]\\n\",\n+    \"        return await asyncio.gather(*tasks)\\n\",\n+    \"\\n\",\n+    \"def get_all_text_from_url(url):\\n\",\n+    \"    response = requests.get(url, headers=headers, timeout=30)\\n\",\n+    \"    soup = BeautifulSoup(response.text, 'html.parser')\\n\",\n+    \"    for script in soup([\\\"script\\\", \\\"style\\\"]):\\n\",\n+    \"        script.extract()\\n\",\n+    \"    text = soup.get_text()\\n\",\n+    \"    lines = (line.strip() for line in text.splitlines())\\n\",\n+    \"    chunks = (phrase.strip() for line in lines for phrase in line.split(\\\"  \\\"))\\n\",\n+    \"    text = '\\\\n'.join(chunk for chunk in chunks if chunk)\\n\",\n+    \"    return text\\n\",\n+    \"\\n\",\n+    \"def split_text_into_chunks(text, chunk_size):\\n\",\n+    \"    sentences = re.split(r'(?<=[.!?]) +', text)\\n\",\n+    \"    chunks = []\\n\",\n+    \"    current_chunk = []\\n\",\n+    \"\\n\",\n+    \"    for sentence in sentences:\\n\",\n+    \"        if sum(len(s) for s in current_chunk) + len(sentence) + 1 > chunk_size:\\n\",\n+    \"            chunks.append(' '.join(current_chunk))\\n\",\n+    \"            current_chunk = [sentence]\\n\",\n+    \"        else:\\n\",\n+    \"            current_chunk.append(sentence)\\n\",\n+    \"\\n\",\n+    \"    if current_chunk:\\n\",\n+    \"        chunks.append(' '.join(current_chunk))\\n\",\n+    \"\\n\",\n+    \"    return chunks\\n\",\n+    \"\\n\",\n+    \"async def process_text_content(texts, chunk_size):\\n\",\n+    \"    loop = asyncio.get_event_loop()\\n\",\n+    \"    tasks = [loop.run_in_executor(None, split_text_into_chunks, text, chunk_size) for text in texts]\\n\",\n+    \"    return await asyncio.gather(*tasks)\\n\",\n+    \"\\n\",\n+    \"async def get_embeddings_from_mistral(client, text_chunks):\\n\",\n+    \"    response = client.embeddings(model=\\\"mistral-embed\\\", input=text_chunks)\\n\",\n+    \"    return [embedding.embedding for embedding in response.data]\\n\",\n+    \"\\n\",\n+    \"async def fetch_and_process_data(search_query):\\n\",\n+    \"    client = MistralClient(api_key=mistral_api_key)\\n\",\n+    \"\\n\",\n+    \"    params = {\\n\",\n+    \"        \\\"q\\\": search_query,  # query example\\n\",\n+    \"        \\\"hl\\\": \\\"en\\\",         # language\\n\",\n+    \"        \\\"gl\\\": \\\"uk\\\",         # country of the search, UK -> United Kingdom\\n\",\n+    \"        \\\"start\\\": 0,         # number page by default up to 0\\n\",\n+    \"        \\\"num\\\": 10           # parameter defines the maximum number of results to return per page.\\n\",\n+    \"    }\\n\",\n+    \"    \\n\",\n+    \"    async with aiohttp.ClientSession() as session:\\n\",\n+    \"        page_num = 0\\n\",\n+    \"        results = []\\n\",\n+    \"        while len(results) < total_results_to_fetch:\\n\",\n+    \"            page_num += 1\\n\",\n+    \"            await fetch_page(session, params, page_num, results)\\n\",\n+    \"\\n\",\n+    \"        urls = [result['links'] for result in results]\\n\",\n+    \"\\n\",\n+    \"        with ThreadPoolExecutor(max_workers=10) as executor:\\n\",\n+    \"            loop = asyncio.get_event_loop()\\n\",\n+    \"            texts = await asyncio.gather(\\n\",\n+    \"                *[loop.run_in_executor(executor, get_all_text_from_url, url) for url in urls]\\n\",\n+    \"            )\\n\",\n+    \"\\n\",\n+    \"        chunks_list = await process_text_content(texts, chunk_size)\\n\",\n+    \"\\n\",\n+    \"        embeddings_list = []\\n\",\n+    \"        for chunks in chunks_list:\\n\",\n+    \"            embeddings = await get_embeddings_from_mistral(client, chunks)\\n\",\n+    \"            embeddings_list.append(embeddings)\\n\",\n+    \"\\n\",\n+    \"        data = []\\n\",\n+    \"        for i, result in enumerate(results):\\n\",\n+    \"            if i >= len(embeddings_list):\\n\",\n+    \"                print(f\\\"Error: No embeddings returned for result {i}\\\")\\n\",\n+    \"                continue\\n\",\n+    \"            for j, chunk in enumerate(chunks_list[i]):\\n\",\n+    \"                if j >= len(embeddings_list[i]):\\n\",\n+    \"                    print(f\\\"Error: No embedding returned for chunk {j} of result {i}\\\")\\n\",\n+    \"                    continue\\n\",\n+    \"                data.append({\\n\",\n+    \"                    'title': result['title'],\\n\",\n+    \"                    'url': result['links'],\\n\",\n+    \"                    'chunk': chunk,\\n\",\n+    \"                    'embedding': embeddings_list[i][j]\\n\",\n+    \"                })\\n\",\n+    \"\\n\",\n+    \"        df = pd.DataFrame(data)\\n\",\n+    \"        df.to_csv(dataframe_out_path, index=False)\\n\",\n+    \"\\n\",\n+    \"        # FAISS indexing\\n\",\n+    \"        dimension = len(embeddings_list[0][0])  # assuming all embeddings have the same dimension\\n\",\n+    \"        index = faiss.IndexFlatL2(dimension)\\n\",\n+    \"\\n\",\n+    \"        embeddings = np.array([entry['embedding'] for entry in data], dtype=np.float32)\\n\",\n+    \"        index.add(embeddings)\\n\",\n+    \"\\n\",\n+    \"        faiss.write_index(index, faiss_index_path)\\n\",\n+    \"\\n\",\n+    \"await fetch_and_process_data(\\\"What is the latest news about apple and openai?\\\")\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## little embeddings and vector store creation\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 47,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"[{'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': '\u201cThis is a method to allow Apple to make up for the fact that they haven\u2019t been focused on AI like they should have done over the last decade or so.\u201d Apple Intelligence was one of many announcements and updates from Apple\\\\non Monday, including a feature that lets AirPods Pro users nod yes or shake their heads no to Siri\u2019s questions when they are in crowded spaces. Additionally, the company announced that the\\\\nVision Pro headset will also be available in additional countries starting later this month, including mainland China, Hong Kong, Japan and Singapore.The company also unveiled a new feature called InSight for its tvOS18 that is similar to Amazon\u2019s X-Ray and shows the names of actors or a song playing on an Apple TV+ program.\\\\nCompany Town\\\\nScarlett Johansson also thinks OpenAI\u2019s new voice sounds like her. She\u2019s not happy about it\\\\nJohansson, who portrayed the voice of a computer program in \u2018Her,\u2019 was not behind OpenAI\u2019s \u2018Sky\u2019 voice assistant.'},\\n\",\n+       \" {'title': 'Apple doubles down on artificial intelligence, announcing ...',\\n\",\n+       \"  'url': 'https://www.npr.org/2024/06/10/nx-s1-4999051/apple-artificial-intelligence-partnership-openai-chatgpt-siri-iphone',\\n\",\n+       \"  'chunk': \\\"OpenAI itself has been embroiled in allegations of copying actor Scartlett Johansson\u2019s voice without her permission. Apple is also at the center of an antitrust lawsuit filed by the Justice Department and 15 states. The government accuses Apple of abusing its power as a monopoly to push out rivals and keep customers using its products. It\u2019s unclear how Apple\u2019s new partnership with OpenAI could play into this case. Shortly after Apple\u2019s announcement, OpenAI CEO Sam Altman posted on X, formerly known as Twitter, \u201cvery happy to be partnering with apple to integrate chatgpt into their devices later this year! think you will really like it.\u201d\\\\nApple is also rolling out what it calls Apple Intelligence, its term for Apple's own new generative AI software. Apple Intelligence will enable transcription for phone calls, AI photo retouching and improvements in the natural conversation flow with Siri, the company said.\\\"},\\n\",\n+       \" {'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': 'Tools made by San Francisco-based OpenAI have been used to create\\\\nmusic videos, read bedtime stories to children and help brainstorm ideas for writers. Companies including Microsoft and Google have aggressively incorporated AI into their products and services. Apple has often not been the first to market with new technological advances, choosing instead to enter new product categories \u2014 including smartphones and tablets \u2014 once they\u2019ve been established, leading to broader consumer adoption. For example, Apple only began selling its own virtual and augmented reality headset (known as Vision Pro) early this year.\\\\nApple said its AI capabilities were created with privacy protections in mind.'},\\n\",\n+       \" {'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': 'Apple announces deal with OpenAI. Will it be a game-changer? - Los Angeles Times\\\\nNews\\\\nHome Page\\\\nCalifornia\\\\nElection 2024\\\\nHousing & Homelessness\\\\nPolitics\\\\nScience & Medicine\\\\nWorld & Nation\\\\nBusiness\\\\nArtificial Intelligence\\\\nAutos\\\\nJobs, Labor & Workplace\\\\nReal Estate\\\\nTechnology and the Internet\\\\nCalifornia\\\\nCalifornia Politics\\\\nEarthquakes\\\\nEducation\\\\nHousing & Homelessness\\\\nL.A. Influential\\\\nL.A. Politics\\\\nMental Health\\\\nClimate & Environment\\\\nGlobal Warming\\\\nWater & Drought\\\\nEntertainment & Arts\\\\nArts\\\\nBooks\\\\nStand-Up Comedy\\\\nCompany Town\\\\nThe Envelope (Awards)\\\\nMovies\\\\nMusic\\\\nTelevision\\\\nThings to Do\\\\nDe Los\\\\nEn Espa\u00f1ol\\\\nFood\\\\n101 best restaurants in L.A.\\\\nRecipes\\\\nImage\\\\nLifestyle\\\\nHealth & Wellness\\\\nHome Design\\\\nL.A.'},\\n\",\n+       \" {'title': 'OpenAI and Apple announce partnership',\\n\",\n+       \"  'url': 'https://openai.com/index/openai-and-apple-announce-partnership/',\\n\",\n+       \"  'chunk': \\\"Together with Apple, we're making it easier for people to benefit from what AI can offer.Sam Altman, CEO of OpenAIAnnouncementsCompanyAuthorOpenAI Our researchOverviewIndexLatest advancementsGPT-4DALL\u00b7E 3SoraChatGPTFor EveryoneFor TeamsFor EnterprisesChatGPT login(opens in a new window)APIPlatform overviewPricingDocumentation(opens in a new window)API login(opens in a new window)Explore moreOpenAI for businessStoriesSafety overviewSafety overviewSafety standardsTeamsSafety SystemsPreparednessSuperalignmentCompanyAbout usNewsOur CharterSecurityResidencyCareersTerms & policiesTerms of usePrivacy policyBrand guidelinesOther policies OpenAI \u00a9 2015\u20132024(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)\\\"}]\"\n+      ]\n+     },\n+     \"execution_count\": 47,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"def query_vector_store(query_embedding, k=5):\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    Query the FAISS vector store and return the text results along with metadata.\\n\",\n+    \"\\n\",\n+    \"    :param query_embedding: The embedding to query with.\\n\",\n+    \"    :param k: Number of nearest neighbors to retrieve.\\n\",\n+    \"    :return: List of dictionaries containing text results and metadata of the k nearest neighbors.\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    # Load the index\\n\",\n+    \"\\n\",\n+    \"    index = faiss.read_index(faiss_index_path)\\n\",\n+    \"\\n\",\n+    \"    # Ensure the query embedding is a numpy array with the correct shape\\n\",\n+    \"    if not isinstance(query_embedding, np.ndarray):\\n\",\n+    \"        query_embedding = np.array(query_embedding, dtype=np.float32)\\n\",\n+    \"    if query_embedding.ndim == 1:\\n\",\n+    \"        query_embedding = np.expand_dims(query_embedding, axis=0)\\n\",\n+    \"\\n\",\n+    \"    # Query the index\\n\",\n+    \"    distances, indices = index.search(query_embedding, k)\\n\",\n+    \"    \\n\",\n+    \"    # Load the dataframe\\n\",\n+    \"    df = pd.read_csv(dataframe_out_path)\\n\",\n+    \"    \\n\",\n+    \"    # Retrieve the text results and metadata\\n\",\n+    \"    results = []\\n\",\n+    \"    for idx in indices[0]:\\n\",\n+    \"        result = {\\n\",\n+    \"            'title': df.iloc[idx]['title'],\\n\",\n+    \"            'url': df.iloc[idx]['url'],\\n\",\n+    \"            'chunk': df.iloc[idx]['chunk']\\n\",\n+    \"        }\\n\",\n+    \"        results.append(result)\\n\",\n+    \"    \\n\",\n+    \"    return results\\n\",\n+    \"\\n\",\n+    \"def query_embeddings(texts):\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    Convert text to embeddings using Mistral AI API.\\n\",\n+    \"\\n\",\n+    \"    :param api_key: Your Mistral API key.\\n\",\n+    \"    :param texts: List of texts to convert to embeddings.\\n\",\n+    \"    :return: List of embeddings.\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    client = MistralClient(api_key=MISTRAL_API_KEY)\\n\",\n+    \"    response = client.embeddings(model=\\\"mistral-embed\\\", input=[texts])\\n\",\n+    \"    return [embedding.embedding for embedding in response.data]\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"embeddings = query_embeddings(\\\"AGI\\\")\\n\",\n+    \"results = query_vector_store(embeddings[0], k=5)\\n\",\n+    \"results\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## tools definition\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 48,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\",\n+      \"[{'title': 'Microsoft partners with Mistral in second AI deal beyond ...', 'url': 'https://www.theverge.com/2024/2/26/24083510/microsoft-mistral-partnership-deal-azure-ai', 'chunk': '\u201cMistral Large achieves strong results on commonly used benchmarks, making it the world\u2019s second-ranked model generally available through an API (next to GPT-4),\u201d says the Mistral AI team.Mistral also has a new AI chatbotMistral Large is available on Mistral\u2019s own infrastructure, hosted in Europe, or through Azure AI Studio and Azure Machine Learning. Mistral Small will also be available today, offering improved latency over Mistral\u2019s 8x7B model. Mistral is also releasing a new conversational chatbot, Le Chat, that\u2019s based on various models from Mistral AI.Mistral\u2019s models have typically been open source, but the partnership with Microsoft means the French AI company can now explore more commercial opportunities. Neither Microsoft nor Mistral are disclosing details of the investment, though.Microsoft\u2019s investment comes months after a rocky period for its main AI partner, OpenAI.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'Something went wrong while submitting the form.PricingLog inSign upCase studies\\\\nHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsSaveSavedToday I\u00e2\\\\x80\\\\x99m diving deep into Mistral AI, who are making headlines after recently closing their (huge) Series A round. Launched just 7 months ago, they\u00e2\\\\x80\\\\x99re disrupting the LLM market. I want to look at how they\u00e2\\\\x80\\\\x99re doing it - and how you can take advantage.This post covers:What is Mistral?Who\u00e2\\\\x80\\\\x99s behind it?The timeline: What\u00e2\\\\x80\\\\x99s happened to dateFundraisingProduct OverviewA peek inside their seed deck \u00f0\\\\x9f\\\\x91\\\\x80 Roadmap analysis. Are they achieving what they set out to do?5 big reasons Mistral\u00e2\\\\x80\\\\x99s making waves \u00f0\\\\x9f\\\\x8c\\\\x8aHow people actually use MistralOpportunities and how you can take advantageWhat developers think of MistralWhat is Mistral?A French startup that develops fast, open-source and secure language models.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'As Mistral has been true to the promise of releasing open models, the community (and other companies) have taken Mistral\u00e2\\\\x80\\\\x99s models and created better models on top of them. For example, OpenHermes 2.5 by Teknium and Neural Chat 7B by Intel.With AI models, open source takes many forms: from available to use locally but no details about the model (weights, architecture etc.) to models that are fully open source and allow users to train on the outputs.While Mistral\u00e2\\\\x80\\\\x99s models were open-weights from the start, Mistral\u00e2\\\\x80\\\\x99s latest announcement had a line in their Terms of Service Terms of Service which was spotted by Far El on Twitter, said:Basically, you can\u00e2\\\\x80\\\\x99t use it to train or improve other models or compete against them\u00e2\\\\x80\u00a6It wasn\u00e2\\\\x80\\\\x99t clear whether this was just for the API platform or the model itself. And unfortunately, open-source means you should be able to use this tech how you like, that\u00e2\\\\x80\\\\x99s kind of the point.'}, {'title': 'Microsoft partners with Mistral in second AI deal beyond ...', 'url': 'https://www.theverge.com/2024/2/26/24083510/microsoft-mistral-partnership-deal-azure-ai', 'chunk': 'The Financial Times reports that the partnership will include Microsoft taking a minor stake in the 10-month-old AI company, just a little over a year after Microsoft invested more than $10 billion into its OpenAI partnership.The deal will see Mistral\u2019s open and commercial language models available on Microsoft\u2019s Azure AI platform, the second company to offer a commercial language model on Azure after OpenAI. Much like the OpenAI partnership, Microsoft\u2019s partnership with Mistral will also be focused on the development and deployment of next-generation large language models.Mistral is announcing a new AI model today, called Mistral Large. It\u2019s designed to more closely compete with OpenAI\u2019s GPT-4 model. Unlike some of Mistral\u2019s previous models, it won\u2019t be open source.'}, {'title': 'Microsoft partners with Mistral in second AI deal beyond ...', 'url': 'https://www.theverge.com/2024/2/26/24083510/microsoft-mistral-partnership-deal-azure-ai', 'chunk': 'Microsoft partners with Mistral in second AI deal beyond OpenAI - The VergeSkip to main contentThe VergeThe Verge logo.The Verge homepageThe Verge homepageThe VergeThe Verge logo./Tech/Reviews/Science/Entertainment/AI/MoreMenuExpandThe VergeThe Verge logo.MenuExpandMicrosoft/Tech/Artificial IntelligenceMicrosoft partners with Mistral in second AI deal beyond OpenAIMicrosoft partners with Mistral in second AI deal beyond OpenAI / Mistral has a Microsoft investment to help commercialize its new AI language models.By\\\\nTom Warren, a senior editor covering Microsoft, PC gaming, console, and tech. He founded WinRumors, a site dedicated to Microsoft news, before joining The Verge in 2012. Feb 26, 2024, 3:23 PM UTCShare this story Illustration: The VergeMicrosoft has announced a new multiyear partnership with Mistral, a French AI startup that\u2019s valued at \u20ac2 billion (about $2.1 billion).'}]\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"\\n\",\n+    \"nest_asyncio.apply()\\n\",\n+    \"\\n\",\n+    \"tools = [\\n\",\n+    \"    {\\n\",\n+    \"        \\\"type\\\": \\\"function\\\",\\n\",\n+    \"        \\\"function\\\": {\\n\",\n+    \"            \\\"name\\\": \\\"mistral_web_search\\\",\\n\",\n+    \"            \\\"description\\\": \\\"Fetch and process data from Google search based on a query, store results in FAISS vector store, and retrieve results.\\\",\\n\",\n+    \"            \\\"parameters\\\": {\\n\",\n+    \"                \\\"type\\\": \\\"object\\\",\\n\",\n+    \"                \\\"properties\\\": {\\n\",\n+    \"                    \\\"search_query\\\": {\\n\",\n+    \"                        \\\"type\\\": \\\"string\\\",\\n\",\n+    \"                        \\\"description\\\": \\\"The search query to use for fetching data from Google search.\\\"\\n\",\n+    \"                    }\\n\",\n+    \"                },\\n\",\n+    \"                \\\"required\\\": [\\\"search_query\\\"]\\n\",\n+    \"            },\\n\",\n+    \"        },\\n\",\n+    \"    },\\n\",\n+    \"]\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def mistral_web_search(search_query: str):\\n\",\n+    \"    async def run_search():\\n\",\n+    \"        await fetch_and_process_data(search_query)\\n\",\n+    \"        embeddings = query_embeddings(search_query)\\n\",\n+    \"        results_ = query_vector_store(embeddings[0], k=5)\\n\",\n+    \"        return results_\\n\",\n+    \"\\n\",\n+    \"    return asyncio.run(run_search())\\n\",\n+    \"\\n\",\n+    \"search_query = \\\"mistral and openai\\\"\\n\",\n+    \"results = mistral_web_search(search_query)\\n\",\n+    \"print(results)\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 49,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"'\u201cMistral Large achieves strong results on commonly used benchmarks, making it the world\u2019s second-ranked model generally available through an API (next to GPT-4),\u201d says the Mistral AI team.Mistral also has a new AI chatbotMistral Large is available on Mistral\u2019s own infrastructure, hosted in Europe, or through Azure AI Studio and Azure Machine Learning. Mistral Small will also be available today, offering improved latency over Mistral\u2019s 8x7B model. Mistral is also releasing a new conversational chatbot, Le Chat, that\u2019s based on various models from Mistral AI.Mistral\u2019s models have typically been open source, but the partnership with Microsoft means the French AI company can now explore more commercial opportunities. Neither Microsoft nor Mistral are disclosing details of the investment, though.Microsoft\u2019s investment comes months after a rocky period for its main AI partner, OpenAI.\\\\nSomething went wrong while submitting the form.PricingLog inSign upCase studies\\\\nHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsSaveSavedToday I\u00e2\\\\x80\\\\x99m diving deep into Mistral AI, who are making headlines after recently closing their (huge) Series A round. Launched just 7 months ago, they\u00e2\\\\x80\\\\x99re disrupting the LLM market. I want to look at how they\u00e2\\\\x80\\\\x99re doing it - and how you can take advantage.This post covers:What is Mistral?Who\u00e2\\\\x80\\\\x99s behind it?The timeline: What\u00e2\\\\x80\\\\x99s happened to dateFundraisingProduct OverviewA peek inside their seed deck \u00f0\\\\x9f\\\\x91\\\\x80 Roadmap analysis. Are they achieving what they set out to do?5 big reasons Mistral\u00e2\\\\x80\\\\x99s making waves \u00f0\\\\x9f\\\\x8c\\\\x8aHow people actually use MistralOpportunities and how you can take advantageWhat developers think of MistralWhat is Mistral?A French startup that develops fast, open-source and secure language models.\\\\nAs Mistral has been true to the promise of releasing open models, the community (and other companies) have taken Mistral\u00e2\\\\x80\\\\x99s models and created better models on top of them. For example, OpenHermes 2.5 by Teknium and Neural Chat 7B by Intel.With AI models, open source takes many forms: from available to use locally but no details about the model (weights, architecture etc.) to models that are fully open source and allow users to train on the outputs.While Mistral\u00e2\\\\x80\\\\x99s models were open-weights from the start, Mistral\u00e2\\\\x80\\\\x99s latest announcement had a line in their Terms of Service Terms of Service which was spotted by Far El on Twitter, said:Basically, you can\u00e2\\\\x80\\\\x99t use it to train or improve other models or compete against them\u00e2\\\\x80\u00a6It wasn\u00e2\\\\x80\\\\x99t clear whether this was just for the API platform or the model itself. And unfortunately, open-source means you should be able to use this tech how you like, that\u00e2\\\\x80\\\\x99s kind of the point.\\\\nThe Financial Times reports that the partnership will include Microsoft taking a minor stake in the 10-month-old AI company, just a little over a year after Microsoft invested more than $10 billion into its OpenAI partnership.The deal will see Mistral\u2019s open and commercial language models available on Microsoft\u2019s Azure AI platform, the second company to offer a commercial language model on Azure after OpenAI. Much like the OpenAI partnership, Microsoft\u2019s partnership with Mistral will also be focused on the development and deployment of next-generation large language models.Mistral is announcing a new AI model today, called Mistral Large. It\u2019s designed to more closely compete with OpenAI\u2019s GPT-4 model. Unlike some of Mistral\u2019s previous models, it won\u2019t be open source.\\\\nMicrosoft partners with Mistral in second AI deal beyond OpenAI - The VergeSkip to main contentThe VergeThe Verge logo.The Verge homepageThe Verge homepageThe VergeThe Verge logo./Tech/Reviews/Science/Entertainment/AI/MoreMenuExpandThe VergeThe Verge logo.MenuExpandMicrosoft/Tech/Artificial IntelligenceMicrosoft partners with Mistral in second AI deal beyond OpenAIMicrosoft partners with Mistral in second AI deal beyond OpenAI / Mistral has a Microsoft investment to help commercialize its new AI language models.By\\\\nTom Warren, a senior editor covering Microsoft, PC gaming, console, and tech. He founded WinRumors, a site dedicated to Microsoft news, before joining The Verge in 2012. Feb 26, 2024, 3:23 PM UTCShare this story Illustration: The VergeMicrosoft has announced a new multiyear partnership with Mistral, a French AI startup that\u2019s valued at \u20ac2 billion (about $2.1 billion).'\"\n+      ]\n+     },\n+     \"execution_count\": 49,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"\\\"\\\"\\\" little helper function to extract only the texts \\\"\\\"\\\"\\n\",\n+    \"def tools_to_str(tools_output: list) -> str:\\n\",\n+    \"    return '\\\\n'.join([tool['chunk'] for tool in tools_output])\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"tools_to_str(mistral_web_search(search_query))\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 50,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import functools\\n\",\n+    \"\\n\",\n+    \"names_to_functions = {\\n\",\n+    \"    'mistral_web_search': functools.partial(mistral_web_search),\\n\",\n+    \"}\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## chat\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 6,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages = [\\n\",\n+    \"    ChatMessage(role=\\\"user\\\", content=\\\"What happend during apple WWDC 2024?\\\"),\\n\",\n+    \"]\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 7,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"ChatCompletionResponse(id='fb0585bb35c449899283753361aebc7a', object='chat.completion', created=1718068657, model='mistral-large-latest', choices=[ChatCompletionResponseChoice(index=0, message=ChatMessage(role='assistant', content='', name=None, tool_calls=[ToolCall(id='SMqSja1Y4', type=<ToolType.function: 'function'>, function=FunctionCall(name='mistral_web_search', arguments='{\\\"search_query\\\": \\\"apple WWDC 2024\\\"}'))], tool_call_id=None), finish_reason=<FinishReason.tool_calls: 'tool_calls'>)], usage=UsageInfo(prompt_tokens=121, total_tokens=156, completion_tokens=35))\"\n+      ]\n+     },\n+     \"execution_count\": 7,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"model = \\\"mistral-large-latest\\\"\\n\",\n+    \"\\n\",\n+    \"client = MistralClient(api_key=MISTRAL_API_KEY)\\n\",\n+    \"response = client.chat(model=model, messages=messages, tools=tools, tool_choice=\\\"auto\\\")\\n\",\n+    \"response\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages.append(response.choices[0].message)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"\\n\",\n+      \"function_name:  mistral_web_search \\n\",\n+      \"function_params:  {'search_query': 'apple WWDC 2024'}\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"import json\\n\",\n+    \"\\n\",\n+    \"tool_call = response.choices[0].message.tool_calls[0]\\n\",\n+    \"function_name = tool_call.function.name\\n\",\n+    \"function_params = json.loads(tool_call.function.arguments)\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"print(\\\"\\\\nfunction_name: \\\", function_name, \\\"\\\\nfunction_params: \\\", function_params)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 21,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"\\\"Apple Intelligence Revealed at WWDC 2024 as Company Jumps Into AI Race - The New York Times\\\\nSkip to contentSkip to site indexTechnology\\\\xa0Today\u2019s PaperArtificial IntelligenceApple Enters A.I. FrayMeta\u2019s A.I. ScrapingHumane\u2019s A.I. Device FlopOpenAI\u2019s \u2018Reckless\u2019 CultureThe New ChatGPTFaces QuizAdvertisementSKIP ADVERTISEMENTYou have a preview view of this article while we are checking your access. When we have confirmed access, the full article content will load.Artificial IntelligenceApple Enters A.I. FrayMeta\u2019s A.I. ScrapingHumane\u2019s A.I. Device FlopOpenAI\u2019s \u2018Reckless\u2019 CultureThe New ChatGPTFaces QuizSupported bySKIP ADVERTISEMENTApple Jumps Into A.I.\\\\nSigal Samuel, a senior tech reporter for Vox, unpacks what's going on with the company.Apple uses the developer conference at its Cupertino, Calif., headquarters each year to showcase updates to its own apps and operating systems, as well as to show developers new tools they will be able to use in their apps.The company\\\\xa0has been using AI behind the scenes for years to power features on its devices, such as the ability of its watches to detect crashes and falls.\\\\nMicrosoft took an early lead in the race to commercialize AI through its bet on OpenAI.The AI features were unveiled at Apple's\\\\xa0Worldwide Developers Conference, and the tech giant\\\\xa0also showed its latest operating system for its Vision Pro mixed-reality headset and iPhone.WATCH | Apple launches Apple Intelligence to integrate AI across its apps:Apple announces Apple Intelligence4 hours agoDuration 0:45Partnering with artificial intelligence company OpenAI, Apple announced its iPhones would begin adding AI features.\\\\n(Associated Press)\\\\nBy Wendy LeeStaff Writer\\\\nJune 10, 2024\\\\nUpdated\\\\xa02:06 PM PT\\\\nFacebook\\\\nTwitter\\\\nShow more sharing options\\\\nShare Close extra sharing options\\\\nFacebook\\\\nTwitter\\\\nLinkedIn\\\\nEmail\\\\nCopy Link URLCopied!\\\\nPrint\\\\nApple is finally taking the plunge on AI. The company on Monday unveiled a suite of new artificial intelligence capabilities that will be available in its newest operating system, including connecting its interactive voice feature Siri with OpenAI\u2019s ChatGPT in a major deal that could supercharge adoption of the fast-developing technology.Siri, for example, will be able to surface answers from ChatGPT for Apple devices and provide relevant contextual information across several apps, the Cupertino, Calif., tech giant said at its highly anticipated developer conference.\\\\n(Jeff Chiu/AP)Listen6 minShareComment on this storyCommentAdd to your saved storiesSaveSAN FRANCISCO \u2014 Apple officially launched itself into the artificial intelligence arms race, announcing a deal with ChatGPT maker OpenAI to use the company\u2019s technology in its products and showing off a slew of its own new AI features.The announcements, made at the tech giant\u2019s annual Worldwide Developers Conference on Monday in Cupertino, Calif., are aimed at helping the tech giant keep up with competitors such as Google and Microsoft, which have boasted in recent months that AI makes their phones, laptops and software better than Apple\u2019s. In addition to Apple\u2019s own homegrown AI tech, the company\u2019s phones, computers and iPads will also have ChatGPT built in \u201clater this year,\u201d a huge validation of the importance of the highflying start-up\u2019s tech.\\\"\"\n+      ]\n+     },\n+     \"execution_count\": 21,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"function_result = tools_to_str(names_to_functions[function_name](**function_params))\\n\",\n+    \"function_result\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 22,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"\\\"At the Apple Worldwide Developers Conference (WWDC) in 2024, Apple made several significant announcements related to artificial intelligence (AI). The tech giant unveiled a suite of new AI capabilities to be integrated into its newest operating system. A notable development was the collaboration with OpenAI's ChatGPT, which aimed to enhance the functionality of Siri, Apple's interactive voice feature. This integration would allow Siri to provide more relevant and contextual information across various apps on Apple devices.\\\\n\\\\nThe partnership with OpenAI was seen as a major move to stay competitive with other industry leaders like Google and Microsoft, who had been emphasizing AI integration in their products. Additionally, it was announced that ChatGPT would be built into Apple's phones, computers, and iPads later in the year. This marked a significant step for Apple in the AI race, as they had been utilizing AI behind the scenes for years to power features on their devices.\\\\n\\\\nDuring the WWDC 2024, Apple also showcased updates to its own apps and operating systems, as well as new tools for developers to use in their apps. The conference was held at Apple's Cupertino, California headquarters, and demonstrated the company's commitment to advancing AI technology in its products.\\\"\"\n+      ]\n+     },\n+     \"execution_count\": 22,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"messages.append(ChatMessage(role=\\\"tool\\\", name=function_name, content=function_result, tool_call_id=tool_call.id))\\n\",\n+    \"\\n\",\n+    \"response = client.chat(model=model, messages=messages)\\n\",\n+    \"response.choices[0].message.content\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Chat in a chain (cleaner user experience)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages = []\\n\",\n+    \"\\n\",\n+    \"while True:\\n\",\n+    \"    input_ = input(\\\"Ask: \\\")\\n\",\n+    \"    messages.append(ChatMessage(role=\\\"user\\\", content=input_))\\n\",\n+    \"    response = client.chat(model=model, messages=messages, tools=tools, tool_choice=\\\"auto\\\")\\n\",",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "eea83eeb46b69049e026f1766362c52f63d2f5fc",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "This might not work if the model decides to not use a function",
        "created_at": "2024-06-11T08:04:27Z",
        "updated_at": "2024-06-11T08:04:27Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634391588",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634391588"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634391588"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634391588/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 682,
        "side": "RIGHT",
        "original_position": 682,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634392802",
        "pull_request_review_id": 2109654288,
        "id": 1634392802,
        "node_id": "PRRC_kwDOLBF5j85hatri",
        "diff_hunk": "@@ -0,0 +1,721 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 81,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/html\": [\n+       \"<details>\\n\",\n+       \"<summary>Click to view session information</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"aiohttp             3.9.5\\n\",\n+       \"bs4                 4.12.3\\n\",\n+       \"dotenv              NA\\n\",\n+       \"faiss               1.8.0\\n\",\n+       \"lxml                5.2.2\\n\",\n+       \"mistralai           NA\\n\",\n+       \"nest_asyncio        NA\\n\",\n+       \"numpy               1.26.4\\n\",\n+       \"pandas              2.2.2\\n\",\n+       \"requests            2.32.3\\n\",\n+       \"session_info        1.0.0\\n\",\n+       \"-----\\n\",\n+       \"</pre>\\n\",\n+       \"<details>\\n\",\n+       \"<summary>Click to view modules imported as dependencies</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"aiosignal           1.3.1\\n\",\n+       \"annotated_types     0.7.0\\n\",\n+       \"anyio               NA\\n\",\n+       \"appnope             0.1.4\\n\",\n+       \"asttokens           NA\\n\",\n+       \"async_timeout       4.0.3\\n\",\n+       \"attr                23.2.0\\n\",\n+       \"certifi             2024.06.02\\n\",\n+       \"charset_normalizer  3.3.2\\n\",\n+       \"comm                0.2.2\\n\",\n+       \"cython_runtime      NA\\n\",\n+       \"dateutil            2.9.0\\n\",\n+       \"debugpy             1.6.7\\n\",\n+       \"decorator           5.1.1\\n\",\n+       \"exceptiongroup      1.2.0\\n\",\n+       \"executing           2.0.1\\n\",\n+       \"frozenlist          1.4.1\\n\",\n+       \"h11                 0.14.0\\n\",\n+       \"httpcore            1.0.5\\n\",\n+       \"httpx               0.25.2\\n\",\n+       \"idna                3.7\\n\",\n+       \"ipykernel           6.29.4\\n\",\n+       \"jedi                0.19.1\\n\",\n+       \"multidict           6.0.5\\n\",\n+       \"orjson              3.10.4\\n\",\n+       \"packaging           24.0\\n\",\n+       \"parso               0.8.4\\n\",\n+       \"pickleshare         0.7.5\\n\",\n+       \"pkg_resources       NA\\n\",\n+       \"platformdirs        4.2.2\\n\",\n+       \"prompt_toolkit      3.0.47\\n\",\n+       \"psutil              5.9.0\\n\",\n+       \"pure_eval           0.2.2\\n\",\n+       \"pydantic            2.7.3\\n\",\n+       \"pydantic_core       2.18.4\\n\",\n+       \"pydev_ipython       NA\\n\",\n+       \"pydevconsole        NA\\n\",\n+       \"pydevd              2.9.5\\n\",\n+       \"pydevd_file_utils   NA\\n\",\n+       \"pydevd_plugins      NA\\n\",\n+       \"pydevd_tracing      NA\\n\",\n+       \"pygments            2.18.0\\n\",\n+       \"pytz                2024.1\\n\",\n+       \"six                 1.16.0\\n\",\n+       \"sniffio             1.3.1\\n\",\n+       \"soupsieve           2.5\\n\",\n+       \"stack_data          0.6.2\\n\",\n+       \"swig_runtime_data4  NA\\n\",\n+       \"tornado             6.3.3\\n\",\n+       \"traitlets           5.14.3\\n\",\n+       \"typing_extensions   NA\\n\",\n+       \"urllib3             2.2.1\\n\",\n+       \"vscode              NA\\n\",\n+       \"wcwidth             0.2.13\\n\",\n+       \"yarl                1.9.4\\n\",\n+       \"zmq                 25.1.2\\n\",\n+       \"zoneinfo            NA\\n\",\n+       \"</pre>\\n\",\n+       \"</details> <!-- seems like this ends pre, so might as well be explicit -->\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"IPython             8.25.0\\n\",\n+       \"jupyter_client      8.6.2\\n\",\n+       \"jupyter_core        5.5.0\\n\",\n+       \"-----\\n\",\n+       \"Python 3.10.14 (main, May  6 2024, 14:42:37) [Clang 14.0.6 ]\\n\",\n+       \"macOS-14.4-arm64-arm-64bit\\n\",\n+       \"-----\\n\",\n+       \"Session information updated at 2024-06-11 03:48\\n\",\n+       \"</pre>\\n\",\n+       \"</details>\"\n+      ],\n+      \"text/plain\": [\n+       \"<IPython.core.display.HTML object>\"\n+      ]\n+     },\n+     \"execution_count\": 81,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"import session_info\\n\",",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "eea83eeb46b69049e026f1766362c52f63d2f5fc",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Its just that it makes it more user friendly to be able to just download the notebook and run it on colab without any major changes, if possible.",
        "created_at": "2024-06-11T08:05:24Z",
        "updated_at": "2024-06-11T08:05:24Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634392802",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634392802"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634392802"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634392802/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 120,
        "side": "RIGHT",
        "in_reply_to_id": 1634387141,
        "original_position": 120,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634403211",
        "pull_request_review_id": 2109675457,
        "id": 1634403211,
        "node_id": "PRRC_kwDOLBF5j85hawOL",
        "diff_hunk": "@@ -0,0 +1,721 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 81,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/html\": [\n+       \"<details>\\n\",\n+       \"<summary>Click to view session information</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"aiohttp             3.9.5\\n\",\n+       \"bs4                 4.12.3\\n\",\n+       \"dotenv              NA\\n\",\n+       \"faiss               1.8.0\\n\",\n+       \"lxml                5.2.2\\n\",\n+       \"mistralai           NA\\n\",\n+       \"nest_asyncio        NA\\n\",\n+       \"numpy               1.26.4\\n\",\n+       \"pandas              2.2.2\\n\",\n+       \"requests            2.32.3\\n\",\n+       \"session_info        1.0.0\\n\",\n+       \"-----\\n\",\n+       \"</pre>\\n\",\n+       \"<details>\\n\",\n+       \"<summary>Click to view modules imported as dependencies</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"aiosignal           1.3.1\\n\",\n+       \"annotated_types     0.7.0\\n\",\n+       \"anyio               NA\\n\",\n+       \"appnope             0.1.4\\n\",\n+       \"asttokens           NA\\n\",\n+       \"async_timeout       4.0.3\\n\",\n+       \"attr                23.2.0\\n\",\n+       \"certifi             2024.06.02\\n\",\n+       \"charset_normalizer  3.3.2\\n\",\n+       \"comm                0.2.2\\n\",\n+       \"cython_runtime      NA\\n\",\n+       \"dateutil            2.9.0\\n\",\n+       \"debugpy             1.6.7\\n\",\n+       \"decorator           5.1.1\\n\",\n+       \"exceptiongroup      1.2.0\\n\",\n+       \"executing           2.0.1\\n\",\n+       \"frozenlist          1.4.1\\n\",\n+       \"h11                 0.14.0\\n\",\n+       \"httpcore            1.0.5\\n\",\n+       \"httpx               0.25.2\\n\",\n+       \"idna                3.7\\n\",\n+       \"ipykernel           6.29.4\\n\",\n+       \"jedi                0.19.1\\n\",\n+       \"multidict           6.0.5\\n\",\n+       \"orjson              3.10.4\\n\",\n+       \"packaging           24.0\\n\",\n+       \"parso               0.8.4\\n\",\n+       \"pickleshare         0.7.5\\n\",\n+       \"pkg_resources       NA\\n\",\n+       \"platformdirs        4.2.2\\n\",\n+       \"prompt_toolkit      3.0.47\\n\",\n+       \"psutil              5.9.0\\n\",\n+       \"pure_eval           0.2.2\\n\",\n+       \"pydantic            2.7.3\\n\",\n+       \"pydantic_core       2.18.4\\n\",\n+       \"pydev_ipython       NA\\n\",\n+       \"pydevconsole        NA\\n\",\n+       \"pydevd              2.9.5\\n\",\n+       \"pydevd_file_utils   NA\\n\",\n+       \"pydevd_plugins      NA\\n\",\n+       \"pydevd_tracing      NA\\n\",\n+       \"pygments            2.18.0\\n\",\n+       \"pytz                2024.1\\n\",\n+       \"six                 1.16.0\\n\",\n+       \"sniffio             1.3.1\\n\",\n+       \"soupsieve           2.5\\n\",\n+       \"stack_data          0.6.2\\n\",\n+       \"swig_runtime_data4  NA\\n\",\n+       \"tornado             6.3.3\\n\",\n+       \"traitlets           5.14.3\\n\",\n+       \"typing_extensions   NA\\n\",\n+       \"urllib3             2.2.1\\n\",\n+       \"vscode              NA\\n\",\n+       \"wcwidth             0.2.13\\n\",\n+       \"yarl                1.9.4\\n\",\n+       \"zmq                 25.1.2\\n\",\n+       \"zoneinfo            NA\\n\",\n+       \"</pre>\\n\",\n+       \"</details> <!-- seems like this ends pre, so might as well be explicit -->\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"IPython             8.25.0\\n\",\n+       \"jupyter_client      8.6.2\\n\",\n+       \"jupyter_core        5.5.0\\n\",\n+       \"-----\\n\",\n+       \"Python 3.10.14 (main, May  6 2024, 14:42:37) [Clang 14.0.6 ]\\n\",\n+       \"macOS-14.4-arm64-arm-64bit\\n\",\n+       \"-----\\n\",\n+       \"Session information updated at 2024-06-11 03:48\\n\",\n+       \"</pre>\\n\",\n+       \"</details>\"\n+      ],\n+      \"text/plain\": [\n+       \"<IPython.core.display.HTML object>\"\n+      ]\n+     },\n+     \"execution_count\": 81,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"import session_info\\n\",",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "eea83eeb46b69049e026f1766362c52f63d2f5fc",
        "user": {
          "login": "HugoLB0",
          "id": 66400773,
          "node_id": "MDQ6VXNlcjY2NDAwNzcz",
          "avatar_url": "https://avatars.githubusercontent.com/u/66400773?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/HugoLB0",
          "html_url": "https://github.com/HugoLB0",
          "followers_url": "https://api.github.com/users/HugoLB0/followers",
          "following_url": "https://api.github.com/users/HugoLB0/following{/other_user}",
          "gists_url": "https://api.github.com/users/HugoLB0/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/HugoLB0/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/HugoLB0/subscriptions",
          "organizations_url": "https://api.github.com/users/HugoLB0/orgs",
          "repos_url": "https://api.github.com/users/HugoLB0/repos",
          "events_url": "https://api.github.com/users/HugoLB0/events{/privacy}",
          "received_events_url": "https://api.github.com/users/HugoLB0/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "no problem I will remove it.",
        "created_at": "2024-06-11T08:12:26Z",
        "updated_at": "2024-06-11T08:12:26Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634403211",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634403211"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634403211"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634403211/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 120,
        "side": "RIGHT",
        "in_reply_to_id": 1634387141,
        "original_position": 120,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634403645",
        "pull_request_review_id": 2109676145,
        "id": 1634403645,
        "node_id": "PRRC_kwDOLBF5j85hawU9",
        "diff_hunk": "@@ -0,0 +1,721 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 81,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/html\": [\n+       \"<details>\\n\",\n+       \"<summary>Click to view session information</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"aiohttp             3.9.5\\n\",\n+       \"bs4                 4.12.3\\n\",\n+       \"dotenv              NA\\n\",\n+       \"faiss               1.8.0\\n\",\n+       \"lxml                5.2.2\\n\",\n+       \"mistralai           NA\\n\",\n+       \"nest_asyncio        NA\\n\",\n+       \"numpy               1.26.4\\n\",\n+       \"pandas              2.2.2\\n\",\n+       \"requests            2.32.3\\n\",\n+       \"session_info        1.0.0\\n\",\n+       \"-----\\n\",\n+       \"</pre>\\n\",\n+       \"<details>\\n\",\n+       \"<summary>Click to view modules imported as dependencies</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"aiosignal           1.3.1\\n\",\n+       \"annotated_types     0.7.0\\n\",\n+       \"anyio               NA\\n\",\n+       \"appnope             0.1.4\\n\",\n+       \"asttokens           NA\\n\",\n+       \"async_timeout       4.0.3\\n\",\n+       \"attr                23.2.0\\n\",\n+       \"certifi             2024.06.02\\n\",\n+       \"charset_normalizer  3.3.2\\n\",\n+       \"comm                0.2.2\\n\",\n+       \"cython_runtime      NA\\n\",\n+       \"dateutil            2.9.0\\n\",\n+       \"debugpy             1.6.7\\n\",\n+       \"decorator           5.1.1\\n\",\n+       \"exceptiongroup      1.2.0\\n\",\n+       \"executing           2.0.1\\n\",\n+       \"frozenlist          1.4.1\\n\",\n+       \"h11                 0.14.0\\n\",\n+       \"httpcore            1.0.5\\n\",\n+       \"httpx               0.25.2\\n\",\n+       \"idna                3.7\\n\",\n+       \"ipykernel           6.29.4\\n\",\n+       \"jedi                0.19.1\\n\",\n+       \"multidict           6.0.5\\n\",\n+       \"orjson              3.10.4\\n\",\n+       \"packaging           24.0\\n\",\n+       \"parso               0.8.4\\n\",\n+       \"pickleshare         0.7.5\\n\",\n+       \"pkg_resources       NA\\n\",\n+       \"platformdirs        4.2.2\\n\",\n+       \"prompt_toolkit      3.0.47\\n\",\n+       \"psutil              5.9.0\\n\",\n+       \"pure_eval           0.2.2\\n\",\n+       \"pydantic            2.7.3\\n\",\n+       \"pydantic_core       2.18.4\\n\",\n+       \"pydev_ipython       NA\\n\",\n+       \"pydevconsole        NA\\n\",\n+       \"pydevd              2.9.5\\n\",\n+       \"pydevd_file_utils   NA\\n\",\n+       \"pydevd_plugins      NA\\n\",\n+       \"pydevd_tracing      NA\\n\",\n+       \"pygments            2.18.0\\n\",\n+       \"pytz                2024.1\\n\",\n+       \"six                 1.16.0\\n\",\n+       \"sniffio             1.3.1\\n\",\n+       \"soupsieve           2.5\\n\",\n+       \"stack_data          0.6.2\\n\",\n+       \"swig_runtime_data4  NA\\n\",\n+       \"tornado             6.3.3\\n\",\n+       \"traitlets           5.14.3\\n\",\n+       \"typing_extensions   NA\\n\",\n+       \"urllib3             2.2.1\\n\",\n+       \"vscode              NA\\n\",\n+       \"wcwidth             0.2.13\\n\",\n+       \"yarl                1.9.4\\n\",\n+       \"zmq                 25.1.2\\n\",\n+       \"zoneinfo            NA\\n\",\n+       \"</pre>\\n\",\n+       \"</details> <!-- seems like this ends pre, so might as well be explicit -->\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"IPython             8.25.0\\n\",\n+       \"jupyter_client      8.6.2\\n\",\n+       \"jupyter_core        5.5.0\\n\",\n+       \"-----\\n\",\n+       \"Python 3.10.14 (main, May  6 2024, 14:42:37) [Clang 14.0.6 ]\\n\",\n+       \"macOS-14.4-arm64-arm-64bit\\n\",\n+       \"-----\\n\",\n+       \"Session information updated at 2024-06-11 03:48\\n\",\n+       \"</pre>\\n\",\n+       \"</details>\"\n+      ],\n+      \"text/plain\": [\n+       \"<IPython.core.display.HTML object>\"\n+      ]\n+     },\n+     \"execution_count\": 81,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"import session_info\\n\",\n+    \"session_info.show()\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"!pip install aiohttp bs4 faiss-cpu lxml mistralai nest_asyncio nest_asyncio pandas requests python-dotenv\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 80,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from dotenv import load_dotenv\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"load_dotenv()  # load environment variables from .env file\\n\",\n+    \"MISTRAL_API_KEY = os.getenv(\\\"MISTRAL_API_KEY\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Scraper Definitions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 46,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Exception ignored in: <function MistralClient.__del__ at 0x11efd1ab0>\\n\",\n+      \"Traceback (most recent call last):\\n\",\n+      \"  File \\\"/Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages/mistralai/client.py\\\", line 49, in __del__\\n\",\n+      \"    self._client.close()\\n\",\n+      \"AttributeError: 'MistralClient' object has no attribute '_client'\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"import aiohttp\\n\",\n+    \"import asyncio\\n\",\n+    \"import nest_asyncio\\n\",\n+    \"from bs4 import BeautifulSoup\\n\",\n+    \"from concurrent.futures import ThreadPoolExecutor\\n\",\n+    \"import requests\\n\",\n+    \"import re\\n\",\n+    \"import pandas as pd\\n\",\n+    \"import faiss\\n\",\n+    \"import numpy as np\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"from mistralai.models.chat_completion import ChatMessage\\n\",\n+    \"\\n\",\n+    \"# Apply the nest_asyncio patch\\n\",\n+    \"nest_asyncio.apply()\\n\",\n+    \"\\n\",\n+    \"headers = {\\n\",\n+    \"    \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\\\"\\n\",\n+    \"}\\n\",\n+    \"\\n\",\n+    \"total_results_to_fetch = 10  # total number of results to fetch\\n\",\n+    \"chunk_size = 1000  # size of each text chunk\\n\",\n+    \"\\n\",\n+    \"dataframe_out_path = 'temp.csv'\\n\",\n+    \"faiss_index_path = 'faiss_index.index'\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = MISTRAL_API_KEY  # replace with your actual API key\\n\",\n+    \"\\n\",\n+    \"async def fetch(session, url, params=None):\\n\",\n+    \"    async with session.get(url, params=params, headers=headers, timeout=30) as response:\\n\",\n+    \"        return await response.text()\\n\",\n+    \"\\n\",\n+    \"async def fetch_page(session, params, page_num, results):\\n\",\n+    \"    print(f\\\"Fetching page: {page_num}\\\")\\n\",\n+    \"    params[\\\"start\\\"] = (page_num - 1) * params[\\\"num\\\"]\\n\",\n+    \"    html = await fetch(session, \\\"https://www.google.com/search\\\", params)\\n\",\n+    \"    soup = BeautifulSoup(html, 'html.parser')\\n\",\n+    \"\\n\",\n+    \"    for result in soup.select(\\\".tF2Cxc\\\"):\\n\",\n+    \"        if len(results) >= total_results_to_fetch:\\n\",\n+    \"            break\\n\",\n+    \"        title = result.select_one(\\\".DKV0Md\\\").text\\n\",\n+    \"        links = result.select_one(\\\".yuRUbf a\\\")[\\\"href\\\"]\\n\",\n+    \"\\n\",\n+    \"        results.append({\\n\",\n+    \"            \\\"title\\\": title,\\n\",\n+    \"            \\\"links\\\": links\\n\",\n+    \"        })\\n\",\n+    \"\\n\",\n+    \"async def fetch_content(session, url):\\n\",\n+    \"    async with session.get(url, headers=headers, timeout=30) as response:\\n\",\n+    \"        return await response.text()\\n\",\n+    \"\\n\",\n+    \"async def fetch_all_content(urls):\\n\",\n+    \"    async with aiohttp.ClientSession() as session:\\n\",\n+    \"        tasks = [fetch_content(session, url) for url in urls]\\n\",\n+    \"        return await asyncio.gather(*tasks)\\n\",\n+    \"\\n\",\n+    \"def get_all_text_from_url(url):\\n\",\n+    \"    response = requests.get(url, headers=headers, timeout=30)\\n\",\n+    \"    soup = BeautifulSoup(response.text, 'html.parser')\\n\",\n+    \"    for script in soup([\\\"script\\\", \\\"style\\\"]):\\n\",\n+    \"        script.extract()\\n\",\n+    \"    text = soup.get_text()\\n\",\n+    \"    lines = (line.strip() for line in text.splitlines())\\n\",\n+    \"    chunks = (phrase.strip() for line in lines for phrase in line.split(\\\"  \\\"))\\n\",\n+    \"    text = '\\\\n'.join(chunk for chunk in chunks if chunk)\\n\",\n+    \"    return text\\n\",\n+    \"\\n\",\n+    \"def split_text_into_chunks(text, chunk_size):\\n\",\n+    \"    sentences = re.split(r'(?<=[.!?]) +', text)\\n\",\n+    \"    chunks = []\\n\",\n+    \"    current_chunk = []\\n\",\n+    \"\\n\",\n+    \"    for sentence in sentences:\\n\",\n+    \"        if sum(len(s) for s in current_chunk) + len(sentence) + 1 > chunk_size:\\n\",\n+    \"            chunks.append(' '.join(current_chunk))\\n\",\n+    \"            current_chunk = [sentence]\\n\",\n+    \"        else:\\n\",\n+    \"            current_chunk.append(sentence)\\n\",\n+    \"\\n\",\n+    \"    if current_chunk:\\n\",\n+    \"        chunks.append(' '.join(current_chunk))\\n\",\n+    \"\\n\",\n+    \"    return chunks\\n\",\n+    \"\\n\",\n+    \"async def process_text_content(texts, chunk_size):\\n\",\n+    \"    loop = asyncio.get_event_loop()\\n\",\n+    \"    tasks = [loop.run_in_executor(None, split_text_into_chunks, text, chunk_size) for text in texts]\\n\",\n+    \"    return await asyncio.gather(*tasks)\\n\",\n+    \"\\n\",\n+    \"async def get_embeddings_from_mistral(client, text_chunks):\\n\",\n+    \"    response = client.embeddings(model=\\\"mistral-embed\\\", input=text_chunks)\\n\",\n+    \"    return [embedding.embedding for embedding in response.data]\\n\",\n+    \"\\n\",\n+    \"async def fetch_and_process_data(search_query):\\n\",\n+    \"    client = MistralClient(api_key=mistral_api_key)\\n\",\n+    \"\\n\",\n+    \"    params = {\\n\",\n+    \"        \\\"q\\\": search_query,  # query example\\n\",\n+    \"        \\\"hl\\\": \\\"en\\\",         # language\\n\",\n+    \"        \\\"gl\\\": \\\"uk\\\",         # country of the search, UK -> United Kingdom\\n\",\n+    \"        \\\"start\\\": 0,         # number page by default up to 0\\n\",\n+    \"        \\\"num\\\": 10           # parameter defines the maximum number of results to return per page.\\n\",\n+    \"    }\\n\",\n+    \"    \\n\",\n+    \"    async with aiohttp.ClientSession() as session:\\n\",\n+    \"        page_num = 0\\n\",\n+    \"        results = []\\n\",\n+    \"        while len(results) < total_results_to_fetch:\\n\",\n+    \"            page_num += 1\\n\",\n+    \"            await fetch_page(session, params, page_num, results)\\n\",\n+    \"\\n\",\n+    \"        urls = [result['links'] for result in results]\\n\",\n+    \"\\n\",\n+    \"        with ThreadPoolExecutor(max_workers=10) as executor:\\n\",\n+    \"            loop = asyncio.get_event_loop()\\n\",\n+    \"            texts = await asyncio.gather(\\n\",\n+    \"                *[loop.run_in_executor(executor, get_all_text_from_url, url) for url in urls]\\n\",\n+    \"            )\\n\",\n+    \"\\n\",\n+    \"        chunks_list = await process_text_content(texts, chunk_size)\\n\",\n+    \"\\n\",\n+    \"        embeddings_list = []\\n\",\n+    \"        for chunks in chunks_list:\\n\",\n+    \"            embeddings = await get_embeddings_from_mistral(client, chunks)\\n\",\n+    \"            embeddings_list.append(embeddings)\\n\",\n+    \"\\n\",\n+    \"        data = []\\n\",\n+    \"        for i, result in enumerate(results):\\n\",\n+    \"            if i >= len(embeddings_list):\\n\",\n+    \"                print(f\\\"Error: No embeddings returned for result {i}\\\")\\n\",\n+    \"                continue\\n\",\n+    \"            for j, chunk in enumerate(chunks_list[i]):\\n\",\n+    \"                if j >= len(embeddings_list[i]):\\n\",\n+    \"                    print(f\\\"Error: No embedding returned for chunk {j} of result {i}\\\")\\n\",\n+    \"                    continue\\n\",\n+    \"                data.append({\\n\",\n+    \"                    'title': result['title'],\\n\",\n+    \"                    'url': result['links'],\\n\",\n+    \"                    'chunk': chunk,\\n\",\n+    \"                    'embedding': embeddings_list[i][j]\\n\",\n+    \"                })\\n\",\n+    \"\\n\",\n+    \"        df = pd.DataFrame(data)\\n\",\n+    \"        df.to_csv(dataframe_out_path, index=False)\\n\",\n+    \"\\n\",\n+    \"        # FAISS indexing\\n\",\n+    \"        dimension = len(embeddings_list[0][0])  # assuming all embeddings have the same dimension\\n\",\n+    \"        index = faiss.IndexFlatL2(dimension)\\n\",\n+    \"\\n\",\n+    \"        embeddings = np.array([entry['embedding'] for entry in data], dtype=np.float32)\\n\",\n+    \"        index.add(embeddings)\\n\",\n+    \"\\n\",\n+    \"        faiss.write_index(index, faiss_index_path)\\n\",\n+    \"\\n\",\n+    \"await fetch_and_process_data(\\\"What is the latest news about apple and openai?\\\")\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## little embeddings and vector store creation\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 47,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"[{'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': '\u201cThis is a method to allow Apple to make up for the fact that they haven\u2019t been focused on AI like they should have done over the last decade or so.\u201d Apple Intelligence was one of many announcements and updates from Apple\\\\non Monday, including a feature that lets AirPods Pro users nod yes or shake their heads no to Siri\u2019s questions when they are in crowded spaces. Additionally, the company announced that the\\\\nVision Pro headset will also be available in additional countries starting later this month, including mainland China, Hong Kong, Japan and Singapore.The company also unveiled a new feature called InSight for its tvOS18 that is similar to Amazon\u2019s X-Ray and shows the names of actors or a song playing on an Apple TV+ program.\\\\nCompany Town\\\\nScarlett Johansson also thinks OpenAI\u2019s new voice sounds like her. She\u2019s not happy about it\\\\nJohansson, who portrayed the voice of a computer program in \u2018Her,\u2019 was not behind OpenAI\u2019s \u2018Sky\u2019 voice assistant.'},\\n\",\n+       \" {'title': 'Apple doubles down on artificial intelligence, announcing ...',\\n\",\n+       \"  'url': 'https://www.npr.org/2024/06/10/nx-s1-4999051/apple-artificial-intelligence-partnership-openai-chatgpt-siri-iphone',\\n\",\n+       \"  'chunk': \\\"OpenAI itself has been embroiled in allegations of copying actor Scartlett Johansson\u2019s voice without her permission. Apple is also at the center of an antitrust lawsuit filed by the Justice Department and 15 states. The government accuses Apple of abusing its power as a monopoly to push out rivals and keep customers using its products. It\u2019s unclear how Apple\u2019s new partnership with OpenAI could play into this case. Shortly after Apple\u2019s announcement, OpenAI CEO Sam Altman posted on X, formerly known as Twitter, \u201cvery happy to be partnering with apple to integrate chatgpt into their devices later this year! think you will really like it.\u201d\\\\nApple is also rolling out what it calls Apple Intelligence, its term for Apple's own new generative AI software. Apple Intelligence will enable transcription for phone calls, AI photo retouching and improvements in the natural conversation flow with Siri, the company said.\\\"},\\n\",\n+       \" {'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': 'Tools made by San Francisco-based OpenAI have been used to create\\\\nmusic videos, read bedtime stories to children and help brainstorm ideas for writers. Companies including Microsoft and Google have aggressively incorporated AI into their products and services. Apple has often not been the first to market with new technological advances, choosing instead to enter new product categories \u2014 including smartphones and tablets \u2014 once they\u2019ve been established, leading to broader consumer adoption. For example, Apple only began selling its own virtual and augmented reality headset (known as Vision Pro) early this year.\\\\nApple said its AI capabilities were created with privacy protections in mind.'},\\n\",\n+       \" {'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': 'Apple announces deal with OpenAI. Will it be a game-changer? - Los Angeles Times\\\\nNews\\\\nHome Page\\\\nCalifornia\\\\nElection 2024\\\\nHousing & Homelessness\\\\nPolitics\\\\nScience & Medicine\\\\nWorld & Nation\\\\nBusiness\\\\nArtificial Intelligence\\\\nAutos\\\\nJobs, Labor & Workplace\\\\nReal Estate\\\\nTechnology and the Internet\\\\nCalifornia\\\\nCalifornia Politics\\\\nEarthquakes\\\\nEducation\\\\nHousing & Homelessness\\\\nL.A. Influential\\\\nL.A. Politics\\\\nMental Health\\\\nClimate & Environment\\\\nGlobal Warming\\\\nWater & Drought\\\\nEntertainment & Arts\\\\nArts\\\\nBooks\\\\nStand-Up Comedy\\\\nCompany Town\\\\nThe Envelope (Awards)\\\\nMovies\\\\nMusic\\\\nTelevision\\\\nThings to Do\\\\nDe Los\\\\nEn Espa\u00f1ol\\\\nFood\\\\n101 best restaurants in L.A.\\\\nRecipes\\\\nImage\\\\nLifestyle\\\\nHealth & Wellness\\\\nHome Design\\\\nL.A.'},\\n\",\n+       \" {'title': 'OpenAI and Apple announce partnership',\\n\",\n+       \"  'url': 'https://openai.com/index/openai-and-apple-announce-partnership/',\\n\",\n+       \"  'chunk': \\\"Together with Apple, we're making it easier for people to benefit from what AI can offer.Sam Altman, CEO of OpenAIAnnouncementsCompanyAuthorOpenAI Our researchOverviewIndexLatest advancementsGPT-4DALL\u00b7E 3SoraChatGPTFor EveryoneFor TeamsFor EnterprisesChatGPT login(opens in a new window)APIPlatform overviewPricingDocumentation(opens in a new window)API login(opens in a new window)Explore moreOpenAI for businessStoriesSafety overviewSafety overviewSafety standardsTeamsSafety SystemsPreparednessSuperalignmentCompanyAbout usNewsOur CharterSecurityResidencyCareersTerms & policiesTerms of usePrivacy policyBrand guidelinesOther policies OpenAI \u00a9 2015\u20132024(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)\\\"}]\"\n+      ]\n+     },\n+     \"execution_count\": 47,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"def query_vector_store(query_embedding, k=5):\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    Query the FAISS vector store and return the text results along with metadata.\\n\",\n+    \"\\n\",\n+    \"    :param query_embedding: The embedding to query with.\\n\",\n+    \"    :param k: Number of nearest neighbors to retrieve.\\n\",\n+    \"    :return: List of dictionaries containing text results and metadata of the k nearest neighbors.\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    # Load the index\\n\",\n+    \"\\n\",\n+    \"    index = faiss.read_index(faiss_index_path)\\n\",\n+    \"\\n\",\n+    \"    # Ensure the query embedding is a numpy array with the correct shape\\n\",\n+    \"    if not isinstance(query_embedding, np.ndarray):\\n\",\n+    \"        query_embedding = np.array(query_embedding, dtype=np.float32)\\n\",\n+    \"    if query_embedding.ndim == 1:\\n\",\n+    \"        query_embedding = np.expand_dims(query_embedding, axis=0)\\n\",\n+    \"\\n\",\n+    \"    # Query the index\\n\",\n+    \"    distances, indices = index.search(query_embedding, k)\\n\",\n+    \"    \\n\",\n+    \"    # Load the dataframe\\n\",\n+    \"    df = pd.read_csv(dataframe_out_path)\\n\",\n+    \"    \\n\",\n+    \"    # Retrieve the text results and metadata\\n\",\n+    \"    results = []\\n\",\n+    \"    for idx in indices[0]:\\n\",\n+    \"        result = {\\n\",\n+    \"            'title': df.iloc[idx]['title'],\\n\",\n+    \"            'url': df.iloc[idx]['url'],\\n\",\n+    \"            'chunk': df.iloc[idx]['chunk']\\n\",\n+    \"        }\\n\",\n+    \"        results.append(result)\\n\",\n+    \"    \\n\",\n+    \"    return results\\n\",\n+    \"\\n\",\n+    \"def query_embeddings(texts):\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    Convert text to embeddings using Mistral AI API.\\n\",\n+    \"\\n\",\n+    \"    :param api_key: Your Mistral API key.\\n\",\n+    \"    :param texts: List of texts to convert to embeddings.\\n\",\n+    \"    :return: List of embeddings.\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    client = MistralClient(api_key=MISTRAL_API_KEY)\\n\",\n+    \"    response = client.embeddings(model=\\\"mistral-embed\\\", input=[texts])\\n\",\n+    \"    return [embedding.embedding for embedding in response.data]\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"embeddings = query_embeddings(\\\"AGI\\\")\\n\",\n+    \"results = query_vector_store(embeddings[0], k=5)\\n\",\n+    \"results\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## tools definition\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 48,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\",\n+      \"[{'title': 'Microsoft partners with Mistral in second AI deal beyond ...', 'url': 'https://www.theverge.com/2024/2/26/24083510/microsoft-mistral-partnership-deal-azure-ai', 'chunk': '\u201cMistral Large achieves strong results on commonly used benchmarks, making it the world\u2019s second-ranked model generally available through an API (next to GPT-4),\u201d says the Mistral AI team.Mistral also has a new AI chatbotMistral Large is available on Mistral\u2019s own infrastructure, hosted in Europe, or through Azure AI Studio and Azure Machine Learning. Mistral Small will also be available today, offering improved latency over Mistral\u2019s 8x7B model. Mistral is also releasing a new conversational chatbot, Le Chat, that\u2019s based on various models from Mistral AI.Mistral\u2019s models have typically been open source, but the partnership with Microsoft means the French AI company can now explore more commercial opportunities. Neither Microsoft nor Mistral are disclosing details of the investment, though.Microsoft\u2019s investment comes months after a rocky period for its main AI partner, OpenAI.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'Something went wrong while submitting the form.PricingLog inSign upCase studies\\\\nHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsSaveSavedToday I\u00e2\\\\x80\\\\x99m diving deep into Mistral AI, who are making headlines after recently closing their (huge) Series A round. Launched just 7 months ago, they\u00e2\\\\x80\\\\x99re disrupting the LLM market. I want to look at how they\u00e2\\\\x80\\\\x99re doing it - and how you can take advantage.This post covers:What is Mistral?Who\u00e2\\\\x80\\\\x99s behind it?The timeline: What\u00e2\\\\x80\\\\x99s happened to dateFundraisingProduct OverviewA peek inside their seed deck \u00f0\\\\x9f\\\\x91\\\\x80 Roadmap analysis. Are they achieving what they set out to do?5 big reasons Mistral\u00e2\\\\x80\\\\x99s making waves \u00f0\\\\x9f\\\\x8c\\\\x8aHow people actually use MistralOpportunities and how you can take advantageWhat developers think of MistralWhat is Mistral?A French startup that develops fast, open-source and secure language models.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'As Mistral has been true to the promise of releasing open models, the community (and other companies) have taken Mistral\u00e2\\\\x80\\\\x99s models and created better models on top of them. For example, OpenHermes 2.5 by Teknium and Neural Chat 7B by Intel.With AI models, open source takes many forms: from available to use locally but no details about the model (weights, architecture etc.) to models that are fully open source and allow users to train on the outputs.While Mistral\u00e2\\\\x80\\\\x99s models were open-weights from the start, Mistral\u00e2\\\\x80\\\\x99s latest announcement had a line in their Terms of Service Terms of Service which was spotted by Far El on Twitter, said:Basically, you can\u00e2\\\\x80\\\\x99t use it to train or improve other models or compete against them\u00e2\\\\x80\u00a6It wasn\u00e2\\\\x80\\\\x99t clear whether this was just for the API platform or the model itself. And unfortunately, open-source means you should be able to use this tech how you like, that\u00e2\\\\x80\\\\x99s kind of the point.'}, {'title': 'Microsoft partners with Mistral in second AI deal beyond ...', 'url': 'https://www.theverge.com/2024/2/26/24083510/microsoft-mistral-partnership-deal-azure-ai', 'chunk': 'The Financial Times reports that the partnership will include Microsoft taking a minor stake in the 10-month-old AI company, just a little over a year after Microsoft invested more than $10 billion into its OpenAI partnership.The deal will see Mistral\u2019s open and commercial language models available on Microsoft\u2019s Azure AI platform, the second company to offer a commercial language model on Azure after OpenAI. Much like the OpenAI partnership, Microsoft\u2019s partnership with Mistral will also be focused on the development and deployment of next-generation large language models.Mistral is announcing a new AI model today, called Mistral Large. It\u2019s designed to more closely compete with OpenAI\u2019s GPT-4 model. Unlike some of Mistral\u2019s previous models, it won\u2019t be open source.'}, {'title': 'Microsoft partners with Mistral in second AI deal beyond ...', 'url': 'https://www.theverge.com/2024/2/26/24083510/microsoft-mistral-partnership-deal-azure-ai', 'chunk': 'Microsoft partners with Mistral in second AI deal beyond OpenAI - The VergeSkip to main contentThe VergeThe Verge logo.The Verge homepageThe Verge homepageThe VergeThe Verge logo./Tech/Reviews/Science/Entertainment/AI/MoreMenuExpandThe VergeThe Verge logo.MenuExpandMicrosoft/Tech/Artificial IntelligenceMicrosoft partners with Mistral in second AI deal beyond OpenAIMicrosoft partners with Mistral in second AI deal beyond OpenAI / Mistral has a Microsoft investment to help commercialize its new AI language models.By\\\\nTom Warren, a senior editor covering Microsoft, PC gaming, console, and tech. He founded WinRumors, a site dedicated to Microsoft news, before joining The Verge in 2012. Feb 26, 2024, 3:23 PM UTCShare this story Illustration: The VergeMicrosoft has announced a new multiyear partnership with Mistral, a French AI startup that\u2019s valued at \u20ac2 billion (about $2.1 billion).'}]\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"\\n\",\n+    \"nest_asyncio.apply()\\n\",\n+    \"\\n\",\n+    \"tools = [\\n\",\n+    \"    {\\n\",\n+    \"        \\\"type\\\": \\\"function\\\",\\n\",\n+    \"        \\\"function\\\": {\\n\",\n+    \"            \\\"name\\\": \\\"mistral_web_search\\\",\\n\",\n+    \"            \\\"description\\\": \\\"Fetch and process data from Google search based on a query, store results in FAISS vector store, and retrieve results.\\\",\\n\",\n+    \"            \\\"parameters\\\": {\\n\",\n+    \"                \\\"type\\\": \\\"object\\\",\\n\",\n+    \"                \\\"properties\\\": {\\n\",\n+    \"                    \\\"search_query\\\": {\\n\",\n+    \"                        \\\"type\\\": \\\"string\\\",\\n\",\n+    \"                        \\\"description\\\": \\\"The search query to use for fetching data from Google search.\\\"\\n\",\n+    \"                    }\\n\",\n+    \"                },\\n\",\n+    \"                \\\"required\\\": [\\\"search_query\\\"]\\n\",\n+    \"            },\\n\",\n+    \"        },\\n\",\n+    \"    },\\n\",\n+    \"]\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def mistral_web_search(search_query: str):\\n\",\n+    \"    async def run_search():\\n\",\n+    \"        await fetch_and_process_data(search_query)\\n\",\n+    \"        embeddings = query_embeddings(search_query)\\n\",\n+    \"        results_ = query_vector_store(embeddings[0], k=5)\\n\",\n+    \"        return results_\\n\",\n+    \"\\n\",\n+    \"    return asyncio.run(run_search())\\n\",\n+    \"\\n\",\n+    \"search_query = \\\"mistral and openai\\\"\\n\",\n+    \"results = mistral_web_search(search_query)\\n\",\n+    \"print(results)\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 49,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"'\u201cMistral Large achieves strong results on commonly used benchmarks, making it the world\u2019s second-ranked model generally available through an API (next to GPT-4),\u201d says the Mistral AI team.Mistral also has a new AI chatbotMistral Large is available on Mistral\u2019s own infrastructure, hosted in Europe, or through Azure AI Studio and Azure Machine Learning. Mistral Small will also be available today, offering improved latency over Mistral\u2019s 8x7B model. Mistral is also releasing a new conversational chatbot, Le Chat, that\u2019s based on various models from Mistral AI.Mistral\u2019s models have typically been open source, but the partnership with Microsoft means the French AI company can now explore more commercial opportunities. Neither Microsoft nor Mistral are disclosing details of the investment, though.Microsoft\u2019s investment comes months after a rocky period for its main AI partner, OpenAI.\\\\nSomething went wrong while submitting the form.PricingLog inSign upCase studies\\\\nHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsSaveSavedToday I\u00e2\\\\x80\\\\x99m diving deep into Mistral AI, who are making headlines after recently closing their (huge) Series A round. Launched just 7 months ago, they\u00e2\\\\x80\\\\x99re disrupting the LLM market. I want to look at how they\u00e2\\\\x80\\\\x99re doing it - and how you can take advantage.This post covers:What is Mistral?Who\u00e2\\\\x80\\\\x99s behind it?The timeline: What\u00e2\\\\x80\\\\x99s happened to dateFundraisingProduct OverviewA peek inside their seed deck \u00f0\\\\x9f\\\\x91\\\\x80 Roadmap analysis. Are they achieving what they set out to do?5 big reasons Mistral\u00e2\\\\x80\\\\x99s making waves \u00f0\\\\x9f\\\\x8c\\\\x8aHow people actually use MistralOpportunities and how you can take advantageWhat developers think of MistralWhat is Mistral?A French startup that develops fast, open-source and secure language models.\\\\nAs Mistral has been true to the promise of releasing open models, the community (and other companies) have taken Mistral\u00e2\\\\x80\\\\x99s models and created better models on top of them. For example, OpenHermes 2.5 by Teknium and Neural Chat 7B by Intel.With AI models, open source takes many forms: from available to use locally but no details about the model (weights, architecture etc.) to models that are fully open source and allow users to train on the outputs.While Mistral\u00e2\\\\x80\\\\x99s models were open-weights from the start, Mistral\u00e2\\\\x80\\\\x99s latest announcement had a line in their Terms of Service Terms of Service which was spotted by Far El on Twitter, said:Basically, you can\u00e2\\\\x80\\\\x99t use it to train or improve other models or compete against them\u00e2\\\\x80\u00a6It wasn\u00e2\\\\x80\\\\x99t clear whether this was just for the API platform or the model itself. And unfortunately, open-source means you should be able to use this tech how you like, that\u00e2\\\\x80\\\\x99s kind of the point.\\\\nThe Financial Times reports that the partnership will include Microsoft taking a minor stake in the 10-month-old AI company, just a little over a year after Microsoft invested more than $10 billion into its OpenAI partnership.The deal will see Mistral\u2019s open and commercial language models available on Microsoft\u2019s Azure AI platform, the second company to offer a commercial language model on Azure after OpenAI. Much like the OpenAI partnership, Microsoft\u2019s partnership with Mistral will also be focused on the development and deployment of next-generation large language models.Mistral is announcing a new AI model today, called Mistral Large. It\u2019s designed to more closely compete with OpenAI\u2019s GPT-4 model. Unlike some of Mistral\u2019s previous models, it won\u2019t be open source.\\\\nMicrosoft partners with Mistral in second AI deal beyond OpenAI - The VergeSkip to main contentThe VergeThe Verge logo.The Verge homepageThe Verge homepageThe VergeThe Verge logo./Tech/Reviews/Science/Entertainment/AI/MoreMenuExpandThe VergeThe Verge logo.MenuExpandMicrosoft/Tech/Artificial IntelligenceMicrosoft partners with Mistral in second AI deal beyond OpenAIMicrosoft partners with Mistral in second AI deal beyond OpenAI / Mistral has a Microsoft investment to help commercialize its new AI language models.By\\\\nTom Warren, a senior editor covering Microsoft, PC gaming, console, and tech. He founded WinRumors, a site dedicated to Microsoft news, before joining The Verge in 2012. Feb 26, 2024, 3:23 PM UTCShare this story Illustration: The VergeMicrosoft has announced a new multiyear partnership with Mistral, a French AI startup that\u2019s valued at \u20ac2 billion (about $2.1 billion).'\"\n+      ]\n+     },\n+     \"execution_count\": 49,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"\\\"\\\"\\\" little helper function to extract only the texts \\\"\\\"\\\"\\n\",\n+    \"def tools_to_str(tools_output: list) -> str:\\n\",\n+    \"    return '\\\\n'.join([tool['chunk'] for tool in tools_output])\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"tools_to_str(mistral_web_search(search_query))\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 50,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import functools\\n\",\n+    \"\\n\",\n+    \"names_to_functions = {\\n\",\n+    \"    'mistral_web_search': functools.partial(mistral_web_search),\\n\",\n+    \"}\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## chat\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 6,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages = [\\n\",\n+    \"    ChatMessage(role=\\\"user\\\", content=\\\"What happend during apple WWDC 2024?\\\"),\\n\",\n+    \"]\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 7,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"ChatCompletionResponse(id='fb0585bb35c449899283753361aebc7a', object='chat.completion', created=1718068657, model='mistral-large-latest', choices=[ChatCompletionResponseChoice(index=0, message=ChatMessage(role='assistant', content='', name=None, tool_calls=[ToolCall(id='SMqSja1Y4', type=<ToolType.function: 'function'>, function=FunctionCall(name='mistral_web_search', arguments='{\\\"search_query\\\": \\\"apple WWDC 2024\\\"}'))], tool_call_id=None), finish_reason=<FinishReason.tool_calls: 'tool_calls'>)], usage=UsageInfo(prompt_tokens=121, total_tokens=156, completion_tokens=35))\"\n+      ]\n+     },\n+     \"execution_count\": 7,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"model = \\\"mistral-large-latest\\\"\\n\",\n+    \"\\n\",\n+    \"client = MistralClient(api_key=MISTRAL_API_KEY)\\n\",\n+    \"response = client.chat(model=model, messages=messages, tools=tools, tool_choice=\\\"auto\\\")\\n\",\n+    \"response\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages.append(response.choices[0].message)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"\\n\",\n+      \"function_name:  mistral_web_search \\n\",\n+      \"function_params:  {'search_query': 'apple WWDC 2024'}\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"import json\\n\",\n+    \"\\n\",\n+    \"tool_call = response.choices[0].message.tool_calls[0]\\n\",\n+    \"function_name = tool_call.function.name\\n\",\n+    \"function_params = json.loads(tool_call.function.arguments)\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"print(\\\"\\\\nfunction_name: \\\", function_name, \\\"\\\\nfunction_params: \\\", function_params)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 21,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"\\\"Apple Intelligence Revealed at WWDC 2024 as Company Jumps Into AI Race - The New York Times\\\\nSkip to contentSkip to site indexTechnology\\\\xa0Today\u2019s PaperArtificial IntelligenceApple Enters A.I. FrayMeta\u2019s A.I. ScrapingHumane\u2019s A.I. Device FlopOpenAI\u2019s \u2018Reckless\u2019 CultureThe New ChatGPTFaces QuizAdvertisementSKIP ADVERTISEMENTYou have a preview view of this article while we are checking your access. When we have confirmed access, the full article content will load.Artificial IntelligenceApple Enters A.I. FrayMeta\u2019s A.I. ScrapingHumane\u2019s A.I. Device FlopOpenAI\u2019s \u2018Reckless\u2019 CultureThe New ChatGPTFaces QuizSupported bySKIP ADVERTISEMENTApple Jumps Into A.I.\\\\nSigal Samuel, a senior tech reporter for Vox, unpacks what's going on with the company.Apple uses the developer conference at its Cupertino, Calif., headquarters each year to showcase updates to its own apps and operating systems, as well as to show developers new tools they will be able to use in their apps.The company\\\\xa0has been using AI behind the scenes for years to power features on its devices, such as the ability of its watches to detect crashes and falls.\\\\nMicrosoft took an early lead in the race to commercialize AI through its bet on OpenAI.The AI features were unveiled at Apple's\\\\xa0Worldwide Developers Conference, and the tech giant\\\\xa0also showed its latest operating system for its Vision Pro mixed-reality headset and iPhone.WATCH | Apple launches Apple Intelligence to integrate AI across its apps:Apple announces Apple Intelligence4 hours agoDuration 0:45Partnering with artificial intelligence company OpenAI, Apple announced its iPhones would begin adding AI features.\\\\n(Associated Press)\\\\nBy Wendy LeeStaff Writer\\\\nJune 10, 2024\\\\nUpdated\\\\xa02:06 PM PT\\\\nFacebook\\\\nTwitter\\\\nShow more sharing options\\\\nShare Close extra sharing options\\\\nFacebook\\\\nTwitter\\\\nLinkedIn\\\\nEmail\\\\nCopy Link URLCopied!\\\\nPrint\\\\nApple is finally taking the plunge on AI. The company on Monday unveiled a suite of new artificial intelligence capabilities that will be available in its newest operating system, including connecting its interactive voice feature Siri with OpenAI\u2019s ChatGPT in a major deal that could supercharge adoption of the fast-developing technology.Siri, for example, will be able to surface answers from ChatGPT for Apple devices and provide relevant contextual information across several apps, the Cupertino, Calif., tech giant said at its highly anticipated developer conference.\\\\n(Jeff Chiu/AP)Listen6 minShareComment on this storyCommentAdd to your saved storiesSaveSAN FRANCISCO \u2014 Apple officially launched itself into the artificial intelligence arms race, announcing a deal with ChatGPT maker OpenAI to use the company\u2019s technology in its products and showing off a slew of its own new AI features.The announcements, made at the tech giant\u2019s annual Worldwide Developers Conference on Monday in Cupertino, Calif., are aimed at helping the tech giant keep up with competitors such as Google and Microsoft, which have boasted in recent months that AI makes their phones, laptops and software better than Apple\u2019s. In addition to Apple\u2019s own homegrown AI tech, the company\u2019s phones, computers and iPads will also have ChatGPT built in \u201clater this year,\u201d a huge validation of the importance of the highflying start-up\u2019s tech.\\\"\"\n+      ]\n+     },\n+     \"execution_count\": 21,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"function_result = tools_to_str(names_to_functions[function_name](**function_params))\\n\",\n+    \"function_result\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 22,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"\\\"At the Apple Worldwide Developers Conference (WWDC) in 2024, Apple made several significant announcements related to artificial intelligence (AI). The tech giant unveiled a suite of new AI capabilities to be integrated into its newest operating system. A notable development was the collaboration with OpenAI's ChatGPT, which aimed to enhance the functionality of Siri, Apple's interactive voice feature. This integration would allow Siri to provide more relevant and contextual information across various apps on Apple devices.\\\\n\\\\nThe partnership with OpenAI was seen as a major move to stay competitive with other industry leaders like Google and Microsoft, who had been emphasizing AI integration in their products. Additionally, it was announced that ChatGPT would be built into Apple's phones, computers, and iPads later in the year. This marked a significant step for Apple in the AI race, as they had been utilizing AI behind the scenes for years to power features on their devices.\\\\n\\\\nDuring the WWDC 2024, Apple also showcased updates to its own apps and operating systems, as well as new tools for developers to use in their apps. The conference was held at Apple's Cupertino, California headquarters, and demonstrated the company's commitment to advancing AI technology in its products.\\\"\"\n+      ]\n+     },\n+     \"execution_count\": 22,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"messages.append(ChatMessage(role=\\\"tool\\\", name=function_name, content=function_result, tool_call_id=tool_call.id))\\n\",\n+    \"\\n\",\n+    \"response = client.chat(model=model, messages=messages)\\n\",\n+    \"response.choices[0].message.content\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Chat in a chain (cleaner user experience)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages = []\\n\",\n+    \"\\n\",\n+    \"while True:\\n\",\n+    \"    input_ = input(\\\"Ask: \\\")\\n\",\n+    \"    messages.append(ChatMessage(role=\\\"user\\\", content=input_))\\n\",\n+    \"    response = client.chat(model=model, messages=messages, tools=tools, tool_choice=\\\"auto\\\")\\n\",",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "eea83eeb46b69049e026f1766362c52f63d2f5fc",
        "user": {
          "login": "HugoLB0",
          "id": 66400773,
          "node_id": "MDQ6VXNlcjY2NDAwNzcz",
          "avatar_url": "https://avatars.githubusercontent.com/u/66400773?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/HugoLB0",
          "html_url": "https://github.com/HugoLB0",
          "followers_url": "https://api.github.com/users/HugoLB0/followers",
          "following_url": "https://api.github.com/users/HugoLB0/following{/other_user}",
          "gists_url": "https://api.github.com/users/HugoLB0/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/HugoLB0/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/HugoLB0/subscriptions",
          "organizations_url": "https://api.github.com/users/HugoLB0/orgs",
          "repos_url": "https://api.github.com/users/HugoLB0/repos",
          "events_url": "https://api.github.com/users/HugoLB0/events{/privacy}",
          "received_events_url": "https://api.github.com/users/HugoLB0/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "I can force the tool choice.",
        "created_at": "2024-06-11T08:12:43Z",
        "updated_at": "2024-06-11T08:12:43Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634403645",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634403645"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634403645"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634403645/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 682,
        "side": "RIGHT",
        "in_reply_to_id": 1634391588,
        "original_position": 682,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634428475",
        "pull_request_review_id": 2109717017,
        "id": 1634428475,
        "node_id": "PRRC_kwDOLBF5j85ha2Y7",
        "diff_hunk": "@@ -0,0 +1,721 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 81,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/html\": [\n+       \"<details>\\n\",\n+       \"<summary>Click to view session information</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"aiohttp             3.9.5\\n\",\n+       \"bs4                 4.12.3\\n\",\n+       \"dotenv              NA\\n\",\n+       \"faiss               1.8.0\\n\",\n+       \"lxml                5.2.2\\n\",\n+       \"mistralai           NA\\n\",\n+       \"nest_asyncio        NA\\n\",\n+       \"numpy               1.26.4\\n\",\n+       \"pandas              2.2.2\\n\",\n+       \"requests            2.32.3\\n\",\n+       \"session_info        1.0.0\\n\",\n+       \"-----\\n\",\n+       \"</pre>\\n\",\n+       \"<details>\\n\",\n+       \"<summary>Click to view modules imported as dependencies</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"aiosignal           1.3.1\\n\",\n+       \"annotated_types     0.7.0\\n\",\n+       \"anyio               NA\\n\",\n+       \"appnope             0.1.4\\n\",\n+       \"asttokens           NA\\n\",\n+       \"async_timeout       4.0.3\\n\",\n+       \"attr                23.2.0\\n\",\n+       \"certifi             2024.06.02\\n\",\n+       \"charset_normalizer  3.3.2\\n\",\n+       \"comm                0.2.2\\n\",\n+       \"cython_runtime      NA\\n\",\n+       \"dateutil            2.9.0\\n\",\n+       \"debugpy             1.6.7\\n\",\n+       \"decorator           5.1.1\\n\",\n+       \"exceptiongroup      1.2.0\\n\",\n+       \"executing           2.0.1\\n\",\n+       \"frozenlist          1.4.1\\n\",\n+       \"h11                 0.14.0\\n\",\n+       \"httpcore            1.0.5\\n\",\n+       \"httpx               0.25.2\\n\",\n+       \"idna                3.7\\n\",\n+       \"ipykernel           6.29.4\\n\",\n+       \"jedi                0.19.1\\n\",\n+       \"multidict           6.0.5\\n\",\n+       \"orjson              3.10.4\\n\",\n+       \"packaging           24.0\\n\",\n+       \"parso               0.8.4\\n\",\n+       \"pickleshare         0.7.5\\n\",\n+       \"pkg_resources       NA\\n\",\n+       \"platformdirs        4.2.2\\n\",\n+       \"prompt_toolkit      3.0.47\\n\",\n+       \"psutil              5.9.0\\n\",\n+       \"pure_eval           0.2.2\\n\",\n+       \"pydantic            2.7.3\\n\",\n+       \"pydantic_core       2.18.4\\n\",\n+       \"pydev_ipython       NA\\n\",\n+       \"pydevconsole        NA\\n\",\n+       \"pydevd              2.9.5\\n\",\n+       \"pydevd_file_utils   NA\\n\",\n+       \"pydevd_plugins      NA\\n\",\n+       \"pydevd_tracing      NA\\n\",\n+       \"pygments            2.18.0\\n\",\n+       \"pytz                2024.1\\n\",\n+       \"six                 1.16.0\\n\",\n+       \"sniffio             1.3.1\\n\",\n+       \"soupsieve           2.5\\n\",\n+       \"stack_data          0.6.2\\n\",\n+       \"swig_runtime_data4  NA\\n\",\n+       \"tornado             6.3.3\\n\",\n+       \"traitlets           5.14.3\\n\",\n+       \"typing_extensions   NA\\n\",\n+       \"urllib3             2.2.1\\n\",\n+       \"vscode              NA\\n\",\n+       \"wcwidth             0.2.13\\n\",\n+       \"yarl                1.9.4\\n\",\n+       \"zmq                 25.1.2\\n\",\n+       \"zoneinfo            NA\\n\",\n+       \"</pre>\\n\",\n+       \"</details> <!-- seems like this ends pre, so might as well be explicit -->\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"IPython             8.25.0\\n\",\n+       \"jupyter_client      8.6.2\\n\",\n+       \"jupyter_core        5.5.0\\n\",\n+       \"-----\\n\",\n+       \"Python 3.10.14 (main, May  6 2024, 14:42:37) [Clang 14.0.6 ]\\n\",\n+       \"macOS-14.4-arm64-arm-64bit\\n\",\n+       \"-----\\n\",\n+       \"Session information updated at 2024-06-11 03:48\\n\",\n+       \"</pre>\\n\",\n+       \"</details>\"\n+      ],\n+      \"text/plain\": [\n+       \"<IPython.core.display.HTML object>\"\n+      ]\n+     },\n+     \"execution_count\": 81,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"import session_info\\n\",\n+    \"session_info.show()\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"!pip install aiohttp bs4 faiss-cpu lxml mistralai nest_asyncio nest_asyncio pandas requests python-dotenv\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 80,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from dotenv import load_dotenv\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"load_dotenv()  # load environment variables from .env file\\n\",\n+    \"MISTRAL_API_KEY = os.getenv(\\\"MISTRAL_API_KEY\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Scraper Definitions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 46,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Exception ignored in: <function MistralClient.__del__ at 0x11efd1ab0>\\n\",\n+      \"Traceback (most recent call last):\\n\",\n+      \"  File \\\"/Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages/mistralai/client.py\\\", line 49, in __del__\\n\",\n+      \"    self._client.close()\\n\",\n+      \"AttributeError: 'MistralClient' object has no attribute '_client'\\n\"",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "eea83eeb46b69049e026f1766362c52f63d2f5fc",
        "user": {
          "login": "HugoLB0",
          "id": 66400773,
          "node_id": "MDQ6VXNlcjY2NDAwNzcz",
          "avatar_url": "https://avatars.githubusercontent.com/u/66400773?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/HugoLB0",
          "html_url": "https://github.com/HugoLB0",
          "followers_url": "https://api.github.com/users/HugoLB0/followers",
          "following_url": "https://api.github.com/users/HugoLB0/following{/other_user}",
          "gists_url": "https://api.github.com/users/HugoLB0/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/HugoLB0/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/HugoLB0/subscriptions",
          "organizations_url": "https://api.github.com/users/HugoLB0/orgs",
          "repos_url": "https://api.github.com/users/HugoLB0/repos",
          "events_url": "https://api.github.com/users/HugoLB0/events{/privacy}",
          "received_events_url": "https://api.github.com/users/HugoLB0/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Hello, I ran it again and wasn't able to reproduce this error. Do you have more indications ?",
        "created_at": "2024-06-11T08:29:22Z",
        "updated_at": "2024-06-11T08:29:22Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634428475",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634428475"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634428475"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634428475/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 174,
        "side": "RIGHT",
        "in_reply_to_id": 1634390613,
        "original_position": 174,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634453273",
        "pull_request_review_id": 2109757859,
        "id": 1634453273,
        "node_id": "PRRC_kwDOLBF5j85ha8cZ",
        "diff_hunk": "@@ -0,0 +1,721 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 81,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/html\": [\n+       \"<details>\\n\",\n+       \"<summary>Click to view session information</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"aiohttp             3.9.5\\n\",\n+       \"bs4                 4.12.3\\n\",\n+       \"dotenv              NA\\n\",\n+       \"faiss               1.8.0\\n\",\n+       \"lxml                5.2.2\\n\",\n+       \"mistralai           NA\\n\",\n+       \"nest_asyncio        NA\\n\",\n+       \"numpy               1.26.4\\n\",\n+       \"pandas              2.2.2\\n\",\n+       \"requests            2.32.3\\n\",\n+       \"session_info        1.0.0\\n\",\n+       \"-----\\n\",\n+       \"</pre>\\n\",\n+       \"<details>\\n\",\n+       \"<summary>Click to view modules imported as dependencies</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"aiosignal           1.3.1\\n\",\n+       \"annotated_types     0.7.0\\n\",\n+       \"anyio               NA\\n\",\n+       \"appnope             0.1.4\\n\",\n+       \"asttokens           NA\\n\",\n+       \"async_timeout       4.0.3\\n\",\n+       \"attr                23.2.0\\n\",\n+       \"certifi             2024.06.02\\n\",\n+       \"charset_normalizer  3.3.2\\n\",\n+       \"comm                0.2.2\\n\",\n+       \"cython_runtime      NA\\n\",\n+       \"dateutil            2.9.0\\n\",\n+       \"debugpy             1.6.7\\n\",\n+       \"decorator           5.1.1\\n\",\n+       \"exceptiongroup      1.2.0\\n\",\n+       \"executing           2.0.1\\n\",\n+       \"frozenlist          1.4.1\\n\",\n+       \"h11                 0.14.0\\n\",\n+       \"httpcore            1.0.5\\n\",\n+       \"httpx               0.25.2\\n\",\n+       \"idna                3.7\\n\",\n+       \"ipykernel           6.29.4\\n\",\n+       \"jedi                0.19.1\\n\",\n+       \"multidict           6.0.5\\n\",\n+       \"orjson              3.10.4\\n\",\n+       \"packaging           24.0\\n\",\n+       \"parso               0.8.4\\n\",\n+       \"pickleshare         0.7.5\\n\",\n+       \"pkg_resources       NA\\n\",\n+       \"platformdirs        4.2.2\\n\",\n+       \"prompt_toolkit      3.0.47\\n\",\n+       \"psutil              5.9.0\\n\",\n+       \"pure_eval           0.2.2\\n\",\n+       \"pydantic            2.7.3\\n\",\n+       \"pydantic_core       2.18.4\\n\",\n+       \"pydev_ipython       NA\\n\",\n+       \"pydevconsole        NA\\n\",\n+       \"pydevd              2.9.5\\n\",\n+       \"pydevd_file_utils   NA\\n\",\n+       \"pydevd_plugins      NA\\n\",\n+       \"pydevd_tracing      NA\\n\",\n+       \"pygments            2.18.0\\n\",\n+       \"pytz                2024.1\\n\",\n+       \"six                 1.16.0\\n\",\n+       \"sniffio             1.3.1\\n\",\n+       \"soupsieve           2.5\\n\",\n+       \"stack_data          0.6.2\\n\",\n+       \"swig_runtime_data4  NA\\n\",\n+       \"tornado             6.3.3\\n\",\n+       \"traitlets           5.14.3\\n\",\n+       \"typing_extensions   NA\\n\",\n+       \"urllib3             2.2.1\\n\",\n+       \"vscode              NA\\n\",\n+       \"wcwidth             0.2.13\\n\",\n+       \"yarl                1.9.4\\n\",\n+       \"zmq                 25.1.2\\n\",\n+       \"zoneinfo            NA\\n\",\n+       \"</pre>\\n\",\n+       \"</details> <!-- seems like this ends pre, so might as well be explicit -->\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"IPython             8.25.0\\n\",\n+       \"jupyter_client      8.6.2\\n\",\n+       \"jupyter_core        5.5.0\\n\",\n+       \"-----\\n\",\n+       \"Python 3.10.14 (main, May  6 2024, 14:42:37) [Clang 14.0.6 ]\\n\",\n+       \"macOS-14.4-arm64-arm-64bit\\n\",\n+       \"-----\\n\",\n+       \"Session information updated at 2024-06-11 03:48\\n\",\n+       \"</pre>\\n\",\n+       \"</details>\"\n+      ],\n+      \"text/plain\": [\n+       \"<IPython.core.display.HTML object>\"\n+      ]\n+     },\n+     \"execution_count\": 81,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"import session_info\\n\",\n+    \"session_info.show()\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"!pip install aiohttp bs4 faiss-cpu lxml mistralai nest_asyncio nest_asyncio pandas requests python-dotenv\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 80,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from dotenv import load_dotenv\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"load_dotenv()  # load environment variables from .env file\\n\",\n+    \"MISTRAL_API_KEY = os.getenv(\\\"MISTRAL_API_KEY\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Scraper Definitions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 46,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Exception ignored in: <function MistralClient.__del__ at 0x11efd1ab0>\\n\",\n+      \"Traceback (most recent call last):\\n\",\n+      \"  File \\\"/Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages/mistralai/client.py\\\", line 49, in __del__\\n\",\n+      \"    self._client.close()\\n\",\n+      \"AttributeError: 'MistralClient' object has no attribute '_client'\\n\"",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "eea83eeb46b69049e026f1766362c52f63d2f5fc",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "It seems the error was fixed by itself, weirdly...\r\nBtw, if possible keep the !pip install for the rest of the required libraries!\r\nOtherwise I think everything is alright.",
        "created_at": "2024-06-11T08:46:19Z",
        "updated_at": "2024-06-11T08:46:19Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634453273",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634453273"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634453273"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634453273/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 174,
        "side": "RIGHT",
        "in_reply_to_id": 1634390613,
        "original_position": 174,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634469469",
        "pull_request_review_id": 2109783227,
        "id": 1634469469,
        "node_id": "PRRC_kwDOLBF5j85hbAZd",
        "diff_hunk": "@@ -0,0 +1,721 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 81,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/html\": [\n+       \"<details>\\n\",\n+       \"<summary>Click to view session information</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"aiohttp             3.9.5\\n\",\n+       \"bs4                 4.12.3\\n\",\n+       \"dotenv              NA\\n\",\n+       \"faiss               1.8.0\\n\",\n+       \"lxml                5.2.2\\n\",\n+       \"mistralai           NA\\n\",\n+       \"nest_asyncio        NA\\n\",\n+       \"numpy               1.26.4\\n\",\n+       \"pandas              2.2.2\\n\",\n+       \"requests            2.32.3\\n\",\n+       \"session_info        1.0.0\\n\",\n+       \"-----\\n\",\n+       \"</pre>\\n\",\n+       \"<details>\\n\",\n+       \"<summary>Click to view modules imported as dependencies</summary>\\n\",\n+       \"<pre>\\n\",\n+       \"aiosignal           1.3.1\\n\",\n+       \"annotated_types     0.7.0\\n\",\n+       \"anyio               NA\\n\",\n+       \"appnope             0.1.4\\n\",\n+       \"asttokens           NA\\n\",\n+       \"async_timeout       4.0.3\\n\",\n+       \"attr                23.2.0\\n\",\n+       \"certifi             2024.06.02\\n\",\n+       \"charset_normalizer  3.3.2\\n\",\n+       \"comm                0.2.2\\n\",\n+       \"cython_runtime      NA\\n\",\n+       \"dateutil            2.9.0\\n\",\n+       \"debugpy             1.6.7\\n\",\n+       \"decorator           5.1.1\\n\",\n+       \"exceptiongroup      1.2.0\\n\",\n+       \"executing           2.0.1\\n\",\n+       \"frozenlist          1.4.1\\n\",\n+       \"h11                 0.14.0\\n\",\n+       \"httpcore            1.0.5\\n\",\n+       \"httpx               0.25.2\\n\",\n+       \"idna                3.7\\n\",\n+       \"ipykernel           6.29.4\\n\",\n+       \"jedi                0.19.1\\n\",\n+       \"multidict           6.0.5\\n\",\n+       \"orjson              3.10.4\\n\",\n+       \"packaging           24.0\\n\",\n+       \"parso               0.8.4\\n\",\n+       \"pickleshare         0.7.5\\n\",\n+       \"pkg_resources       NA\\n\",\n+       \"platformdirs        4.2.2\\n\",\n+       \"prompt_toolkit      3.0.47\\n\",\n+       \"psutil              5.9.0\\n\",\n+       \"pure_eval           0.2.2\\n\",\n+       \"pydantic            2.7.3\\n\",\n+       \"pydantic_core       2.18.4\\n\",\n+       \"pydev_ipython       NA\\n\",\n+       \"pydevconsole        NA\\n\",\n+       \"pydevd              2.9.5\\n\",\n+       \"pydevd_file_utils   NA\\n\",\n+       \"pydevd_plugins      NA\\n\",\n+       \"pydevd_tracing      NA\\n\",\n+       \"pygments            2.18.0\\n\",\n+       \"pytz                2024.1\\n\",\n+       \"six                 1.16.0\\n\",\n+       \"sniffio             1.3.1\\n\",\n+       \"soupsieve           2.5\\n\",\n+       \"stack_data          0.6.2\\n\",\n+       \"swig_runtime_data4  NA\\n\",\n+       \"tornado             6.3.3\\n\",\n+       \"traitlets           5.14.3\\n\",\n+       \"typing_extensions   NA\\n\",\n+       \"urllib3             2.2.1\\n\",\n+       \"vscode              NA\\n\",\n+       \"wcwidth             0.2.13\\n\",\n+       \"yarl                1.9.4\\n\",\n+       \"zmq                 25.1.2\\n\",\n+       \"zoneinfo            NA\\n\",\n+       \"</pre>\\n\",\n+       \"</details> <!-- seems like this ends pre, so might as well be explicit -->\\n\",\n+       \"<pre>\\n\",\n+       \"-----\\n\",\n+       \"IPython             8.25.0\\n\",\n+       \"jupyter_client      8.6.2\\n\",\n+       \"jupyter_core        5.5.0\\n\",\n+       \"-----\\n\",\n+       \"Python 3.10.14 (main, May  6 2024, 14:42:37) [Clang 14.0.6 ]\\n\",\n+       \"macOS-14.4-arm64-arm-64bit\\n\",\n+       \"-----\\n\",\n+       \"Session information updated at 2024-06-11 03:48\\n\",\n+       \"</pre>\\n\",\n+       \"</details>\"\n+      ],\n+      \"text/plain\": [\n+       \"<IPython.core.display.HTML object>\"\n+      ]\n+     },\n+     \"execution_count\": 81,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"import session_info\\n\",\n+    \"session_info.show()\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"!pip install aiohttp bs4 faiss-cpu lxml mistralai nest_asyncio nest_asyncio pandas requests python-dotenv\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 80,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from dotenv import load_dotenv\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"load_dotenv()  # load environment variables from .env file\\n\",\n+    \"MISTRAL_API_KEY = os.getenv(\\\"MISTRAL_API_KEY\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Scraper Definitions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 46,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Exception ignored in: <function MistralClient.__del__ at 0x11efd1ab0>\\n\",\n+      \"Traceback (most recent call last):\\n\",\n+      \"  File \\\"/Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages/mistralai/client.py\\\", line 49, in __del__\\n\",\n+      \"    self._client.close()\\n\",\n+      \"AttributeError: 'MistralClient' object has no attribute '_client'\\n\"",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "eea83eeb46b69049e026f1766362c52f63d2f5fc",
        "user": {
          "login": "HugoLB0",
          "id": 66400773,
          "node_id": "MDQ6VXNlcjY2NDAwNzcz",
          "avatar_url": "https://avatars.githubusercontent.com/u/66400773?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/HugoLB0",
          "html_url": "https://github.com/HugoLB0",
          "followers_url": "https://api.github.com/users/HugoLB0/followers",
          "following_url": "https://api.github.com/users/HugoLB0/following{/other_user}",
          "gists_url": "https://api.github.com/users/HugoLB0/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/HugoLB0/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/HugoLB0/subscriptions",
          "organizations_url": "https://api.github.com/users/HugoLB0/orgs",
          "repos_url": "https://api.github.com/users/HugoLB0/repos",
          "events_url": "https://api.github.com/users/HugoLB0/events{/privacy}",
          "received_events_url": "https://api.github.com/users/HugoLB0/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "just added it! everything should be good now",
        "created_at": "2024-06-11T08:57:17Z",
        "updated_at": "2024-06-11T08:57:18Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634469469",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634469469"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634469469"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634469469/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 174,
        "side": "RIGHT",
        "in_reply_to_id": 1634390613,
        "original_position": 174,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634496565",
        "pull_request_review_id": 2109843116,
        "id": 1634496565,
        "node_id": "PRRC_kwDOLBF5j85hbHA1",
        "diff_hunk": "@@ -0,0 +1,611 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"!pip install aiohttp==3.9.5 beautifulsoup4==4.12.3 faiss_cpu==1.8.0 mistralai==0.4.0 nest_asyncio==1.6.0 numpy==1.26.4 pandas==2.2.2 python-dotenv==1.0.1 requests==2.32.3\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"![image info](./images/mistral-search-graph.png)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 20,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from dotenv import load_dotenv\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"load_dotenv()  # load environment variables from .env file\\n\",\n+    \"MISTRAL_API_KEY = os.getenv(\\\"MISTRAL_API_KEY\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Scraper Definitions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 22,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"import aiohttp\\n\",\n+    \"import asyncio\\n\",\n+    \"import nest_asyncio\\n\",\n+    \"from bs4 import BeautifulSoup\\n\",\n+    \"from concurrent.futures import ThreadPoolExecutor\\n\",\n+    \"import requests\\n\",\n+    \"import re\\n\",\n+    \"import pandas as pd\\n\",\n+    \"import faiss\\n\",\n+    \"import numpy as np\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"from mistralai.models.chat_completion import ChatMessage\\n\",\n+    \"\\n\",\n+    \"# Apply the nest_asyncio patch\\n\",\n+    \"nest_asyncio.apply()\\n\",\n+    \"\\n\",\n+    \"headers = {\\n\",\n+    \"    \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\\\"\\n\",\n+    \"}\\n\",\n+    \"\\n\",\n+    \"total_results_to_fetch = 10  # total number of results to fetch\\n\",\n+    \"chunk_size = 1000  # size of each text chunk\\n\",\n+    \"\\n\",\n+    \"dataframe_out_path = 'temp.csv'\\n\",\n+    \"faiss_index_path = 'faiss_index.index'\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = MISTRAL_API_KEY  # replace with your actual API key\\n\",\n+    \"\\n\",\n+    \"async def fetch(session, url, params=None):\\n\",\n+    \"    async with session.get(url, params=params, headers=headers, timeout=30) as response:\\n\",\n+    \"        return await response.text()\\n\",\n+    \"\\n\",\n+    \"async def fetch_page(session, params, page_num, results):\\n\",\n+    \"    print(f\\\"Fetching page: {page_num}\\\")\\n\",\n+    \"    params[\\\"start\\\"] = (page_num - 1) * params[\\\"num\\\"]\\n\",\n+    \"    html = await fetch(session, \\\"https://www.google.com/search\\\", params)\\n\",\n+    \"    soup = BeautifulSoup(html, 'html.parser')\\n\",\n+    \"\\n\",\n+    \"    for result in soup.select(\\\".tF2Cxc\\\"):\\n\",\n+    \"        if len(results) >= total_results_to_fetch:\\n\",\n+    \"            break\\n\",\n+    \"        title = result.select_one(\\\".DKV0Md\\\").text\\n\",\n+    \"        links = result.select_one(\\\".yuRUbf a\\\")[\\\"href\\\"]\\n\",\n+    \"\\n\",\n+    \"        results.append({\\n\",\n+    \"            \\\"title\\\": title,\\n\",\n+    \"            \\\"links\\\": links\\n\",\n+    \"        })\\n\",\n+    \"\\n\",\n+    \"async def fetch_content(session, url):\\n\",\n+    \"    async with session.get(url, headers=headers, timeout=30) as response:\\n\",\n+    \"        return await response.text()\\n\",\n+    \"\\n\",\n+    \"async def fetch_all_content(urls):\\n\",\n+    \"    async with aiohttp.ClientSession() as session:\\n\",\n+    \"        tasks = [fetch_content(session, url) for url in urls]\\n\",\n+    \"        return await asyncio.gather(*tasks)\\n\",\n+    \"\\n\",\n+    \"def get_all_text_from_url(url):\\n\",\n+    \"    response = requests.get(url, headers=headers, timeout=30)\\n\",\n+    \"    soup = BeautifulSoup(response.text, 'html.parser')\\n\",\n+    \"    for script in soup([\\\"script\\\", \\\"style\\\"]):\\n\",\n+    \"        script.extract()\\n\",\n+    \"    text = soup.get_text()\\n\",\n+    \"    lines = (line.strip() for line in text.splitlines())\\n\",\n+    \"    chunks = (phrase.strip() for line in lines for phrase in line.split(\\\"  \\\"))\\n\",\n+    \"    text = '\\\\n'.join(chunk for chunk in chunks if chunk)\\n\",\n+    \"    return text\\n\",\n+    \"\\n\",\n+    \"def split_text_into_chunks(text, chunk_size):\\n\",\n+    \"    sentences = re.split(r'(?<=[.!?]) +', text)\\n\",\n+    \"    chunks = []\\n\",\n+    \"    current_chunk = []\\n\",\n+    \"\\n\",\n+    \"    for sentence in sentences:\\n\",\n+    \"        if sum(len(s) for s in current_chunk) + len(sentence) + 1 > chunk_size:\\n\",\n+    \"            chunks.append(' '.join(current_chunk))\\n\",\n+    \"            current_chunk = [sentence]\\n\",\n+    \"        else:\\n\",\n+    \"            current_chunk.append(sentence)\\n\",\n+    \"\\n\",\n+    \"    if current_chunk:\\n\",\n+    \"        chunks.append(' '.join(current_chunk))\\n\",\n+    \"\\n\",\n+    \"    return chunks\\n\",\n+    \"\\n\",\n+    \"async def process_text_content(texts, chunk_size):\\n\",\n+    \"    loop = asyncio.get_event_loop()\\n\",\n+    \"    tasks = [loop.run_in_executor(None, split_text_into_chunks, text, chunk_size) for text in texts]\\n\",\n+    \"    return await asyncio.gather(*tasks)\\n\",\n+    \"\\n\",\n+    \"async def get_embeddings_from_mistral(client, text_chunks):\\n\",\n+    \"    response = client.embeddings(model=\\\"mistral-embed\\\", input=text_chunks)\\n\",\n+    \"    return [embedding.embedding for embedding in response.data]\\n\",\n+    \"\\n\",\n+    \"async def fetch_and_process_data(search_query):\\n\",\n+    \"    client = MistralClient(api_key=mistral_api_key)\\n\",\n+    \"\\n\",\n+    \"    params = {\\n\",\n+    \"        \\\"q\\\": search_query,  # query example\\n\",\n+    \"        \\\"hl\\\": \\\"en\\\",         # language\\n\",\n+    \"        \\\"gl\\\": \\\"uk\\\",         # country of the search, UK -> United Kingdom\\n\",\n+    \"        \\\"start\\\": 0,         # number page by default up to 0\\n\",\n+    \"        \\\"num\\\": 10           # parameter defines the maximum number of results to return per page.\\n\",\n+    \"    }\\n\",\n+    \"    \\n\",\n+    \"    async with aiohttp.ClientSession() as session:\\n\",\n+    \"        page_num = 0\\n\",\n+    \"        results = []\\n\",\n+    \"        while len(results) < total_results_to_fetch:\\n\",\n+    \"            page_num += 1\\n\",\n+    \"            await fetch_page(session, params, page_num, results)\\n\",\n+    \"\\n\",\n+    \"        urls = [result['links'] for result in results]\\n\",\n+    \"\\n\",\n+    \"        with ThreadPoolExecutor(max_workers=10) as executor:\\n\",\n+    \"            loop = asyncio.get_event_loop()\\n\",\n+    \"            texts = await asyncio.gather(\\n\",\n+    \"                *[loop.run_in_executor(executor, get_all_text_from_url, url) for url in urls]\\n\",\n+    \"            )\\n\",\n+    \"\\n\",\n+    \"        chunks_list = await process_text_content(texts, chunk_size)\\n\",\n+    \"\\n\",\n+    \"        embeddings_list = []\\n\",\n+    \"        for chunks in chunks_list:\\n\",\n+    \"            embeddings = await get_embeddings_from_mistral(client, chunks)\\n\",\n+    \"            embeddings_list.append(embeddings)\\n\",\n+    \"\\n\",\n+    \"        data = []\\n\",\n+    \"        for i, result in enumerate(results):\\n\",\n+    \"            if i >= len(embeddings_list):\\n\",\n+    \"                print(f\\\"Error: No embeddings returned for result {i}\\\")\\n\",\n+    \"                continue\\n\",\n+    \"            for j, chunk in enumerate(chunks_list[i]):\\n\",\n+    \"                if j >= len(embeddings_list[i]):\\n\",\n+    \"                    print(f\\\"Error: No embedding returned for chunk {j} of result {i}\\\")\\n\",\n+    \"                    continue\\n\",\n+    \"                data.append({\\n\",\n+    \"                    'title': result['title'],\\n\",\n+    \"                    'url': result['links'],\\n\",\n+    \"                    'chunk': chunk,\\n\",\n+    \"                    'embedding': embeddings_list[i][j]\\n\",\n+    \"                })\\n\",\n+    \"\\n\",\n+    \"        df = pd.DataFrame(data)\\n\",\n+    \"        df.to_csv(dataframe_out_path, index=False)\\n\",\n+    \"\\n\",\n+    \"        # FAISS indexing\\n\",\n+    \"        dimension = len(embeddings_list[0][0])  # assuming all embeddings have the same dimension\\n\",\n+    \"        index = faiss.IndexFlatL2(dimension)\\n\",\n+    \"\\n\",\n+    \"        embeddings = np.array([entry['embedding'] for entry in data], dtype=np.float32)\\n\",\n+    \"        index.add(embeddings)\\n\",\n+    \"\\n\",\n+    \"        faiss.write_index(index, faiss_index_path)\\n\",\n+    \"\\n\",\n+    \"await fetch_and_process_data(\\\"What is the latest news about apple and openai?\\\")\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## little embeddings and vector store creation\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 23,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"[{'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': '\u201cThis is a method to allow Apple to make up for the fact that they haven\u2019t been focused on AI like they should have done over the last decade or so.\u201d Apple Intelligence was one of many announcements and updates from Apple\\\\non Monday, including a feature that lets AirPods Pro users nod yes or shake their heads no to Siri\u2019s questions when they are in crowded spaces. Additionally, the company announced that the\\\\nVision Pro headset will also be available in additional countries starting later this month, including mainland China, Hong Kong, Japan and Singapore.The company also unveiled a new feature called InSight for its tvOS18 that is similar to Amazon\u2019s X-Ray and shows the names of actors or a song playing on an Apple TV+ program.\\\\nCompany Town\\\\nScarlett Johansson also thinks OpenAI\u2019s new voice sounds like her. She\u2019s not happy about it\\\\nJohansson, who portrayed the voice of a computer program in \u2018Her,\u2019 was not behind OpenAI\u2019s \u2018Sky\u2019 voice assistant.'},\\n\",\n+       \" {'title': 'Apple doubles down on artificial intelligence, announcing ...',\\n\",\n+       \"  'url': 'https://www.npr.org/2024/06/10/nx-s1-4999051/apple-artificial-intelligence-partnership-openai-chatgpt-siri-iphone',\\n\",\n+       \"  'chunk': \\\"OpenAI itself has been embroiled in allegations of copying actor Scartlett Johansson\u2019s voice without her permission. Apple is also at the center of an antitrust lawsuit filed by the Justice Department and 15 states. The government accuses Apple of abusing its power as a monopoly to push out rivals and keep customers using its products. It\u2019s unclear how Apple\u2019s new partnership with OpenAI could play into this case. Shortly after Apple\u2019s announcement, OpenAI CEO Sam Altman posted on X, formerly known as Twitter, \u201cvery happy to be partnering with apple to integrate chatgpt into their devices later this year! think you will really like it.\u201d\\\\nApple is also rolling out what it calls Apple Intelligence, its term for Apple's own new generative AI software. Apple Intelligence will enable transcription for phone calls, AI photo retouching and improvements in the natural conversation flow with Siri, the company said.\\\"},\\n\",\n+       \" {'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': 'Tools made by San Francisco-based OpenAI have been used to create\\\\nmusic videos, read bedtime stories to children and help brainstorm ideas for writers. Companies including Microsoft and Google have aggressively incorporated AI into their products and services. Apple has often not been the first to market with new technological advances, choosing instead to enter new product categories \u2014 including smartphones and tablets \u2014 once they\u2019ve been established, leading to broader consumer adoption. For example, Apple only began selling its own virtual and augmented reality headset (known as Vision Pro) early this year.\\\\nApple said its AI capabilities were created with privacy protections in mind.'},\\n\",\n+       \" {'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': 'Apple announces deal with OpenAI. Will it be a game-changer? - Los Angeles Times\\\\nNews\\\\nHome Page\\\\nCalifornia\\\\nElection 2024\\\\nHousing & Homelessness\\\\nPolitics\\\\nScience & Medicine\\\\nWorld & Nation\\\\nBusiness\\\\nArtificial Intelligence\\\\nAutos\\\\nJobs, Labor & Workplace\\\\nReal Estate\\\\nTechnology and the Internet\\\\nCalifornia\\\\nCalifornia Politics\\\\nEarthquakes\\\\nEducation\\\\nHousing & Homelessness\\\\nL.A. Influential\\\\nL.A. Politics\\\\nMental Health\\\\nClimate & Environment\\\\nGlobal Warming\\\\nWater & Drought\\\\nEntertainment & Arts\\\\nArts\\\\nBooks\\\\nStand-Up Comedy\\\\nCompany Town\\\\nThe Envelope (Awards)\\\\nMovies\\\\nMusic\\\\nTelevision\\\\nThings to Do\\\\nDe Los\\\\nEn Espa\u00f1ol\\\\nFood\\\\n101 best restaurants in L.A.\\\\nRecipes\\\\nImage\\\\nLifestyle\\\\nHealth & Wellness\\\\nHome Design\\\\nL.A.'},\\n\",\n+       \" {'title': 'OpenAI and Apple announce partnership',\\n\",\n+       \"  'url': 'https://openai.com/index/openai-and-apple-announce-partnership/',\\n\",\n+       \"  'chunk': \\\"Together with Apple, we're making it easier for people to benefit from what AI can offer.Sam Altman, CEO of OpenAIAnnouncementsCompanyAuthorOpenAI Our researchOverviewIndexLatest advancementsGPT-4DALL\u00b7E 3SoraChatGPTFor EveryoneFor TeamsFor EnterprisesChatGPT login(opens in a new window)APIPlatform overviewPricingDocumentation(opens in a new window)API login(opens in a new window)Explore moreOpenAI for businessStoriesSafety overviewSafety overviewSafety standardsTeamsSafety SystemsPreparednessSuperalignmentCompanyAbout usNewsOur CharterSecurityResidencyCareersTerms & policiesTerms of usePrivacy policyBrand guidelinesOther policies OpenAI \u00a9 2015\u20132024(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)\\\"}]\"\n+      ]\n+     },\n+     \"execution_count\": 23,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"def query_vector_store(query_embedding, k=5):\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    Query the FAISS vector store and return the text results along with metadata.\\n\",\n+    \"\\n\",\n+    \"    :param query_embedding: The embedding to query with.\\n\",\n+    \"    :param k: Number of nearest neighbors to retrieve.\\n\",\n+    \"    :return: List of dictionaries containing text results and metadata of the k nearest neighbors.\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    # Load the index\\n\",\n+    \"\\n\",\n+    \"    index = faiss.read_index(faiss_index_path)\\n\",\n+    \"\\n\",\n+    \"    # Ensure the query embedding is a numpy array with the correct shape\\n\",\n+    \"    if not isinstance(query_embedding, np.ndarray):\\n\",\n+    \"        query_embedding = np.array(query_embedding, dtype=np.float32)\\n\",\n+    \"    if query_embedding.ndim == 1:\\n\",\n+    \"        query_embedding = np.expand_dims(query_embedding, axis=0)\\n\",\n+    \"\\n\",\n+    \"    # Query the index\\n\",\n+    \"    distances, indices = index.search(query_embedding, k)\\n\",\n+    \"    \\n\",\n+    \"    # Load the dataframe\\n\",\n+    \"    df = pd.read_csv(dataframe_out_path)\\n\",\n+    \"    \\n\",\n+    \"    # Retrieve the text results and metadata\\n\",\n+    \"    results = []\\n\",\n+    \"    for idx in indices[0]:\\n\",\n+    \"        result = {\\n\",\n+    \"            'title': df.iloc[idx]['title'],\\n\",\n+    \"            'url': df.iloc[idx]['url'],\\n\",\n+    \"            'chunk': df.iloc[idx]['chunk']\\n\",\n+    \"        }\\n\",\n+    \"        results.append(result)\\n\",\n+    \"    \\n\",\n+    \"    return results\\n\",\n+    \"\\n\",\n+    \"def query_embeddings(texts):\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    Convert text to embeddings using Mistral AI API.\\n\",\n+    \"\\n\",\n+    \"    :param api_key: Your Mistral API key.\\n\",\n+    \"    :param texts: List of texts to convert to embeddings.\\n\",\n+    \"    :return: List of embeddings.\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    client = MistralClient(api_key=MISTRAL_API_KEY)\\n\",\n+    \"    response = client.embeddings(model=\\\"mistral-embed\\\", input=[texts])\\n\",\n+    \"    return [embedding.embedding for embedding in response.data]\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"embeddings = query_embeddings(\\\"AGI\\\")\\n\",\n+    \"results = query_vector_store(embeddings[0], k=5)\\n\",\n+    \"results\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## tools definition\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 24,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\",\n+      \"[{'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'Something went wrong while submitting the form.PricingLog inSign upCase studies\\\\nHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsSaveSavedToday I\u00e2\\\\x80\\\\x99m diving deep into Mistral AI, who are making headlines after recently closing their (huge) Series A round. Launched just 7 months ago, they\u00e2\\\\x80\\\\x99re disrupting the LLM market. I want to look at how they\u00e2\\\\x80\\\\x99re doing it - and how you can take advantage.This post covers:What is Mistral?Who\u00e2\\\\x80\\\\x99s behind it?The timeline: What\u00e2\\\\x80\\\\x99s happened to dateFundraisingProduct OverviewA peek inside their seed deck \u00f0\\\\x9f\\\\x91\\\\x80 Roadmap analysis. Are they achieving what they set out to do?5 big reasons Mistral\u00e2\\\\x80\\\\x99s making waves \u00f0\\\\x9f\\\\x8c\\\\x8aHow people actually use MistralOpportunities and how you can take advantageWhat developers think of MistralWhat is Mistral?A French startup that develops fast, open-source and secure language models.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'As Mistral has been true to the promise of releasing open models, the community (and other companies) have taken Mistral\u00e2\\\\x80\\\\x99s models and created better models on top of them. For example, OpenHermes 2.5 by Teknium and Neural Chat 7B by Intel.With AI models, open source takes many forms: from available to use locally but no details about the model (weights, architecture etc.) to models that are fully open source and allow users to train on the outputs.While Mistral\u00e2\\\\x80\\\\x99s models were open-weights from the start, Mistral\u00e2\\\\x80\\\\x99s latest announcement had a line in their Terms of Service Terms of Service which was spotted by Far El on Twitter, said:Basically, you can\u00e2\\\\x80\\\\x99t use it to train or improve other models or compete against them\u00e2\\\\x80\u00a6It wasn\u00e2\\\\x80\\\\x99t clear whether this was just for the API platform or the model itself. And unfortunately, open-source means you should be able to use this tech how you like, that\u00e2\\\\x80\\\\x99s kind of the point.'}, {'title': \\\"All you need to know about OpenAI's rival Mistral AI ...\\\", 'url': 'https://m.economictimes.com/tech/technology/ettech-explainer-all-you-need-to-know-about-openais-rival-mistral-ai/articleshow/108032666.cms', 'chunk': 'Mistral 8x7B model surpasses GPT 3.5 and Llama 2 on performance benchmarks, reducing deployment costs. Mistral raised $415 million in funding.Getty ImagesArthur Mensch, cofounder and CEO, Mistral AITech giant Microsoft has partnered with Paris-based generative artificial intelligence (AI) startup Mistral AI which would allow the latter\u2019s AI models to run on Microsoft\u2019s Azure cloud computing platform. Modi 3.0 LiveModi 3.0 is here!'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'Founded in 2023 by Arthur Mensch, Guillaume Lample, and Timoth\u00c3\u00a9e Lacroix.They\u00e2\\\\x80\\\\x99ve raised over $650M in funding, are valued at $2Bn, are less than a year old and have 22 employees.monthly search volume for \u00e2\\\\x80\\\\x98mistral ai\u00e2\\\\x80\\\\x99The company is important for a few reasons;It\u00e2\\\\x80\\\\x99s actually open-source, you know like OpenAI was supposed to be? Or how LlaMA by Meta kinda is but isn\u00e2\\\\x80\\\\x99t?It\u00e2\\\\x80\\\\x99s developed 2 AI models in less than a year.It\u00e2\\\\x80\\\\x99s French.The founders are 3 researchers from DeepMind and Meta who aimed to beat GPT 3.5 by year-end.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'The big debate.Mistral believes (as do many others, myself included) that there are several concerns with closed AI approaches; businesses have to send sensitive data to it, only exposing the outputs doesn\u00e2\\\\x80\\\\x99t help connect with other components (retrieval, structure inputs etc) and the data used to train the models are secret (so we assume it can do some things it perhaps hasn\u00e2\\\\x80\\\\x99t been trained on).Now the bold stuff.\u00e2\\\\x80\\\\x9cMistral will offer the best technology in 4 years\u00e2\\\\x80\\\\x9d.How?They\u00e2\\\\x80\\\\x99ll take a more open approach to model development.Tighter integration with customers\u00e2\\\\x80\\\\x99 workflows.Increase focus on data sources and control.Propose unmatched guarantees on security and privacy.There\u00e2\\\\x80\\\\x99s a lot more detail in their deck on the above 4 points.As far as business focus goes\u00e2\\\\x80\u00a6\u00e2\\\\x80\\\\x9cOn the business side, we will provide the most valuable technology brick to the emerging AI-as-a-service industry that will revolutionise business workflows with generative AI.'}]\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"\\n\",\n+    \"nest_asyncio.apply()\\n\",\n+    \"\\n\",\n+    \"tools = [\\n\",\n+    \"    {\\n\",\n+    \"        \\\"type\\\": \\\"function\\\",\\n\",\n+    \"        \\\"function\\\": {\\n\",\n+    \"            \\\"name\\\": \\\"mistral_web_search\\\",\\n\",\n+    \"            \\\"description\\\": \\\"Fetch and process data from Google search based on a query, store results in FAISS vector store, and retrieve results.\\\",\\n\",\n+    \"            \\\"parameters\\\": {\\n\",\n+    \"                \\\"type\\\": \\\"object\\\",\\n\",\n+    \"                \\\"properties\\\": {\\n\",\n+    \"                    \\\"search_query\\\": {\\n\",\n+    \"                        \\\"type\\\": \\\"string\\\",\\n\",\n+    \"                        \\\"description\\\": \\\"The search query to use for fetching data from Google search.\\\"\\n\",\n+    \"                    }\\n\",\n+    \"                },\\n\",\n+    \"                \\\"required\\\": [\\\"search_query\\\"]\\n\",\n+    \"            },\\n\",\n+    \"        },\\n\",\n+    \"    },\\n\",\n+    \"]\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def mistral_web_search(search_query: str):\\n\",\n+    \"    async def run_search():\\n\",\n+    \"        await fetch_and_process_data(search_query)\\n\",\n+    \"        embeddings = query_embeddings(search_query)\\n\",\n+    \"        results_ = query_vector_store(embeddings[0], k=5)\\n\",\n+    \"        return results_\\n\",\n+    \"\\n\",\n+    \"    return asyncio.run(run_search())\\n\",\n+    \"\\n\",\n+    \"search_query = \\\"mistral and openai\\\"\\n\",\n+    \"results = mistral_web_search(search_query)\\n\",\n+    \"print(results)\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 25,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"'Mistral has also previously said it is teaming up with other big cloud providers including Amazon and Google.\\\\nRELATED COVERAGE\\\\nUS antitrust enforcers will investigate leading AI companies Microsoft, Nvidia and OpenAI\\\\nAI \u2018gold rush\u2019 for chatbot training data could run out of human-written text\\\\nFormer OpenAI employees lead push to protect whistleblowers flagging artificial intelligence risks\\\\nMistral made a big splash by attracting big amounts of investor funding to give it a multibillion-dollar valuation just months after it was founded last spring. It was started by three French former researchers from Google and Meta: CEO Arthur Mensch, Chief Scientist Guillaume Lample and Chief Technology Officer Timothee Lacroix.\\\\nIt has advertised an \u201copen-source\u201d approach to developing AI that involves publicly releasing key components of some AI systems, in contrast to companies such as OpenAI that closely guard them.\\\\nSomething went wrong while submitting the form.PricingLog inSign upCase studies\\\\nHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsSaveSavedToday I\u00e2\\\\x80\\\\x99m diving deep into Mistral AI, who are making headlines after recently closing their (huge) Series A round. Launched just 7 months ago, they\u00e2\\\\x80\\\\x99re disrupting the LLM market. I want to look at how they\u00e2\\\\x80\\\\x99re doing it - and how you can take advantage.This post covers:What is Mistral?Who\u00e2\\\\x80\\\\x99s behind it?The timeline: What\u00e2\\\\x80\\\\x99s happened to dateFundraisingProduct OverviewA peek inside their seed deck \u00f0\\\\x9f\\\\x91\\\\x80 Roadmap analysis. Are they achieving what they set out to do?5 big reasons Mistral\u00e2\\\\x80\\\\x99s making waves \u00f0\\\\x9f\\\\x8c\\\\x8aHow people actually use MistralOpportunities and how you can take advantageWhat developers think of MistralWhat is Mistral?A French startup that develops fast, open-source and secure language models.\\\\nAs Mistral has been true to the promise of releasing open models, the community (and other companies) have taken Mistral\u00e2\\\\x80\\\\x99s models and created better models on top of them. For example, OpenHermes 2.5 by Teknium and Neural Chat 7B by Intel.With AI models, open source takes many forms: from available to use locally but no details about the model (weights, architecture etc.) to models that are fully open source and allow users to train on the outputs.While Mistral\u00e2\\\\x80\\\\x99s models were open-weights from the start, Mistral\u00e2\\\\x80\\\\x99s latest announcement had a line in their Terms of Service Terms of Service which was spotted by Far El on Twitter, said:Basically, you can\u00e2\\\\x80\\\\x99t use it to train or improve other models or compete against them\u00e2\\\\x80\u00a6It wasn\u00e2\\\\x80\\\\x99t clear whether this was just for the API platform or the model itself. And unfortunately, open-source means you should be able to use this tech how you like, that\u00e2\\\\x80\\\\x99s kind of the point.\\\\nFounded in 2023 by Arthur Mensch, Guillaume Lample, and Timoth\u00c3\u00a9e Lacroix.They\u00e2\\\\x80\\\\x99ve raised over $650M in funding, are valued at $2Bn, are less than a year old and have 22 employees.monthly search volume for \u00e2\\\\x80\\\\x98mistral ai\u00e2\\\\x80\\\\x99The company is important for a few reasons;It\u00e2\\\\x80\\\\x99s actually open-source, you know like OpenAI was supposed to be? Or how LlaMA by Meta kinda is but isn\u00e2\\\\x80\\\\x99t?It\u00e2\\\\x80\\\\x99s developed 2 AI models in less than a year.It\u00e2\\\\x80\\\\x99s French.The founders are 3 researchers from DeepMind and Meta who aimed to beat GPT 3.5 by year-end.\\\\nThe big debate.Mistral believes (as do many others, myself included) that there are several concerns with closed AI approaches; businesses have to send sensitive data to it, only exposing the outputs doesn\u00e2\\\\x80\\\\x99t help connect with other components (retrieval, structure inputs etc) and the data used to train the models are secret (so we assume it can do some things it perhaps hasn\u00e2\\\\x80\\\\x99t been trained on).Now the bold stuff.\u00e2\\\\x80\\\\x9cMistral will offer the best technology in 4 years\u00e2\\\\x80\\\\x9d.How?They\u00e2\\\\x80\\\\x99ll take a more open approach to model development.Tighter integration with customers\u00e2\\\\x80\\\\x99 workflows.Increase focus on data sources and control.Propose unmatched guarantees on security and privacy.There\u00e2\\\\x80\\\\x99s a lot more detail in their deck on the above 4 points.As far as business focus goes\u00e2\\\\x80\u00a6\u00e2\\\\x80\\\\x9cOn the business side, we will provide the most valuable technology brick to the emerging AI-as-a-service industry that will revolutionise business workflows with generative AI.'\"\n+      ]\n+     },\n+     \"execution_count\": 25,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"\\\"\\\"\\\" little helper function to extract only the texts \\\"\\\"\\\"\\n\",\n+    \"def tools_to_str(tools_output: list) -> str:\\n\",\n+    \"    return '\\\\n'.join([tool['chunk'] for tool in tools_output])\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"tools_to_str(mistral_web_search(search_query))\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 26,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import functools\\n\",\n+    \"\\n\",\n+    \"names_to_functions = {\\n\",\n+    \"    'mistral_web_search': functools.partial(mistral_web_search),\\n\",\n+    \"}\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## chat\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 27,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages = [\\n\",\n+    \"    ChatMessage(role=\\\"user\\\", content=\\\"What happend during apple WWDC 2024?\\\"),\\n\",\n+    \"]\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 28,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"ChatCompletionResponse(id='ef8acfcbd94342a7ba0878d2aee7a26f', object='chat.completion', created=1718094423, model='mistral-large-latest', choices=[ChatCompletionResponseChoice(index=0, message=ChatMessage(role='assistant', content='', name=None, tool_calls=[ToolCall(id='X25J2hDYB', type=<ToolType.function: 'function'>, function=FunctionCall(name='mistral_web_search', arguments='{\\\"search_query\\\": \\\"apple WWDC 2024\\\"}'))], tool_call_id=None), finish_reason=<FinishReason.tool_calls: 'tool_calls'>)], usage=UsageInfo(prompt_tokens=121, total_tokens=156, completion_tokens=35))\"\n+      ]\n+     },\n+     \"execution_count\": 28,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"model = \\\"mistral-large-latest\\\"\\n\",\n+    \"\\n\",\n+    \"client = MistralClient(api_key=MISTRAL_API_KEY)\\n\",\n+    \"response = client.chat(model=model, messages=messages, tools=tools, tool_choice=\\\"any\\\")\\n\",\n+    \"response\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages.append(response.choices[0].message)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"\\n\",\n+      \"function_name:  mistral_web_search \\n\",\n+      \"function_params:  {'search_query': 'apple WWDC 2024'}\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"import json\\n\",\n+    \"\\n\",\n+    \"tool_call = response.choices[0].message.tool_calls[0]\\n\",\n+    \"function_name = tool_call.function.name\\n\",\n+    \"function_params = json.loads(tool_call.function.arguments)\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"print(\\\"\\\\nfunction_name: \\\", function_name, \\\"\\\\nfunction_params: \\\", function_params)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 31,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"\\\"Apple WWDC 2024: the 13 biggest announcements - The VergeSkip to main contentThe VergeThe Verge logo.The Verge homepageThe Verge homepageThe VergeThe Verge logo./Tech/Reviews/Science/Entertainment/AI/MoreMenuExpandThe VergeThe Verge logo.MenuExpandWWDC 2024/Apple/TechApple WWDC 2024: the 13 biggest announcementsApple WWDC 2024: the 13 biggest announcements / Apple\u2019s WWDC keynote had a lot to do with AI.By\\\\nEmma Roth, a news writer who covers the streaming wars, consumer tech, crypto, social media, and much more. Previously, she was a writer and editor at MUO.\\\\nJun 10, 2024, 6:57 PM UTCShare this storyApple\u2019s Worldwide Developers Conference keynote has come to a close \u2014 and the company had a whole lot to share.\\\\nFifty Distinguished Winners, who are recognised for outstanding submissions, will be invited to Cupertino for a three-day experience.\\\\nApple will share additional conference information in advance of WWDC24 through the Apple Developer app and website.\\\\nShare article\\\\nMedia\\\\nText of this article\\\\n26 March 2024\\\\nPRESS RELEASE\\\\nApple\u2019s Worldwide Developers Conference returns June 10, 2024\\\\nEntire conference available online for all developers, with a special event at Apple Park on June 10\\\\nCUPERTINO, CALIFORNIA Apple today announced it will host its annual Worldwide Developers Conference (WWDC) online from June 10 through 14, 2024. Developers and students will have the opportunity to celebrate in person at a special event at Apple Park on opening day.\\\\nFree for all developers, WWDC24 will spotlight the latest iOS, iPadOS, macOS, watchOS, tvOS, and visionOS advancements.\\\\niPadOS could finally get new apps like a native calculator, and some rumored new Apple Pencil 3 features.\\\\xa0We expect macOS to offer AI features, with native apps that lean on smart tools and generative AI: assisted writing in Pages, a slide deck maker in Keynote, coding in Xcode, all powered by AI.\\\\xa0When it comes to the Vision Pro and visionOS, we haven't heard much, so we're expecting a nod to spatial computing, but nothing huge coming yet. For wearables, we're not expecting big watchOS changes with watchOS 11, either.Watch WWDC 2024 live with usWWDC 2024 as it happens\\\\nRefresh\\\\n2024-06-10T16:26:28.008Z\\\\nGood morning, good afternoon and good evening, wherever you are in the world \u2013 and welcome to TechRadar's live coverage of WWDC 2024.\\\\n2024-06-10T16:45:58.710Z\\\\n(Image credit: Jacob Krol / Future)Apple's WWDC 2024 keynote is minutes away, with rumors swirling about \\\\xa0announcements focusing on artificial intelligence and Siri, Apple's languishing voice assistant.\\\\nThis year\u2019s conference will include video sessions and opportunities to engage with Apple designers and engineers and connect with the worldwide developer community.\\\\nWWDC24 will include an in-person experience on June 10 that will provide developers the opportunity to watch the keynote at Apple Park, meet with Apple team members, and take part in special activities. Space will be limited, and details on how to apply to attend can be found on the Apple Developer site and app.\\\\nApple is proud to support the next generation of developers through the Swift Student Challenge, one of many Apple programs that seek to uplift the next generation of developers, creators, and entrepreneurs. On March 28, this year\u2019s applicants will be notified of their status, and winners will be eligible to apply for the in-person experience at Apple Park. Fifty Distinguished Winners, who are recognised for outstanding submissions, will be invited to Cupertino for a three-day experience.\\\\nThis year\u2019s conference will include video sessions and opportunities to engage with Apple designers and engineers and connect with the worldwide developer community.\\\\nWWDC24 will include an in-person experience on June 10 that will provide developers the opportunity to watch the keynote at Apple Park, meet with Apple team members, and take part in special activities. Space will be limited, and details on how to apply to attend can be found on the Apple Developer site and app.\\\\nApple is proud to support the next generation of developers through the Swift Student Challenge, one of many Apple programs that seek to uplift the next generation of developers, creators, and entrepreneurs. On March 28, this year\u2019s applicants will be notified of their status, and winners will be eligible to apply for the in-person experience at Apple Park.\\\"\"\n+      ]\n+     },\n+     \"execution_count\": 31,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"function_result = tools_to_str(names_to_functions[function_name](**function_params))\\n\",\n+    \"function_result\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 32,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"\\\"I found some information about Apple's WWDC 2024. Here are the key points:\\\\n\\\\n* The conference took place from June 10 through 14, 2024.\\\\n* It was an online event, but there was a special in-person experience at Apple Park on opening day for developers and students.\\\\n* The conference focused on the latest advancements in iOS, iPadOS, macOS, watchOS, tvOS, and visionOS.\\\\n* iPadOS received new apps like a native calculator, and there were rumors of new Apple Pencil 3 features.\\\\n* macOS offered AI features, with native apps that leaned on smart tools and generative AI: assisted writing in Pages, a slide deck maker in Keynote, coding in Xcode, all powered by AI.\\\\n* The event also included video sessions and opportunities to engage with Apple designers and engineers and connect with the worldwide developer community.\\\\n* Apple supported the next generation of developers through the Swift Student Challenge, with 50 Distinguished Winners being invited to Cupertino for a three-day experience.\\\\n\\\\nUnfortunately, I could not find specific details about the 13 biggest announcements. However, based on the information available, it seems that AI and machine learning played a significant role in the conference.\\\"\"\n+      ]\n+     },\n+     \"execution_count\": 32,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"messages.append(ChatMessage(role=\\\"tool\\\", name=function_name, content=function_result, tool_call_id=tool_call.id))\\n\",\n+    \"\\n\",\n+    \"response = client.chat(model=model, messages=messages)\\n\",\n+    \"response.choices[0].message.content\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Chat in a chain (cleaner user experience)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages = []\\n\",\n+    \"\\n\",\n+    \"while True:\\n\",\n+    \"    input_ = input(\\\"Ask: \\\")\\n\",\n+    \"    messages.append(ChatMessage(role=\\\"user\\\", content=input_))\\n\",\n+    \"    response = client.chat(model=model, messages=messages, tools=tools, tool_choice=\\\"auto\\\")\\n\",",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "1e274753fec5febc3670b726639460f497ce9baf",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Weirdly it seems it was not updated?",
        "created_at": "2024-06-11T09:14:30Z",
        "updated_at": "2024-06-11T09:14:31Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634496565",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634496565"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634496565"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634496565/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 572,
        "side": "RIGHT",
        "original_position": 572,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634515995",
        "pull_request_review_id": 2109881142,
        "id": 1634515995,
        "node_id": "PRRC_kwDOLBF5j85hbLwb",
        "diff_hunk": "@@ -0,0 +1,611 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"!pip install aiohttp==3.9.5 beautifulsoup4==4.12.3 faiss_cpu==1.8.0 mistralai==0.4.0 nest_asyncio==1.6.0 numpy==1.26.4 pandas==2.2.2 python-dotenv==1.0.1 requests==2.32.3\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"![image info](./images/mistral-search-graph.png)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 20,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from dotenv import load_dotenv\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"load_dotenv()  # load environment variables from .env file\\n\",\n+    \"MISTRAL_API_KEY = os.getenv(\\\"MISTRAL_API_KEY\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Scraper Definitions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 22,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"import aiohttp\\n\",\n+    \"import asyncio\\n\",\n+    \"import nest_asyncio\\n\",\n+    \"from bs4 import BeautifulSoup\\n\",\n+    \"from concurrent.futures import ThreadPoolExecutor\\n\",\n+    \"import requests\\n\",\n+    \"import re\\n\",\n+    \"import pandas as pd\\n\",\n+    \"import faiss\\n\",\n+    \"import numpy as np\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"from mistralai.models.chat_completion import ChatMessage\\n\",\n+    \"\\n\",\n+    \"# Apply the nest_asyncio patch\\n\",\n+    \"nest_asyncio.apply()\\n\",\n+    \"\\n\",\n+    \"headers = {\\n\",\n+    \"    \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\\\"\\n\",\n+    \"}\\n\",\n+    \"\\n\",\n+    \"total_results_to_fetch = 10  # total number of results to fetch\\n\",\n+    \"chunk_size = 1000  # size of each text chunk\\n\",\n+    \"\\n\",\n+    \"dataframe_out_path = 'temp.csv'\\n\",\n+    \"faiss_index_path = 'faiss_index.index'\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = MISTRAL_API_KEY  # replace with your actual API key\\n\",\n+    \"\\n\",\n+    \"async def fetch(session, url, params=None):\\n\",\n+    \"    async with session.get(url, params=params, headers=headers, timeout=30) as response:\\n\",\n+    \"        return await response.text()\\n\",\n+    \"\\n\",\n+    \"async def fetch_page(session, params, page_num, results):\\n\",\n+    \"    print(f\\\"Fetching page: {page_num}\\\")\\n\",\n+    \"    params[\\\"start\\\"] = (page_num - 1) * params[\\\"num\\\"]\\n\",\n+    \"    html = await fetch(session, \\\"https://www.google.com/search\\\", params)\\n\",\n+    \"    soup = BeautifulSoup(html, 'html.parser')\\n\",\n+    \"\\n\",\n+    \"    for result in soup.select(\\\".tF2Cxc\\\"):\\n\",\n+    \"        if len(results) >= total_results_to_fetch:\\n\",\n+    \"            break\\n\",\n+    \"        title = result.select_one(\\\".DKV0Md\\\").text\\n\",\n+    \"        links = result.select_one(\\\".yuRUbf a\\\")[\\\"href\\\"]\\n\",\n+    \"\\n\",\n+    \"        results.append({\\n\",\n+    \"            \\\"title\\\": title,\\n\",\n+    \"            \\\"links\\\": links\\n\",\n+    \"        })\\n\",\n+    \"\\n\",\n+    \"async def fetch_content(session, url):\\n\",\n+    \"    async with session.get(url, headers=headers, timeout=30) as response:\\n\",\n+    \"        return await response.text()\\n\",\n+    \"\\n\",\n+    \"async def fetch_all_content(urls):\\n\",\n+    \"    async with aiohttp.ClientSession() as session:\\n\",\n+    \"        tasks = [fetch_content(session, url) for url in urls]\\n\",\n+    \"        return await asyncio.gather(*tasks)\\n\",\n+    \"\\n\",\n+    \"def get_all_text_from_url(url):\\n\",\n+    \"    response = requests.get(url, headers=headers, timeout=30)\\n\",\n+    \"    soup = BeautifulSoup(response.text, 'html.parser')\\n\",\n+    \"    for script in soup([\\\"script\\\", \\\"style\\\"]):\\n\",\n+    \"        script.extract()\\n\",\n+    \"    text = soup.get_text()\\n\",\n+    \"    lines = (line.strip() for line in text.splitlines())\\n\",\n+    \"    chunks = (phrase.strip() for line in lines for phrase in line.split(\\\"  \\\"))\\n\",\n+    \"    text = '\\\\n'.join(chunk for chunk in chunks if chunk)\\n\",\n+    \"    return text\\n\",\n+    \"\\n\",\n+    \"def split_text_into_chunks(text, chunk_size):\\n\",\n+    \"    sentences = re.split(r'(?<=[.!?]) +', text)\\n\",\n+    \"    chunks = []\\n\",\n+    \"    current_chunk = []\\n\",\n+    \"\\n\",\n+    \"    for sentence in sentences:\\n\",\n+    \"        if sum(len(s) for s in current_chunk) + len(sentence) + 1 > chunk_size:\\n\",\n+    \"            chunks.append(' '.join(current_chunk))\\n\",\n+    \"            current_chunk = [sentence]\\n\",\n+    \"        else:\\n\",\n+    \"            current_chunk.append(sentence)\\n\",\n+    \"\\n\",\n+    \"    if current_chunk:\\n\",\n+    \"        chunks.append(' '.join(current_chunk))\\n\",\n+    \"\\n\",\n+    \"    return chunks\\n\",\n+    \"\\n\",\n+    \"async def process_text_content(texts, chunk_size):\\n\",\n+    \"    loop = asyncio.get_event_loop()\\n\",\n+    \"    tasks = [loop.run_in_executor(None, split_text_into_chunks, text, chunk_size) for text in texts]\\n\",\n+    \"    return await asyncio.gather(*tasks)\\n\",\n+    \"\\n\",\n+    \"async def get_embeddings_from_mistral(client, text_chunks):\\n\",\n+    \"    response = client.embeddings(model=\\\"mistral-embed\\\", input=text_chunks)\\n\",\n+    \"    return [embedding.embedding for embedding in response.data]\\n\",\n+    \"\\n\",\n+    \"async def fetch_and_process_data(search_query):\\n\",\n+    \"    client = MistralClient(api_key=mistral_api_key)\\n\",\n+    \"\\n\",\n+    \"    params = {\\n\",\n+    \"        \\\"q\\\": search_query,  # query example\\n\",\n+    \"        \\\"hl\\\": \\\"en\\\",         # language\\n\",\n+    \"        \\\"gl\\\": \\\"uk\\\",         # country of the search, UK -> United Kingdom\\n\",\n+    \"        \\\"start\\\": 0,         # number page by default up to 0\\n\",\n+    \"        \\\"num\\\": 10           # parameter defines the maximum number of results to return per page.\\n\",\n+    \"    }\\n\",\n+    \"    \\n\",\n+    \"    async with aiohttp.ClientSession() as session:\\n\",\n+    \"        page_num = 0\\n\",\n+    \"        results = []\\n\",\n+    \"        while len(results) < total_results_to_fetch:\\n\",\n+    \"            page_num += 1\\n\",\n+    \"            await fetch_page(session, params, page_num, results)\\n\",\n+    \"\\n\",\n+    \"        urls = [result['links'] for result in results]\\n\",\n+    \"\\n\",\n+    \"        with ThreadPoolExecutor(max_workers=10) as executor:\\n\",\n+    \"            loop = asyncio.get_event_loop()\\n\",\n+    \"            texts = await asyncio.gather(\\n\",\n+    \"                *[loop.run_in_executor(executor, get_all_text_from_url, url) for url in urls]\\n\",\n+    \"            )\\n\",\n+    \"\\n\",\n+    \"        chunks_list = await process_text_content(texts, chunk_size)\\n\",\n+    \"\\n\",\n+    \"        embeddings_list = []\\n\",\n+    \"        for chunks in chunks_list:\\n\",\n+    \"            embeddings = await get_embeddings_from_mistral(client, chunks)\\n\",\n+    \"            embeddings_list.append(embeddings)\\n\",\n+    \"\\n\",\n+    \"        data = []\\n\",\n+    \"        for i, result in enumerate(results):\\n\",\n+    \"            if i >= len(embeddings_list):\\n\",\n+    \"                print(f\\\"Error: No embeddings returned for result {i}\\\")\\n\",\n+    \"                continue\\n\",\n+    \"            for j, chunk in enumerate(chunks_list[i]):\\n\",\n+    \"                if j >= len(embeddings_list[i]):\\n\",\n+    \"                    print(f\\\"Error: No embedding returned for chunk {j} of result {i}\\\")\\n\",\n+    \"                    continue\\n\",\n+    \"                data.append({\\n\",\n+    \"                    'title': result['title'],\\n\",\n+    \"                    'url': result['links'],\\n\",\n+    \"                    'chunk': chunk,\\n\",\n+    \"                    'embedding': embeddings_list[i][j]\\n\",\n+    \"                })\\n\",\n+    \"\\n\",\n+    \"        df = pd.DataFrame(data)\\n\",\n+    \"        df.to_csv(dataframe_out_path, index=False)\\n\",\n+    \"\\n\",\n+    \"        # FAISS indexing\\n\",\n+    \"        dimension = len(embeddings_list[0][0])  # assuming all embeddings have the same dimension\\n\",\n+    \"        index = faiss.IndexFlatL2(dimension)\\n\",\n+    \"\\n\",\n+    \"        embeddings = np.array([entry['embedding'] for entry in data], dtype=np.float32)\\n\",\n+    \"        index.add(embeddings)\\n\",\n+    \"\\n\",\n+    \"        faiss.write_index(index, faiss_index_path)\\n\",\n+    \"\\n\",\n+    \"await fetch_and_process_data(\\\"What is the latest news about apple and openai?\\\")\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## little embeddings and vector store creation\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 23,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"[{'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': '\u201cThis is a method to allow Apple to make up for the fact that they haven\u2019t been focused on AI like they should have done over the last decade or so.\u201d Apple Intelligence was one of many announcements and updates from Apple\\\\non Monday, including a feature that lets AirPods Pro users nod yes or shake their heads no to Siri\u2019s questions when they are in crowded spaces. Additionally, the company announced that the\\\\nVision Pro headset will also be available in additional countries starting later this month, including mainland China, Hong Kong, Japan and Singapore.The company also unveiled a new feature called InSight for its tvOS18 that is similar to Amazon\u2019s X-Ray and shows the names of actors or a song playing on an Apple TV+ program.\\\\nCompany Town\\\\nScarlett Johansson also thinks OpenAI\u2019s new voice sounds like her. She\u2019s not happy about it\\\\nJohansson, who portrayed the voice of a computer program in \u2018Her,\u2019 was not behind OpenAI\u2019s \u2018Sky\u2019 voice assistant.'},\\n\",\n+       \" {'title': 'Apple doubles down on artificial intelligence, announcing ...',\\n\",\n+       \"  'url': 'https://www.npr.org/2024/06/10/nx-s1-4999051/apple-artificial-intelligence-partnership-openai-chatgpt-siri-iphone',\\n\",\n+       \"  'chunk': \\\"OpenAI itself has been embroiled in allegations of copying actor Scartlett Johansson\u2019s voice without her permission. Apple is also at the center of an antitrust lawsuit filed by the Justice Department and 15 states. The government accuses Apple of abusing its power as a monopoly to push out rivals and keep customers using its products. It\u2019s unclear how Apple\u2019s new partnership with OpenAI could play into this case. Shortly after Apple\u2019s announcement, OpenAI CEO Sam Altman posted on X, formerly known as Twitter, \u201cvery happy to be partnering with apple to integrate chatgpt into their devices later this year! think you will really like it.\u201d\\\\nApple is also rolling out what it calls Apple Intelligence, its term for Apple's own new generative AI software. Apple Intelligence will enable transcription for phone calls, AI photo retouching and improvements in the natural conversation flow with Siri, the company said.\\\"},\\n\",\n+       \" {'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': 'Tools made by San Francisco-based OpenAI have been used to create\\\\nmusic videos, read bedtime stories to children and help brainstorm ideas for writers. Companies including Microsoft and Google have aggressively incorporated AI into their products and services. Apple has often not been the first to market with new technological advances, choosing instead to enter new product categories \u2014 including smartphones and tablets \u2014 once they\u2019ve been established, leading to broader consumer adoption. For example, Apple only began selling its own virtual and augmented reality headset (known as Vision Pro) early this year.\\\\nApple said its AI capabilities were created with privacy protections in mind.'},\\n\",\n+       \" {'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': 'Apple announces deal with OpenAI. Will it be a game-changer? - Los Angeles Times\\\\nNews\\\\nHome Page\\\\nCalifornia\\\\nElection 2024\\\\nHousing & Homelessness\\\\nPolitics\\\\nScience & Medicine\\\\nWorld & Nation\\\\nBusiness\\\\nArtificial Intelligence\\\\nAutos\\\\nJobs, Labor & Workplace\\\\nReal Estate\\\\nTechnology and the Internet\\\\nCalifornia\\\\nCalifornia Politics\\\\nEarthquakes\\\\nEducation\\\\nHousing & Homelessness\\\\nL.A. Influential\\\\nL.A. Politics\\\\nMental Health\\\\nClimate & Environment\\\\nGlobal Warming\\\\nWater & Drought\\\\nEntertainment & Arts\\\\nArts\\\\nBooks\\\\nStand-Up Comedy\\\\nCompany Town\\\\nThe Envelope (Awards)\\\\nMovies\\\\nMusic\\\\nTelevision\\\\nThings to Do\\\\nDe Los\\\\nEn Espa\u00f1ol\\\\nFood\\\\n101 best restaurants in L.A.\\\\nRecipes\\\\nImage\\\\nLifestyle\\\\nHealth & Wellness\\\\nHome Design\\\\nL.A.'},\\n\",\n+       \" {'title': 'OpenAI and Apple announce partnership',\\n\",\n+       \"  'url': 'https://openai.com/index/openai-and-apple-announce-partnership/',\\n\",\n+       \"  'chunk': \\\"Together with Apple, we're making it easier for people to benefit from what AI can offer.Sam Altman, CEO of OpenAIAnnouncementsCompanyAuthorOpenAI Our researchOverviewIndexLatest advancementsGPT-4DALL\u00b7E 3SoraChatGPTFor EveryoneFor TeamsFor EnterprisesChatGPT login(opens in a new window)APIPlatform overviewPricingDocumentation(opens in a new window)API login(opens in a new window)Explore moreOpenAI for businessStoriesSafety overviewSafety overviewSafety standardsTeamsSafety SystemsPreparednessSuperalignmentCompanyAbout usNewsOur CharterSecurityResidencyCareersTerms & policiesTerms of usePrivacy policyBrand guidelinesOther policies OpenAI \u00a9 2015\u20132024(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)(opens in a new window)\\\"}]\"\n+      ]\n+     },\n+     \"execution_count\": 23,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"def query_vector_store(query_embedding, k=5):\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    Query the FAISS vector store and return the text results along with metadata.\\n\",\n+    \"\\n\",\n+    \"    :param query_embedding: The embedding to query with.\\n\",\n+    \"    :param k: Number of nearest neighbors to retrieve.\\n\",\n+    \"    :return: List of dictionaries containing text results and metadata of the k nearest neighbors.\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    # Load the index\\n\",\n+    \"\\n\",\n+    \"    index = faiss.read_index(faiss_index_path)\\n\",\n+    \"\\n\",\n+    \"    # Ensure the query embedding is a numpy array with the correct shape\\n\",\n+    \"    if not isinstance(query_embedding, np.ndarray):\\n\",\n+    \"        query_embedding = np.array(query_embedding, dtype=np.float32)\\n\",\n+    \"    if query_embedding.ndim == 1:\\n\",\n+    \"        query_embedding = np.expand_dims(query_embedding, axis=0)\\n\",\n+    \"\\n\",\n+    \"    # Query the index\\n\",\n+    \"    distances, indices = index.search(query_embedding, k)\\n\",\n+    \"    \\n\",\n+    \"    # Load the dataframe\\n\",\n+    \"    df = pd.read_csv(dataframe_out_path)\\n\",\n+    \"    \\n\",\n+    \"    # Retrieve the text results and metadata\\n\",\n+    \"    results = []\\n\",\n+    \"    for idx in indices[0]:\\n\",\n+    \"        result = {\\n\",\n+    \"            'title': df.iloc[idx]['title'],\\n\",\n+    \"            'url': df.iloc[idx]['url'],\\n\",\n+    \"            'chunk': df.iloc[idx]['chunk']\\n\",\n+    \"        }\\n\",\n+    \"        results.append(result)\\n\",\n+    \"    \\n\",\n+    \"    return results\\n\",\n+    \"\\n\",\n+    \"def query_embeddings(texts):\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    Convert text to embeddings using Mistral AI API.\\n\",\n+    \"\\n\",\n+    \"    :param api_key: Your Mistral API key.\\n\",\n+    \"    :param texts: List of texts to convert to embeddings.\\n\",\n+    \"    :return: List of embeddings.\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    client = MistralClient(api_key=MISTRAL_API_KEY)\\n\",\n+    \"    response = client.embeddings(model=\\\"mistral-embed\\\", input=[texts])\\n\",\n+    \"    return [embedding.embedding for embedding in response.data]\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"embeddings = query_embeddings(\\\"AGI\\\")\\n\",\n+    \"results = query_vector_store(embeddings[0], k=5)\\n\",\n+    \"results\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## tools definition\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 24,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\",\n+      \"[{'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'Something went wrong while submitting the form.PricingLog inSign upCase studies\\\\nHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsSaveSavedToday I\u00e2\\\\x80\\\\x99m diving deep into Mistral AI, who are making headlines after recently closing their (huge) Series A round. Launched just 7 months ago, they\u00e2\\\\x80\\\\x99re disrupting the LLM market. I want to look at how they\u00e2\\\\x80\\\\x99re doing it - and how you can take advantage.This post covers:What is Mistral?Who\u00e2\\\\x80\\\\x99s behind it?The timeline: What\u00e2\\\\x80\\\\x99s happened to dateFundraisingProduct OverviewA peek inside their seed deck \u00f0\\\\x9f\\\\x91\\\\x80 Roadmap analysis. Are they achieving what they set out to do?5 big reasons Mistral\u00e2\\\\x80\\\\x99s making waves \u00f0\\\\x9f\\\\x8c\\\\x8aHow people actually use MistralOpportunities and how you can take advantageWhat developers think of MistralWhat is Mistral?A French startup that develops fast, open-source and secure language models.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'As Mistral has been true to the promise of releasing open models, the community (and other companies) have taken Mistral\u00e2\\\\x80\\\\x99s models and created better models on top of them. For example, OpenHermes 2.5 by Teknium and Neural Chat 7B by Intel.With AI models, open source takes many forms: from available to use locally but no details about the model (weights, architecture etc.) to models that are fully open source and allow users to train on the outputs.While Mistral\u00e2\\\\x80\\\\x99s models were open-weights from the start, Mistral\u00e2\\\\x80\\\\x99s latest announcement had a line in their Terms of Service Terms of Service which was spotted by Far El on Twitter, said:Basically, you can\u00e2\\\\x80\\\\x99t use it to train or improve other models or compete against them\u00e2\\\\x80\u00a6It wasn\u00e2\\\\x80\\\\x99t clear whether this was just for the API platform or the model itself. And unfortunately, open-source means you should be able to use this tech how you like, that\u00e2\\\\x80\\\\x99s kind of the point.'}, {'title': \\\"All you need to know about OpenAI's rival Mistral AI ...\\\", 'url': 'https://m.economictimes.com/tech/technology/ettech-explainer-all-you-need-to-know-about-openais-rival-mistral-ai/articleshow/108032666.cms', 'chunk': 'Mistral 8x7B model surpasses GPT 3.5 and Llama 2 on performance benchmarks, reducing deployment costs. Mistral raised $415 million in funding.Getty ImagesArthur Mensch, cofounder and CEO, Mistral AITech giant Microsoft has partnered with Paris-based generative artificial intelligence (AI) startup Mistral AI which would allow the latter\u2019s AI models to run on Microsoft\u2019s Azure cloud computing platform. Modi 3.0 LiveModi 3.0 is here!'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'Founded in 2023 by Arthur Mensch, Guillaume Lample, and Timoth\u00c3\u00a9e Lacroix.They\u00e2\\\\x80\\\\x99ve raised over $650M in funding, are valued at $2Bn, are less than a year old and have 22 employees.monthly search volume for \u00e2\\\\x80\\\\x98mistral ai\u00e2\\\\x80\\\\x99The company is important for a few reasons;It\u00e2\\\\x80\\\\x99s actually open-source, you know like OpenAI was supposed to be? Or how LlaMA by Meta kinda is but isn\u00e2\\\\x80\\\\x99t?It\u00e2\\\\x80\\\\x99s developed 2 AI models in less than a year.It\u00e2\\\\x80\\\\x99s French.The founders are 3 researchers from DeepMind and Meta who aimed to beat GPT 3.5 by year-end.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'The big debate.Mistral believes (as do many others, myself included) that there are several concerns with closed AI approaches; businesses have to send sensitive data to it, only exposing the outputs doesn\u00e2\\\\x80\\\\x99t help connect with other components (retrieval, structure inputs etc) and the data used to train the models are secret (so we assume it can do some things it perhaps hasn\u00e2\\\\x80\\\\x99t been trained on).Now the bold stuff.\u00e2\\\\x80\\\\x9cMistral will offer the best technology in 4 years\u00e2\\\\x80\\\\x9d.How?They\u00e2\\\\x80\\\\x99ll take a more open approach to model development.Tighter integration with customers\u00e2\\\\x80\\\\x99 workflows.Increase focus on data sources and control.Propose unmatched guarantees on security and privacy.There\u00e2\\\\x80\\\\x99s a lot more detail in their deck on the above 4 points.As far as business focus goes\u00e2\\\\x80\u00a6\u00e2\\\\x80\\\\x9cOn the business side, we will provide the most valuable technology brick to the emerging AI-as-a-service industry that will revolutionise business workflows with generative AI.'}]\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"\\n\",\n+    \"nest_asyncio.apply()\\n\",\n+    \"\\n\",\n+    \"tools = [\\n\",\n+    \"    {\\n\",\n+    \"        \\\"type\\\": \\\"function\\\",\\n\",\n+    \"        \\\"function\\\": {\\n\",\n+    \"            \\\"name\\\": \\\"mistral_web_search\\\",\\n\",\n+    \"            \\\"description\\\": \\\"Fetch and process data from Google search based on a query, store results in FAISS vector store, and retrieve results.\\\",\\n\",\n+    \"            \\\"parameters\\\": {\\n\",\n+    \"                \\\"type\\\": \\\"object\\\",\\n\",\n+    \"                \\\"properties\\\": {\\n\",\n+    \"                    \\\"search_query\\\": {\\n\",\n+    \"                        \\\"type\\\": \\\"string\\\",\\n\",\n+    \"                        \\\"description\\\": \\\"The search query to use for fetching data from Google search.\\\"\\n\",\n+    \"                    }\\n\",\n+    \"                },\\n\",\n+    \"                \\\"required\\\": [\\\"search_query\\\"]\\n\",\n+    \"            },\\n\",\n+    \"        },\\n\",\n+    \"    },\\n\",\n+    \"]\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def mistral_web_search(search_query: str):\\n\",\n+    \"    async def run_search():\\n\",\n+    \"        await fetch_and_process_data(search_query)\\n\",\n+    \"        embeddings = query_embeddings(search_query)\\n\",\n+    \"        results_ = query_vector_store(embeddings[0], k=5)\\n\",\n+    \"        return results_\\n\",\n+    \"\\n\",\n+    \"    return asyncio.run(run_search())\\n\",\n+    \"\\n\",\n+    \"search_query = \\\"mistral and openai\\\"\\n\",\n+    \"results = mistral_web_search(search_query)\\n\",\n+    \"print(results)\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 25,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"'Mistral has also previously said it is teaming up with other big cloud providers including Amazon and Google.\\\\nRELATED COVERAGE\\\\nUS antitrust enforcers will investigate leading AI companies Microsoft, Nvidia and OpenAI\\\\nAI \u2018gold rush\u2019 for chatbot training data could run out of human-written text\\\\nFormer OpenAI employees lead push to protect whistleblowers flagging artificial intelligence risks\\\\nMistral made a big splash by attracting big amounts of investor funding to give it a multibillion-dollar valuation just months after it was founded last spring. It was started by three French former researchers from Google and Meta: CEO Arthur Mensch, Chief Scientist Guillaume Lample and Chief Technology Officer Timothee Lacroix.\\\\nIt has advertised an \u201copen-source\u201d approach to developing AI that involves publicly releasing key components of some AI systems, in contrast to companies such as OpenAI that closely guard them.\\\\nSomething went wrong while submitting the form.PricingLog inSign upCase studies\\\\nHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsSaveSavedToday I\u00e2\\\\x80\\\\x99m diving deep into Mistral AI, who are making headlines after recently closing their (huge) Series A round. Launched just 7 months ago, they\u00e2\\\\x80\\\\x99re disrupting the LLM market. I want to look at how they\u00e2\\\\x80\\\\x99re doing it - and how you can take advantage.This post covers:What is Mistral?Who\u00e2\\\\x80\\\\x99s behind it?The timeline: What\u00e2\\\\x80\\\\x99s happened to dateFundraisingProduct OverviewA peek inside their seed deck \u00f0\\\\x9f\\\\x91\\\\x80 Roadmap analysis. Are they achieving what they set out to do?5 big reasons Mistral\u00e2\\\\x80\\\\x99s making waves \u00f0\\\\x9f\\\\x8c\\\\x8aHow people actually use MistralOpportunities and how you can take advantageWhat developers think of MistralWhat is Mistral?A French startup that develops fast, open-source and secure language models.\\\\nAs Mistral has been true to the promise of releasing open models, the community (and other companies) have taken Mistral\u00e2\\\\x80\\\\x99s models and created better models on top of them. For example, OpenHermes 2.5 by Teknium and Neural Chat 7B by Intel.With AI models, open source takes many forms: from available to use locally but no details about the model (weights, architecture etc.) to models that are fully open source and allow users to train on the outputs.While Mistral\u00e2\\\\x80\\\\x99s models were open-weights from the start, Mistral\u00e2\\\\x80\\\\x99s latest announcement had a line in their Terms of Service Terms of Service which was spotted by Far El on Twitter, said:Basically, you can\u00e2\\\\x80\\\\x99t use it to train or improve other models or compete against them\u00e2\\\\x80\u00a6It wasn\u00e2\\\\x80\\\\x99t clear whether this was just for the API platform or the model itself. And unfortunately, open-source means you should be able to use this tech how you like, that\u00e2\\\\x80\\\\x99s kind of the point.\\\\nFounded in 2023 by Arthur Mensch, Guillaume Lample, and Timoth\u00c3\u00a9e Lacroix.They\u00e2\\\\x80\\\\x99ve raised over $650M in funding, are valued at $2Bn, are less than a year old and have 22 employees.monthly search volume for \u00e2\\\\x80\\\\x98mistral ai\u00e2\\\\x80\\\\x99The company is important for a few reasons;It\u00e2\\\\x80\\\\x99s actually open-source, you know like OpenAI was supposed to be? Or how LlaMA by Meta kinda is but isn\u00e2\\\\x80\\\\x99t?It\u00e2\\\\x80\\\\x99s developed 2 AI models in less than a year.It\u00e2\\\\x80\\\\x99s French.The founders are 3 researchers from DeepMind and Meta who aimed to beat GPT 3.5 by year-end.\\\\nThe big debate.Mistral believes (as do many others, myself included) that there are several concerns with closed AI approaches; businesses have to send sensitive data to it, only exposing the outputs doesn\u00e2\\\\x80\\\\x99t help connect with other components (retrieval, structure inputs etc) and the data used to train the models are secret (so we assume it can do some things it perhaps hasn\u00e2\\\\x80\\\\x99t been trained on).Now the bold stuff.\u00e2\\\\x80\\\\x9cMistral will offer the best technology in 4 years\u00e2\\\\x80\\\\x9d.How?They\u00e2\\\\x80\\\\x99ll take a more open approach to model development.Tighter integration with customers\u00e2\\\\x80\\\\x99 workflows.Increase focus on data sources and control.Propose unmatched guarantees on security and privacy.There\u00e2\\\\x80\\\\x99s a lot more detail in their deck on the above 4 points.As far as business focus goes\u00e2\\\\x80\u00a6\u00e2\\\\x80\\\\x9cOn the business side, we will provide the most valuable technology brick to the emerging AI-as-a-service industry that will revolutionise business workflows with generative AI.'\"\n+      ]\n+     },\n+     \"execution_count\": 25,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"\\\"\\\"\\\" little helper function to extract only the texts \\\"\\\"\\\"\\n\",\n+    \"def tools_to_str(tools_output: list) -> str:\\n\",\n+    \"    return '\\\\n'.join([tool['chunk'] for tool in tools_output])\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"tools_to_str(mistral_web_search(search_query))\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 26,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import functools\\n\",\n+    \"\\n\",\n+    \"names_to_functions = {\\n\",\n+    \"    'mistral_web_search': functools.partial(mistral_web_search),\\n\",\n+    \"}\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## chat\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 27,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages = [\\n\",\n+    \"    ChatMessage(role=\\\"user\\\", content=\\\"What happend during apple WWDC 2024?\\\"),\\n\",\n+    \"]\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 28,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"ChatCompletionResponse(id='ef8acfcbd94342a7ba0878d2aee7a26f', object='chat.completion', created=1718094423, model='mistral-large-latest', choices=[ChatCompletionResponseChoice(index=0, message=ChatMessage(role='assistant', content='', name=None, tool_calls=[ToolCall(id='X25J2hDYB', type=<ToolType.function: 'function'>, function=FunctionCall(name='mistral_web_search', arguments='{\\\"search_query\\\": \\\"apple WWDC 2024\\\"}'))], tool_call_id=None), finish_reason=<FinishReason.tool_calls: 'tool_calls'>)], usage=UsageInfo(prompt_tokens=121, total_tokens=156, completion_tokens=35))\"\n+      ]\n+     },\n+     \"execution_count\": 28,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"model = \\\"mistral-large-latest\\\"\\n\",\n+    \"\\n\",\n+    \"client = MistralClient(api_key=MISTRAL_API_KEY)\\n\",\n+    \"response = client.chat(model=model, messages=messages, tools=tools, tool_choice=\\\"any\\\")\\n\",\n+    \"response\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages.append(response.choices[0].message)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"\\n\",\n+      \"function_name:  mistral_web_search \\n\",\n+      \"function_params:  {'search_query': 'apple WWDC 2024'}\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"import json\\n\",\n+    \"\\n\",\n+    \"tool_call = response.choices[0].message.tool_calls[0]\\n\",\n+    \"function_name = tool_call.function.name\\n\",\n+    \"function_params = json.loads(tool_call.function.arguments)\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"print(\\\"\\\\nfunction_name: \\\", function_name, \\\"\\\\nfunction_params: \\\", function_params)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 31,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"\\\"Apple WWDC 2024: the 13 biggest announcements - The VergeSkip to main contentThe VergeThe Verge logo.The Verge homepageThe Verge homepageThe VergeThe Verge logo./Tech/Reviews/Science/Entertainment/AI/MoreMenuExpandThe VergeThe Verge logo.MenuExpandWWDC 2024/Apple/TechApple WWDC 2024: the 13 biggest announcementsApple WWDC 2024: the 13 biggest announcements / Apple\u2019s WWDC keynote had a lot to do with AI.By\\\\nEmma Roth, a news writer who covers the streaming wars, consumer tech, crypto, social media, and much more. Previously, she was a writer and editor at MUO.\\\\nJun 10, 2024, 6:57 PM UTCShare this storyApple\u2019s Worldwide Developers Conference keynote has come to a close \u2014 and the company had a whole lot to share.\\\\nFifty Distinguished Winners, who are recognised for outstanding submissions, will be invited to Cupertino for a three-day experience.\\\\nApple will share additional conference information in advance of WWDC24 through the Apple Developer app and website.\\\\nShare article\\\\nMedia\\\\nText of this article\\\\n26 March 2024\\\\nPRESS RELEASE\\\\nApple\u2019s Worldwide Developers Conference returns June 10, 2024\\\\nEntire conference available online for all developers, with a special event at Apple Park on June 10\\\\nCUPERTINO, CALIFORNIA Apple today announced it will host its annual Worldwide Developers Conference (WWDC) online from June 10 through 14, 2024. Developers and students will have the opportunity to celebrate in person at a special event at Apple Park on opening day.\\\\nFree for all developers, WWDC24 will spotlight the latest iOS, iPadOS, macOS, watchOS, tvOS, and visionOS advancements.\\\\niPadOS could finally get new apps like a native calculator, and some rumored new Apple Pencil 3 features.\\\\xa0We expect macOS to offer AI features, with native apps that lean on smart tools and generative AI: assisted writing in Pages, a slide deck maker in Keynote, coding in Xcode, all powered by AI.\\\\xa0When it comes to the Vision Pro and visionOS, we haven't heard much, so we're expecting a nod to spatial computing, but nothing huge coming yet. For wearables, we're not expecting big watchOS changes with watchOS 11, either.Watch WWDC 2024 live with usWWDC 2024 as it happens\\\\nRefresh\\\\n2024-06-10T16:26:28.008Z\\\\nGood morning, good afternoon and good evening, wherever you are in the world \u2013 and welcome to TechRadar's live coverage of WWDC 2024.\\\\n2024-06-10T16:45:58.710Z\\\\n(Image credit: Jacob Krol / Future)Apple's WWDC 2024 keynote is minutes away, with rumors swirling about \\\\xa0announcements focusing on artificial intelligence and Siri, Apple's languishing voice assistant.\\\\nThis year\u2019s conference will include video sessions and opportunities to engage with Apple designers and engineers and connect with the worldwide developer community.\\\\nWWDC24 will include an in-person experience on June 10 that will provide developers the opportunity to watch the keynote at Apple Park, meet with Apple team members, and take part in special activities. Space will be limited, and details on how to apply to attend can be found on the Apple Developer site and app.\\\\nApple is proud to support the next generation of developers through the Swift Student Challenge, one of many Apple programs that seek to uplift the next generation of developers, creators, and entrepreneurs. On March 28, this year\u2019s applicants will be notified of their status, and winners will be eligible to apply for the in-person experience at Apple Park. Fifty Distinguished Winners, who are recognised for outstanding submissions, will be invited to Cupertino for a three-day experience.\\\\nThis year\u2019s conference will include video sessions and opportunities to engage with Apple designers and engineers and connect with the worldwide developer community.\\\\nWWDC24 will include an in-person experience on June 10 that will provide developers the opportunity to watch the keynote at Apple Park, meet with Apple team members, and take part in special activities. Space will be limited, and details on how to apply to attend can be found on the Apple Developer site and app.\\\\nApple is proud to support the next generation of developers through the Swift Student Challenge, one of many Apple programs that seek to uplift the next generation of developers, creators, and entrepreneurs. On March 28, this year\u2019s applicants will be notified of their status, and winners will be eligible to apply for the in-person experience at Apple Park.\\\"\"\n+      ]\n+     },\n+     \"execution_count\": 31,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"function_result = tools_to_str(names_to_functions[function_name](**function_params))\\n\",\n+    \"function_result\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 32,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"\\\"I found some information about Apple's WWDC 2024. Here are the key points:\\\\n\\\\n* The conference took place from June 10 through 14, 2024.\\\\n* It was an online event, but there was a special in-person experience at Apple Park on opening day for developers and students.\\\\n* The conference focused on the latest advancements in iOS, iPadOS, macOS, watchOS, tvOS, and visionOS.\\\\n* iPadOS received new apps like a native calculator, and there were rumors of new Apple Pencil 3 features.\\\\n* macOS offered AI features, with native apps that leaned on smart tools and generative AI: assisted writing in Pages, a slide deck maker in Keynote, coding in Xcode, all powered by AI.\\\\n* The event also included video sessions and opportunities to engage with Apple designers and engineers and connect with the worldwide developer community.\\\\n* Apple supported the next generation of developers through the Swift Student Challenge, with 50 Distinguished Winners being invited to Cupertino for a three-day experience.\\\\n\\\\nUnfortunately, I could not find specific details about the 13 biggest announcements. However, based on the information available, it seems that AI and machine learning played a significant role in the conference.\\\"\"\n+      ]\n+     },\n+     \"execution_count\": 32,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"messages.append(ChatMessage(role=\\\"tool\\\", name=function_name, content=function_result, tool_call_id=tool_call.id))\\n\",\n+    \"\\n\",\n+    \"response = client.chat(model=model, messages=messages)\\n\",\n+    \"response.choices[0].message.content\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Chat in a chain (cleaner user experience)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages = []\\n\",\n+    \"\\n\",\n+    \"while True:\\n\",\n+    \"    input_ = input(\\\"Ask: \\\")\\n\",\n+    \"    messages.append(ChatMessage(role=\\\"user\\\", content=input_))\\n\",\n+    \"    response = client.chat(model=model, messages=messages, tools=tools, tool_choice=\\\"auto\\\")\\n\",",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "1e274753fec5febc3670b726639460f497ce9baf",
        "user": {
          "login": "HugoLB0",
          "id": 66400773,
          "node_id": "MDQ6VXNlcjY2NDAwNzcz",
          "avatar_url": "https://avatars.githubusercontent.com/u/66400773?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/HugoLB0",
          "html_url": "https://github.com/HugoLB0",
          "followers_url": "https://api.github.com/users/HugoLB0/followers",
          "following_url": "https://api.github.com/users/HugoLB0/following{/other_user}",
          "gists_url": "https://api.github.com/users/HugoLB0/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/HugoLB0/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/HugoLB0/subscriptions",
          "organizations_url": "https://api.github.com/users/HugoLB0/orgs",
          "repos_url": "https://api.github.com/users/HugoLB0/repos",
          "events_url": "https://api.github.com/users/HugoLB0/events{/privacy}",
          "received_events_url": "https://api.github.com/users/HugoLB0/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "just pushed again, and I actually found the cause of the issue so it is fixed now.",
        "created_at": "2024-06-11T09:26:10Z",
        "updated_at": "2024-06-11T09:26:11Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634515995",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634515995"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634515995"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634515995/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 572,
        "side": "RIGHT",
        "in_reply_to_id": 1634496565,
        "original_position": 572,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634598754",
        "pull_request_review_id": 2110008314,
        "id": 1634598754,
        "node_id": "PRRC_kwDOLBF5j85hbf9i",
        "diff_hunk": "@@ -0,0 +1,652 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 4,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Requirement already satisfied: aiohttp==3.9.5 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (3.9.5)\\n\",\n+      \"Requirement already satisfied: beautifulsoup4==4.12.3 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (4.12.3)\\n\",\n+      \"Requirement already satisfied: faiss_cpu==1.8.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (1.8.0)\\n\",\n+      \"Requirement already satisfied: mistralai==0.4.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (0.4.0)\\n\",\n+      \"Requirement already satisfied: nest_asyncio==1.6.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (1.6.0)\\n\",\n+      \"Requirement already satisfied: numpy==1.26.4 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (1.26.4)\\n\",\n+      \"Requirement already satisfied: pandas==2.2.2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (2.2.2)\\n\",\n+      \"Requirement already satisfied: python-dotenv==1.0.1 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (1.0.1)\\n\",\n+      \"Requirement already satisfied: requests==2.32.3 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (2.32.3)\\n\",\n+      \"Requirement already satisfied: aiosignal>=1.1.2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from aiohttp==3.9.5) (1.3.1)\\n\",\n+      \"Requirement already satisfied: attrs>=17.3.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from aiohttp==3.9.5) (23.2.0)\\n\",\n+      \"Requirement already satisfied: frozenlist>=1.1.1 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from aiohttp==3.9.5) (1.4.1)\\n\",\n+      \"Requirement already satisfied: multidict<7.0,>=4.5 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from aiohttp==3.9.5) (6.0.5)\\n\",\n+      \"Requirement already satisfied: yarl<2.0,>=1.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from aiohttp==3.9.5) (1.9.4)\\n\",\n+      \"Requirement already satisfied: async-timeout<5.0,>=4.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from aiohttp==3.9.5) (4.0.3)\\n\",\n+      \"Requirement already satisfied: soupsieve>1.2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from beautifulsoup4==4.12.3) (2.5)\\n\",\n+      \"Requirement already satisfied: httpx<0.26,>=0.25 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from mistralai==0.4.0) (0.25.2)\\n\",\n+      \"Requirement already satisfied: orjson<3.11,>=3.9.10 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from mistralai==0.4.0) (3.10.4)\\n\",\n+      \"Requirement already satisfied: pydantic<3.0.0,>=2.5.2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from mistralai==0.4.0) (2.7.3)\\n\",\n+      \"Requirement already satisfied: python-dateutil>=2.8.2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from pandas==2.2.2) (2.9.0)\\n\",\n+      \"Requirement already satisfied: pytz>=2020.1 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from pandas==2.2.2) (2024.1)\\n\",\n+      \"Requirement already satisfied: tzdata>=2022.7 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from pandas==2.2.2) (2024.1)\\n\",\n+      \"Requirement already satisfied: charset-normalizer<4,>=2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from requests==2.32.3) (3.3.2)\\n\",\n+      \"Requirement already satisfied: idna<4,>=2.5 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from requests==2.32.3) (3.7)\\n\",\n+      \"Requirement already satisfied: urllib3<3,>=1.21.1 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from requests==2.32.3) (2.2.1)\\n\",\n+      \"Requirement already satisfied: certifi>=2017.4.17 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from requests==2.32.3) (2024.6.2)\\n\",\n+      \"Requirement already satisfied: anyio in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from httpx<0.26,>=0.25->mistralai==0.4.0) (4.4.0)\\n\",\n+      \"Requirement already satisfied: httpcore==1.* in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from httpx<0.26,>=0.25->mistralai==0.4.0) (1.0.5)\\n\",\n+      \"Requirement already satisfied: sniffio in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from httpx<0.26,>=0.25->mistralai==0.4.0) (1.3.1)\\n\",\n+      \"Requirement already satisfied: h11<0.15,>=0.13 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from httpcore==1.*->httpx<0.26,>=0.25->mistralai==0.4.0) (0.14.0)\\n\",\n+      \"Requirement already satisfied: annotated-types>=0.4.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from pydantic<3.0.0,>=2.5.2->mistralai==0.4.0) (0.7.0)\\n\",\n+      \"Requirement already satisfied: pydantic-core==2.18.4 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from pydantic<3.0.0,>=2.5.2->mistralai==0.4.0) (2.18.4)\\n\",\n+      \"Requirement already satisfied: typing-extensions>=4.6.1 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from pydantic<3.0.0,>=2.5.2->mistralai==0.4.0) (4.12.2)\\n\",\n+      \"Requirement already satisfied: six>=1.5 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas==2.2.2) (1.16.0)\\n\",\n+      \"Requirement already satisfied: exceptiongroup>=1.0.2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from anyio->httpx<0.26,>=0.25->mistralai==0.4.0) (1.2.0)\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"!pip install aiohttp==3.9.5 beautifulsoup4==4.12.3 faiss_cpu==1.8.0 mistralai==0.4.0 nest_asyncio==1.6.0 numpy==1.26.4 pandas==2.2.2 python-dotenv==1.0.1 requests==2.32.3\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"![image info](./images/mistral-search-graph.png)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 5,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from dotenv import load_dotenv\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"load_dotenv()  # load environment variables from .env file\\n\",\n+    \"MISTRAL_API_KEY = os.getenv(\\\"MISTRAL_API_KEY\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Scraper Definitions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 7,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"import aiohttp\\n\",\n+    \"import asyncio\\n\",\n+    \"import nest_asyncio\\n\",\n+    \"from bs4 import BeautifulSoup\\n\",\n+    \"from concurrent.futures import ThreadPoolExecutor\\n\",\n+    \"import requests\\n\",\n+    \"import re\\n\",\n+    \"import pandas as pd\\n\",\n+    \"import faiss\\n\",\n+    \"import numpy as np\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"from mistralai.models.chat_completion import ChatMessage\\n\",\n+    \"\\n\",\n+    \"# Apply the nest_asyncio patch\\n\",\n+    \"nest_asyncio.apply()\\n\",\n+    \"\\n\",\n+    \"headers = {\\n\",\n+    \"    \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\\\"\\n\",\n+    \"}\\n\",\n+    \"\\n\",\n+    \"total_results_to_fetch = 10  # total number of results to fetch\\n\",\n+    \"chunk_size = 1000  # size of each text chunk\\n\",\n+    \"\\n\",\n+    \"dataframe_out_path = 'temp.csv'\\n\",\n+    \"faiss_index_path = 'faiss_index.index'\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = MISTRAL_API_KEY  # replace with your actual API key\\n\",\n+    \"client = MistralClient(api_key=mistral_api_key)\\n\",\n+    \"\\n\",\n+    \"async def fetch(session, url, params=None):\\n\",\n+    \"    async with session.get(url, params=params, headers=headers, timeout=30) as response:\\n\",\n+    \"        return await response.text()\\n\",\n+    \"\\n\",\n+    \"async def fetch_page(session, params, page_num, results):\\n\",\n+    \"    print(f\\\"Fetching page: {page_num}\\\")\\n\",\n+    \"    params[\\\"start\\\"] = (page_num - 1) * params[\\\"num\\\"]\\n\",\n+    \"    html = await fetch(session, \\\"https://www.google.com/search\\\", params)\\n\",\n+    \"    soup = BeautifulSoup(html, 'html.parser')\\n\",\n+    \"\\n\",\n+    \"    for result in soup.select(\\\".tF2Cxc\\\"):\\n\",\n+    \"        if len(results) >= total_results_to_fetch:\\n\",\n+    \"            break\\n\",\n+    \"        title = result.select_one(\\\".DKV0Md\\\").text\\n\",\n+    \"        links = result.select_one(\\\".yuRUbf a\\\")[\\\"href\\\"]\\n\",\n+    \"\\n\",\n+    \"        results.append({\\n\",\n+    \"            \\\"title\\\": title,\\n\",\n+    \"            \\\"links\\\": links\\n\",\n+    \"        })\\n\",\n+    \"\\n\",\n+    \"async def fetch_content(session, url):\\n\",\n+    \"    async with session.get(url, headers=headers, timeout=30) as response:\\n\",\n+    \"        return await response.text()\\n\",\n+    \"\\n\",\n+    \"async def fetch_all_content(urls):\\n\",\n+    \"    async with aiohttp.ClientSession() as session:\\n\",\n+    \"        tasks = [fetch_content(session, url) for url in urls]\\n\",\n+    \"        return await asyncio.gather(*tasks)\\n\",\n+    \"\\n\",\n+    \"def get_all_text_from_url(url):\\n\",\n+    \"    response = requests.get(url, headers=headers, timeout=30)\\n\",\n+    \"    soup = BeautifulSoup(response.text, 'html.parser')\\n\",\n+    \"    for script in soup([\\\"script\\\", \\\"style\\\"]):\\n\",\n+    \"        script.extract()\\n\",\n+    \"    text = soup.get_text()\\n\",\n+    \"    lines = (line.strip() for line in text.splitlines())\\n\",\n+    \"    chunks = (phrase.strip() for line in lines for phrase in line.split(\\\"  \\\"))\\n\",\n+    \"    text = '\\\\n'.join(chunk for chunk in chunks if chunk)\\n\",\n+    \"    return text\\n\",\n+    \"\\n\",\n+    \"def split_text_into_chunks(text, chunk_size):\\n\",\n+    \"    sentences = re.split(r'(?<=[.!?]) +', text)\\n\",\n+    \"    chunks = []\\n\",\n+    \"    current_chunk = []\\n\",\n+    \"\\n\",\n+    \"    for sentence in sentences:\\n\",\n+    \"        if sum(len(s) for s in current_chunk) + len(sentence) + 1 > chunk_size:\\n\",\n+    \"            chunks.append(' '.join(current_chunk))\\n\",\n+    \"            current_chunk = [sentence]\\n\",\n+    \"        else:\\n\",\n+    \"            current_chunk.append(sentence)\\n\",\n+    \"\\n\",\n+    \"    if current_chunk:\\n\",\n+    \"        chunks.append(' '.join(current_chunk))\\n\",\n+    \"\\n\",\n+    \"    return chunks\\n\",\n+    \"\\n\",\n+    \"async def process_text_content(texts, chunk_size):\\n\",\n+    \"    loop = asyncio.get_event_loop()\\n\",\n+    \"    tasks = [loop.run_in_executor(None, split_text_into_chunks, text, chunk_size) for text in texts]\\n\",\n+    \"    return await asyncio.gather(*tasks)\\n\",\n+    \"\\n\",\n+    \"async def get_embeddings_from_mistral(client, text_chunks):\\n\",\n+    \"    response = client.embeddings(model=\\\"mistral-embed\\\", input=text_chunks)\\n\",\n+    \"    return [embedding.embedding for embedding in response.data]\\n\",\n+    \"\\n\",\n+    \"async def fetch_and_process_data(search_query):\\n\",\n+    \"    params = {\\n\",\n+    \"        \\\"q\\\": search_query,  # query example\\n\",\n+    \"        \\\"hl\\\": \\\"en\\\",         # language\\n\",\n+    \"        \\\"gl\\\": \\\"uk\\\",         # country of the search, UK -> United Kingdom\\n\",\n+    \"        \\\"start\\\": 0,         # number page by default up to 0\\n\",\n+    \"        \\\"num\\\": 10           # parameter defines the maximum number of results to return per page.\\n\",\n+    \"    }\\n\",\n+    \"    \\n\",\n+    \"    async with aiohttp.ClientSession() as session:\\n\",\n+    \"        page_num = 0\\n\",\n+    \"        results = []\\n\",\n+    \"        while len(results) < total_results_to_fetch:\\n\",\n+    \"            page_num += 1\\n\",\n+    \"            await fetch_page(session, params, page_num, results)\\n\",\n+    \"\\n\",\n+    \"        urls = [result['links'] for result in results]\\n\",\n+    \"\\n\",\n+    \"        with ThreadPoolExecutor(max_workers=10) as executor:\\n\",\n+    \"            loop = asyncio.get_event_loop()\\n\",\n+    \"            texts = await asyncio.gather(\\n\",\n+    \"                *[loop.run_in_executor(executor, get_all_text_from_url, url) for url in urls]\\n\",\n+    \"            )\\n\",\n+    \"\\n\",\n+    \"        chunks_list = await process_text_content(texts, chunk_size)\\n\",\n+    \"\\n\",\n+    \"        embeddings_list = []\\n\",\n+    \"        for chunks in chunks_list:\\n\",\n+    \"            embeddings = await get_embeddings_from_mistral(client, chunks)\\n\",\n+    \"            embeddings_list.append(embeddings)\\n\",\n+    \"\\n\",\n+    \"        data = []\\n\",\n+    \"        for i, result in enumerate(results):\\n\",\n+    \"            if i >= len(embeddings_list):\\n\",\n+    \"                print(f\\\"Error: No embeddings returned for result {i}\\\")\\n\",\n+    \"                continue\\n\",\n+    \"            for j, chunk in enumerate(chunks_list[i]):\\n\",\n+    \"                if j >= len(embeddings_list[i]):\\n\",\n+    \"                    print(f\\\"Error: No embedding returned for chunk {j} of result {i}\\\")\\n\",\n+    \"                    continue\\n\",\n+    \"                data.append({\\n\",\n+    \"                    'title': result['title'],\\n\",\n+    \"                    'url': result['links'],\\n\",\n+    \"                    'chunk': chunk,\\n\",\n+    \"                    'embedding': embeddings_list[i][j]\\n\",\n+    \"                })\\n\",\n+    \"\\n\",\n+    \"        df = pd.DataFrame(data)\\n\",\n+    \"        df.to_csv(dataframe_out_path, index=False)\\n\",\n+    \"\\n\",\n+    \"        # FAISS indexing\\n\",\n+    \"        dimension = len(embeddings_list[0][0])  # assuming all embeddings have the same dimension\\n\",\n+    \"        index = faiss.IndexFlatL2(dimension)\\n\",\n+    \"\\n\",\n+    \"        embeddings = np.array([entry['embedding'] for entry in data], dtype=np.float32)\\n\",\n+    \"        index.add(embeddings)\\n\",\n+    \"\\n\",\n+    \"        faiss.write_index(index, faiss_index_path)\\n\",\n+    \"\\n\",\n+    \"await fetch_and_process_data(\\\"What is the latest news about apple and openai?\\\")\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## little embeddings and vector store creation\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"[{'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': '\u201cThis is a method to allow Apple to make up for the fact that they haven\u2019t been focused on AI like they should have done over the last decade or so.\u201d Apple Intelligence was one of many announcements and updates from Apple\\\\non Monday, including a feature that lets AirPods Pro users nod yes or shake their heads no to Siri\u2019s questions when they are in crowded spaces. Additionally, the company announced that the\\\\nVision Pro headset will also be available in additional countries starting later this month, including mainland China, Hong Kong, Japan and Singapore.The company also unveiled a new feature called InSight for its tvOS18 that is similar to Amazon\u2019s X-Ray and shows the names of actors or a song playing on an Apple TV+ program.\\\\nCompany Town\\\\nScarlett Johansson also thinks OpenAI\u2019s new voice sounds like her. She\u2019s not happy about it\\\\nJohansson, who portrayed the voice of a computer program in \u2018Her,\u2019 was not behind OpenAI\u2019s \u2018Sky\u2019 voice assistant.'},\\n\",\n+       \" {'title': \\\"Apple partners with OpenAI as it unveils 'Apple Intelligence'\\\",\\n\",\n+       \"  'url': 'https://www.hurriyetdailynews.com/apple-partners-with-openai-as-it-unveils-apple-intelligence-197301',\\n\",\n+       \"  'chunk': 'They\\\\'re selling you down the river,\\\" Musk said in a post on social media.\\\\nApple Intelligence, which runs only on the company\\\\'s in-house technology, will enable users to create their own emojis based on a description in everyday language, or to generate brief summaries of e-mails in the mailbox.\\\\nApple said Siri, its voice assistant, will also get an AI infused upgrade and now will appear as a pulsating light on the edge of your home screen.\\\\nApple said it expected to announce support for other AI models in the future.\\\\nThe company founded by Steve Jobs had remained very quiet on AI since the start of the ChatGPT-sparked frenzy, with Apple for a while avoiding the term altogether.\\\\nBut the pressure became too great, with Wall Street propelling Microsoft past Apple as the world\\\\'s biggest company when measured by stock price, largely because of the Windows-maker\\\\'s unabashed embrace of AI.\\\\nQuark.Models.Entities.Ancestor?.Title?.ToUpperInvariant()\\\\n\u2018Over 400,000 irregular migrants voluntarily left T\u00fcrkiye in one year\u2019\\\\nLATEST NEWS\\\\n\u2018Over 400,000 irregular migrants voluntarily left T\u00fcrkiye in one year\u2019\\\\nIsrael parliament revives bill on ultra-Orthodox conscription\\\\nHouseholds spend most on rent, transport and food\\\\nAnkara sent note to London over basketball team\u2019s visa crisis, parliamentary question reveals\\\\nJapan biochemist who discovered statins, Akira Endo, dies\\\\nRecommended\\\\nHouseholds spend most on rent, transport and food\\\\nRetail sales growth continues to lose momentum\\\\nHenkel\u2019s revenue hits 5.3 billion euros in first quarter\\\\nChiquita liable for financing Colombian paramilitaries: Jury\\\\nSingapore Airline offers pay to victims of severe turbulence\\\\nIntel suspends expansion of factory plan in Israel\\\\nWORLD\\\\nIsrael parliament revives bill on ultra-Orthodox conscription\\\\nIsrael\\\\'s parliament voted Tuesday to revive a controversial bill to conscript ultra-Orthodox Jews, which is backed by Prime Minister Benjamin Netanyahu but has been criticised by his defense minister.\\\\nECONOMY\\\\nHouseholds spend most on rent, transport and food\\\\nHousing and rent, transport and food had the largest shares in households\u2019 total consumption expenditures last year, a survey by the Turkish Statistical Institute (T\u00dc\u0130K) has shown.\\\\nSPORTS\\\\nAli Ko\u00e7 reelected as Fenerbah\u00e7e president\\\\nBusinessman Ali Ko\u00e7 was reelected as the president of Fenerbah\u00e7e following an election held at the club\\\\'s ordinary general assembly on June 9.\\\\nT\u00fcrkiye\\\\nEconomy\\\\nOpinion\\\\nWorld\\\\nArts & Life\\\\nSports\\\\nVideo\\\\nPhoto\\\\n\u00a9\\\\nH\u00fcrriyet Daily News\\\\nPrivacy Policy\\\\nWork With Us\\\\nAbout the Newsroom\\\\nLetters to the Editor\\\\nAdvertise\\\\n\\\\ufeff'},\\n\",\n+       \" {'title': 'Apple doubles down on artificial intelligence, announcing ...',\\n\",\n+       \"  'url': 'https://www.npr.org/2024/06/10/nx-s1-4999051/apple-artificial-intelligence-partnership-openai-chatgpt-siri-iphone',\\n\",\n+       \"  'chunk': \\\"OpenAI itself has been embroiled in allegations of copying actor Scartlett Johansson\u2019s voice without her permission. Apple is also at the center of an antitrust lawsuit filed by the Justice Department and 15 states. The government accuses Apple of abusing its power as a monopoly to push out rivals and keep customers using its products. It\u2019s unclear how Apple\u2019s new partnership with OpenAI could play into this case. Shortly after Apple\u2019s announcement, OpenAI CEO Sam Altman posted on X, formerly known as Twitter, \u201cvery happy to be partnering with apple to integrate chatgpt into their devices later this year! think you will really like it.\u201d\\\\nApple is also rolling out what it calls Apple Intelligence, its term for Apple's own new generative AI software. Apple Intelligence will enable transcription for phone calls, AI photo retouching and improvements in the natural conversation flow with Siri, the company said.\\\"},\\n\",\n+       \" {'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': 'Tools made by San Francisco-based OpenAI have been used to create\\\\nmusic videos, read bedtime stories to children and help brainstorm ideas for writers. Companies including Microsoft and Google have aggressively incorporated AI into their products and services. Apple has often not been the first to market with new technological advances, choosing instead to enter new product categories \u2014 including smartphones and tablets \u2014 once they\u2019ve been established, leading to broader consumer adoption. For example, Apple only began selling its own virtual and augmented reality headset (known as Vision Pro) early this year.\\\\nApple said its AI capabilities were created with privacy protections in mind.'},\\n\",\n+       \" {'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': 'Apple announces deal with OpenAI. Will it be a game-changer? - Los Angeles Times\\\\nNews\\\\nHome Page\\\\nCalifornia\\\\nElection 2024\\\\nHousing & Homelessness\\\\nPolitics\\\\nScience & Medicine\\\\nWorld & Nation\\\\nBusiness\\\\nArtificial Intelligence\\\\nAutos\\\\nJobs, Labor & Workplace\\\\nReal Estate\\\\nTechnology and the Internet\\\\nCalifornia\\\\nCalifornia Politics\\\\nEarthquakes\\\\nEducation\\\\nHousing & Homelessness\\\\nL.A. Influential\\\\nL.A. Politics\\\\nMental Health\\\\nClimate & Environment\\\\nGlobal Warming\\\\nWater & Drought\\\\nEntertainment & Arts\\\\nArts\\\\nBooks\\\\nStand-Up Comedy\\\\nCompany Town\\\\nThe Envelope (Awards)\\\\nMovies\\\\nMusic\\\\nTelevision\\\\nThings to Do\\\\nDe Los\\\\nEn Espa\u00f1ol\\\\nFood\\\\n101 best restaurants in L.A.\\\\nRecipes\\\\nImage\\\\nLifestyle\\\\nHealth & Wellness\\\\nHome Design\\\\nL.A.'}]\"\n+      ]\n+     },\n+     \"execution_count\": 8,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"def query_vector_store(query_embedding, k=5):\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    Query the FAISS vector store and return the text results along with metadata.\\n\",\n+    \"\\n\",\n+    \"    :param query_embedding: The embedding to query with.\\n\",\n+    \"    :param k: Number of nearest neighbors to retrieve.\\n\",\n+    \"    :return: List of dictionaries containing text results and metadata of the k nearest neighbors.\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    # Load the index\\n\",\n+    \"\\n\",\n+    \"    index = faiss.read_index(faiss_index_path)\\n\",\n+    \"\\n\",\n+    \"    # Ensure the query embedding is a numpy array with the correct shape\\n\",\n+    \"    if not isinstance(query_embedding, np.ndarray):\\n\",\n+    \"        query_embedding = np.array(query_embedding, dtype=np.float32)\\n\",\n+    \"    if query_embedding.ndim == 1:\\n\",\n+    \"        query_embedding = np.expand_dims(query_embedding, axis=0)\\n\",\n+    \"\\n\",\n+    \"    # Query the index\\n\",\n+    \"    distances, indices = index.search(query_embedding, k)\\n\",\n+    \"    \\n\",\n+    \"    # Load the dataframe\\n\",\n+    \"    df = pd.read_csv(dataframe_out_path)\\n\",\n+    \"    \\n\",\n+    \"    # Retrieve the text results and metadata\\n\",\n+    \"    results = []\\n\",\n+    \"    for idx in indices[0]:\\n\",\n+    \"        result = {\\n\",\n+    \"            'title': df.iloc[idx]['title'],\\n\",\n+    \"            'url': df.iloc[idx]['url'],\\n\",\n+    \"            'chunk': df.iloc[idx]['chunk']\\n\",\n+    \"        }\\n\",\n+    \"        results.append(result)\\n\",\n+    \"    \\n\",\n+    \"    return results\\n\",\n+    \"\\n\",\n+    \"def query_embeddings(texts):\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    Convert text to embeddings using Mistral AI API.\\n\",\n+    \"\\n\",\n+    \"    :param api_key: Your Mistral API key.\\n\",\n+    \"    :param texts: List of texts to convert to embeddings.\\n\",\n+    \"    :return: List of embeddings.\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    client = MistralClient(api_key=MISTRAL_API_KEY)\\n\",\n+    \"    response = client.embeddings(model=\\\"mistral-embed\\\", input=[texts])\\n\",\n+    \"    return [embedding.embedding for embedding in response.data]\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"embeddings = query_embeddings(\\\"AGI\\\")\\n\",\n+    \"results = query_vector_store(embeddings[0], k=5)\\n\",\n+    \"results\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## tools definition\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\",\n+      \"[{'title': \\\"Microsoft partners with France's Mistral AI, an OpenAI rival\\\", 'url': 'https://apnews.com/article/mistral-ai-lechat-microsoft-openai-cbd6f5604fa577a0d1e7f9047708b718', 'chunk': 'Mistral has also previously said it is teaming up with other big cloud providers including Amazon and Google.\\\\nRELATED COVERAGE\\\\nUS antitrust enforcers will investigate leading AI companies Microsoft, Nvidia and OpenAI\\\\nAI \u2018gold rush\u2019 for chatbot training data could run out of human-written text\\\\nFormer OpenAI employees lead push to protect whistleblowers flagging artificial intelligence risks\\\\nMistral made a big splash by attracting big amounts of investor funding to give it a multibillion-dollar valuation just months after it was founded last spring. It was started by three French former researchers from Google and Meta: CEO Arthur Mensch, Chief Scientist Guillaume Lample and Chief Technology Officer Timothee Lacroix.\\\\nIt has advertised an \u201copen-source\u201d approach to developing AI that involves publicly releasing key components of some AI systems, in contrast to companies such as OpenAI that closely guard them.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'Something went wrong while submitting the form.PricingLog inSign upCase studies\\\\nHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsSaveSavedToday I\u00e2\\\\x80\\\\x99m diving deep into Mistral AI, who are making headlines after recently closing their (huge) Series A round. Launched just 7 months ago, they\u00e2\\\\x80\\\\x99re disrupting the LLM market. I want to look at how they\u00e2\\\\x80\\\\x99re doing it - and how you can take advantage.This post covers:What is Mistral?Who\u00e2\\\\x80\\\\x99s behind it?The timeline: What\u00e2\\\\x80\\\\x99s happened to dateFundraisingProduct OverviewA peek inside their seed deck \u00f0\\\\x9f\\\\x91\\\\x80 Roadmap analysis. Are they achieving what they set out to do?5 big reasons Mistral\u00e2\\\\x80\\\\x99s making waves \u00f0\\\\x9f\\\\x8c\\\\x8aHow people actually use MistralOpportunities and how you can take advantageWhat developers think of MistralWhat is Mistral?A French startup that develops fast, open-source and secure language models.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'As Mistral has been true to the promise of releasing open models, the community (and other companies) have taken Mistral\u00e2\\\\x80\\\\x99s models and created better models on top of them. For example, OpenHermes 2.5 by Teknium and Neural Chat 7B by Intel.With AI models, open source takes many forms: from available to use locally but no details about the model (weights, architecture etc.) to models that are fully open source and allow users to train on the outputs.While Mistral\u00e2\\\\x80\\\\x99s models were open-weights from the start, Mistral\u00e2\\\\x80\\\\x99s latest announcement had a line in their Terms of Service Terms of Service which was spotted by Far El on Twitter, said:Basically, you can\u00e2\\\\x80\\\\x99t use it to train or improve other models or compete against them\u00e2\\\\x80\u00a6It wasn\u00e2\\\\x80\\\\x99t clear whether this was just for the API platform or the model itself. And unfortunately, open-source means you should be able to use this tech how you like, that\u00e2\\\\x80\\\\x99s kind of the point.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'Founded in 2023 by Arthur Mensch, Guillaume Lample, and Timoth\u00c3\u00a9e Lacroix.They\u00e2\\\\x80\\\\x99ve raised over $650M in funding, are valued at $2Bn, are less than a year old and have 22 employees.monthly search volume for \u00e2\\\\x80\\\\x98mistral ai\u00e2\\\\x80\\\\x99The company is important for a few reasons;It\u00e2\\\\x80\\\\x99s actually open-source, you know like OpenAI was supposed to be? Or how LlaMA by Meta kinda is but isn\u00e2\\\\x80\\\\x99t?It\u00e2\\\\x80\\\\x99s developed 2 AI models in less than a year.It\u00e2\\\\x80\\\\x99s French.The founders are 3 researchers from DeepMind and Meta who aimed to beat GPT 3.5 by year-end.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'The big debate.Mistral believes (as do many others, myself included) that there are several concerns with closed AI approaches; businesses have to send sensitive data to it, only exposing the outputs doesn\u00e2\\\\x80\\\\x99t help connect with other components (retrieval, structure inputs etc) and the data used to train the models are secret (so we assume it can do some things it perhaps hasn\u00e2\\\\x80\\\\x99t been trained on).Now the bold stuff.\u00e2\\\\x80\\\\x9cMistral will offer the best technology in 4 years\u00e2\\\\x80\\\\x9d.How?They\u00e2\\\\x80\\\\x99ll take a more open approach to model development.Tighter integration with customers\u00e2\\\\x80\\\\x99 workflows.Increase focus on data sources and control.Propose unmatched guarantees on security and privacy.There\u00e2\\\\x80\\\\x99s a lot more detail in their deck on the above 4 points.As far as business focus goes\u00e2\\\\x80\u00a6\u00e2\\\\x80\\\\x9cOn the business side, we will provide the most valuable technology brick to the emerging AI-as-a-service industry that will revolutionise business workflows with generative AI.'}]\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"\\n\",\n+    \"nest_asyncio.apply()\\n\",\n+    \"\\n\",\n+    \"tools = [\\n\",\n+    \"    {\\n\",\n+    \"        \\\"type\\\": \\\"function\\\",\\n\",\n+    \"        \\\"function\\\": {\\n\",\n+    \"            \\\"name\\\": \\\"mistral_web_search\\\",\\n\",\n+    \"            \\\"description\\\": \\\"Fetch and process data from Google search based on a query, store results in FAISS vector store, and retrieve results.\\\",\\n\",\n+    \"            \\\"parameters\\\": {\\n\",\n+    \"                \\\"type\\\": \\\"object\\\",\\n\",\n+    \"                \\\"properties\\\": {\\n\",\n+    \"                    \\\"search_query\\\": {\\n\",\n+    \"                        \\\"type\\\": \\\"string\\\",\\n\",\n+    \"                        \\\"description\\\": \\\"The search query to use for fetching data from Google search.\\\"\\n\",\n+    \"                    }\\n\",\n+    \"                },\\n\",\n+    \"                \\\"required\\\": [\\\"search_query\\\"]\\n\",\n+    \"            },\\n\",\n+    \"        },\\n\",\n+    \"    },\\n\",\n+    \"]\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def mistral_web_search(search_query: str):\\n\",\n+    \"    async def run_search():\\n\",\n+    \"        await fetch_and_process_data(search_query)\\n\",\n+    \"        embeddings = query_embeddings(search_query)\\n\",\n+    \"        results_ = query_vector_store(embeddings[0], k=5)\\n\",\n+    \"        return results_\\n\",\n+    \"\\n\",\n+    \"    return asyncio.run(run_search())\\n\",\n+    \"\\n\",\n+    \"search_query = \\\"mistral and openai\\\"\\n\",\n+    \"results = mistral_web_search(search_query)\\n\",\n+    \"print(results)\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 10,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"'Mistral has also previously said it is teaming up with other big cloud providers including Amazon and Google.\\\\nRELATED COVERAGE\\\\nUS antitrust enforcers will investigate leading AI companies Microsoft, Nvidia and OpenAI\\\\nAI \u2018gold rush\u2019 for chatbot training data could run out of human-written text\\\\nFormer OpenAI employees lead push to protect whistleblowers flagging artificial intelligence risks\\\\nMistral made a big splash by attracting big amounts of investor funding to give it a multibillion-dollar valuation just months after it was founded last spring. It was started by three French former researchers from Google and Meta: CEO Arthur Mensch, Chief Scientist Guillaume Lample and Chief Technology Officer Timothee Lacroix.\\\\nIt has advertised an \u201copen-source\u201d approach to developing AI that involves publicly releasing key components of some AI systems, in contrast to companies such as OpenAI that closely guard them.\\\\nSomething went wrong while submitting the form.PricingLog inSign upCase studies\\\\nHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsSaveSavedToday I\u00e2\\\\x80\\\\x99m diving deep into Mistral AI, who are making headlines after recently closing their (huge) Series A round. Launched just 7 months ago, they\u00e2\\\\x80\\\\x99re disrupting the LLM market. I want to look at how they\u00e2\\\\x80\\\\x99re doing it - and how you can take advantage.This post covers:What is Mistral?Who\u00e2\\\\x80\\\\x99s behind it?The timeline: What\u00e2\\\\x80\\\\x99s happened to dateFundraisingProduct OverviewA peek inside their seed deck \u00f0\\\\x9f\\\\x91\\\\x80 Roadmap analysis. Are they achieving what they set out to do?5 big reasons Mistral\u00e2\\\\x80\\\\x99s making waves \u00f0\\\\x9f\\\\x8c\\\\x8aHow people actually use MistralOpportunities and how you can take advantageWhat developers think of MistralWhat is Mistral?A French startup that develops fast, open-source and secure language models.\\\\nAs Mistral has been true to the promise of releasing open models, the community (and other companies) have taken Mistral\u00e2\\\\x80\\\\x99s models and created better models on top of them. For example, OpenHermes 2.5 by Teknium and Neural Chat 7B by Intel.With AI models, open source takes many forms: from available to use locally but no details about the model (weights, architecture etc.) to models that are fully open source and allow users to train on the outputs.While Mistral\u00e2\\\\x80\\\\x99s models were open-weights from the start, Mistral\u00e2\\\\x80\\\\x99s latest announcement had a line in their Terms of Service Terms of Service which was spotted by Far El on Twitter, said:Basically, you can\u00e2\\\\x80\\\\x99t use it to train or improve other models or compete against them\u00e2\\\\x80\u00a6It wasn\u00e2\\\\x80\\\\x99t clear whether this was just for the API platform or the model itself. And unfortunately, open-source means you should be able to use this tech how you like, that\u00e2\\\\x80\\\\x99s kind of the point.\\\\nFounded in 2023 by Arthur Mensch, Guillaume Lample, and Timoth\u00c3\u00a9e Lacroix.They\u00e2\\\\x80\\\\x99ve raised over $650M in funding, are valued at $2Bn, are less than a year old and have 22 employees.monthly search volume for \u00e2\\\\x80\\\\x98mistral ai\u00e2\\\\x80\\\\x99The company is important for a few reasons;It\u00e2\\\\x80\\\\x99s actually open-source, you know like OpenAI was supposed to be? Or how LlaMA by Meta kinda is but isn\u00e2\\\\x80\\\\x99t?It\u00e2\\\\x80\\\\x99s developed 2 AI models in less than a year.It\u00e2\\\\x80\\\\x99s French.The founders are 3 researchers from DeepMind and Meta who aimed to beat GPT 3.5 by year-end.\\\\nThe big debate.Mistral believes (as do many others, myself included) that there are several concerns with closed AI approaches; businesses have to send sensitive data to it, only exposing the outputs doesn\u00e2\\\\x80\\\\x99t help connect with other components (retrieval, structure inputs etc) and the data used to train the models are secret (so we assume it can do some things it perhaps hasn\u00e2\\\\x80\\\\x99t been trained on).Now the bold stuff.\u00e2\\\\x80\\\\x9cMistral will offer the best technology in 4 years\u00e2\\\\x80\\\\x9d.How?They\u00e2\\\\x80\\\\x99ll take a more open approach to model development.Tighter integration with customers\u00e2\\\\x80\\\\x99 workflows.Increase focus on data sources and control.Propose unmatched guarantees on security and privacy.There\u00e2\\\\x80\\\\x99s a lot more detail in their deck on the above 4 points.As far as business focus goes\u00e2\\\\x80\u00a6\u00e2\\\\x80\\\\x9cOn the business side, we will provide the most valuable technology brick to the emerging AI-as-a-service industry that will revolutionise business workflows with generative AI.'\"\n+      ]\n+     },\n+     \"execution_count\": 10,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"\\\"\\\"\\\" little helper function to extract only the texts \\\"\\\"\\\"\\n\",\n+    \"def tools_to_str(tools_output: list) -> str:\\n\",\n+    \"    return '\\\\n'.join([tool['chunk'] for tool in tools_output])\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"tools_to_str(mistral_web_search(search_query))\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 11,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import functools\\n\",\n+    \"\\n\",\n+    \"names_to_functions = {\\n\",\n+    \"    'mistral_web_search': functools.partial(mistral_web_search),\\n\",\n+    \"}\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## chat\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 12,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages = [\\n\",\n+    \"    ChatMessage(role=\\\"user\\\", content=\\\"What happend during apple WWDC 2024?\\\"),\\n\",\n+    \"]\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 13,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"ChatCompletionResponse(id='ed2e245edaf04b3e96fea1a914e9e97f', object='chat.completion', created=1718097895, model='mistral-large-latest', choices=[ChatCompletionResponseChoice(index=0, message=ChatMessage(role='assistant', content='', name=None, tool_calls=[ToolCall(id='wq5uJdILV', type=<ToolType.function: 'function'>, function=FunctionCall(name='mistral_web_search', arguments='{\\\"search_query\\\": \\\"apple WWDC 2024\\\"}'))], tool_call_id=None), finish_reason=<FinishReason.tool_calls: 'tool_calls'>)], usage=UsageInfo(prompt_tokens=121, total_tokens=156, completion_tokens=35))\"\n+      ]\n+     },\n+     \"execution_count\": 13,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"model = \\\"mistral-large-latest\\\"\\n\",\n+    \"\\n\",\n+    \"client = MistralClient(api_key=MISTRAL_API_KEY)\\n\",\n+    \"response = client.chat(model=model, messages=messages, tools=tools, tool_choice=\\\"any\\\")\\n\",\n+    \"response\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 14,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages.append(response.choices[0].message)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 15,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"\\n\",\n+      \"function_name:  mistral_web_search \\n\",\n+      \"function_params:  {'search_query': 'apple WWDC 2024'}\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"import json\\n\",\n+    \"\\n\",\n+    \"tool_call = response.choices[0].message.tool_calls[0]\\n\",\n+    \"function_name = tool_call.function.name\\n\",\n+    \"function_params = json.loads(tool_call.function.arguments)\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"print(\\\"\\\\nfunction_name: \\\", function_name, \\\"\\\\nfunction_params: \\\", function_params)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 16,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"\\\"Apple WWDC 2024: the 13 biggest announcements - The VergeSkip to main contentThe VergeThe Verge logo.The Verge homepageThe Verge homepageThe VergeThe Verge logo./Tech/Reviews/Science/Entertainment/AI/MoreMenuExpandThe VergeThe Verge logo.MenuExpandWWDC 2024/Apple/TechApple WWDC 2024: the 13 biggest announcementsApple WWDC 2024: the 13 biggest announcements / Apple\u2019s WWDC keynote had a lot to do with AI.By\\\\nEmma Roth, a news writer who covers the streaming wars, consumer tech, crypto, social media, and much more. Previously, she was a writer and editor at MUO.\\\\nJun 10, 2024, 6:57 PM UTCShare this storyApple\u2019s Worldwide Developers Conference keynote has come to a close \u2014 and the company had a whole lot to share.\\\\nFifty Distinguished Winners, who are recognised for outstanding submissions, will be invited to Cupertino for a three-day experience.\\\\nApple will share additional conference information in advance of WWDC24 through the Apple Developer app and website.\\\\nShare article\\\\nMedia\\\\nText of this article\\\\n26 March 2024\\\\nPRESS RELEASE\\\\nApple\u2019s Worldwide Developers Conference returns June 10, 2024\\\\nEntire conference available online for all developers, with a special event at Apple Park on June 10\\\\nCUPERTINO, CALIFORNIA Apple today announced it will host its annual Worldwide Developers Conference (WWDC) online from June 10 through 14, 2024. Developers and students will have the opportunity to celebrate in person at a special event at Apple Park on opening day.\\\\nFree for all developers, WWDC24 will spotlight the latest iOS, iPadOS, macOS, watchOS, tvOS, and visionOS advancements.\\\\niPadOS could finally get new apps like a native calculator, and some rumored new Apple Pencil 3 features.\\\\xa0We expect macOS to offer AI features, with native apps that lean on smart tools and generative AI: assisted writing in Pages, a slide deck maker in Keynote, coding in Xcode, all powered by AI.\\\\xa0When it comes to the Vision Pro and visionOS, we haven't heard much, so we're expecting a nod to spatial computing, but nothing huge coming yet. For wearables, we're not expecting big watchOS changes with watchOS 11, either.Watch WWDC 2024 live with usWWDC 2024 as it happens\\\\nRefresh\\\\n2024-06-10T16:26:28.008Z\\\\nGood morning, good afternoon and good evening, wherever you are in the world \u2013 and welcome to TechRadar's live coverage of WWDC 2024.\\\\n2024-06-10T16:45:58.710Z\\\\n(Image credit: Jacob Krol / Future)Apple's WWDC 2024 keynote is minutes away, with rumors swirling about \\\\xa0announcements focusing on artificial intelligence and Siri, Apple's languishing voice assistant.\\\\nThis year\u2019s conference will include video sessions and opportunities to engage with Apple designers and engineers and connect with the worldwide developer community.\\\\nWWDC24 will include an in-person experience on June 10 that will provide developers the opportunity to watch the keynote at Apple Park, meet with Apple team members, and take part in special activities. Space will be limited, and details on how to apply to attend can be found on the Apple Developer site and app.\\\\nApple is proud to support the next generation of developers through the Swift Student Challenge, one of many Apple programs that seek to uplift the next generation of developers, creators, and entrepreneurs. On March 28, this year\u2019s applicants will be notified of their status, and winners will be eligible to apply for the in-person experience at Apple Park. Fifty Distinguished Winners, who are recognised for outstanding submissions, will be invited to Cupertino for a three-day experience.\\\\nThis year\u2019s conference will include video sessions and opportunities to engage with Apple designers and engineers and connect with the worldwide developer community.\\\\nWWDC24 will include an in-person experience on June 10 that will provide developers the opportunity to watch the keynote at Apple Park, meet with Apple team members, and take part in special activities. Space will be limited, and details on how to apply to attend can be found on the Apple Developer site and app.\\\\nApple is proud to support the next generation of developers through the Swift Student Challenge, one of many Apple programs that seek to uplift the next generation of developers, creators, and entrepreneurs. On March 28, this year\u2019s applicants will be notified of their status, and winners will be eligible to apply for the in-person experience at Apple Park.\\\"\"\n+      ]\n+     },\n+     \"execution_count\": 16,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"function_result = tools_to_str(names_to_functions[function_name](**function_params))\\n\",\n+    \"function_result\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 17,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"\\\"Apple's Worldwide Developers Conference (WWDC) took place on June 10, 2024. The keynote focused mainly on artificial intelligence, with several announcements made. Unfortunately, I don't have real-time information, so I can't provide the specific details of the 13 biggest announcements mentioned in the article from The Verge.\\\\n\\\\nHowever, some general expectations before the event included the possibility of new apps for iPadOS such as a native calculator and new features for Apple Pencil 3. For macOS, it was anticipated that there would be AI features and smart tools integrated into native apps like Pages, Keynote, and Xcode.\\\\n\\\\nThe event also included video sessions and opportunities for developers to engage with Apple designers and engineers. There was an in-person experience at Apple Park for selected developers to watch the keynote, meet with Apple team members, and participate in special activities. Apple also continued its tradition of supporting the next generation of developers through the Swift Student Challenge.\\\"\"\n+      ]\n+     },\n+     \"execution_count\": 17,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"messages.append(ChatMessage(role=\\\"tool\\\", name=function_name, content=function_result, tool_call_id=tool_call.id))\\n\",\n+    \"\\n\",\n+    \"response = client.chat(model=model, messages=messages)\\n\",\n+    \"response.choices[0].message.content\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Chat in a chain (cleaner user experience)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages = []\\n\",\n+    \"\\n\",\n+    \"while True:\\n\",\n+    \"    input_ = input(\\\"Ask: \\\")\\n\",\n+    \"    messages.append(ChatMessage(role=\\\"user\\\", content=input_))\\n\",\n+    \"    response = client.chat(model=model, messages=messages, tools=tools, tool_choice=\\\"force\\\")\\n\",",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "46b61de305f7047f03f9932f4acda233d04e0866",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Force is not an option, maybe 'any'?\r\n\r\nAnd I think thats the only thing, everything else seems to work.",
        "created_at": "2024-06-11T10:22:26Z",
        "updated_at": "2024-06-11T10:22:26Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634598754",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634598754"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634598754"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634598754/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 613,
        "side": "RIGHT",
        "original_position": 613,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634641618",
        "pull_request_review_id": 2110079770,
        "id": 1634641618,
        "node_id": "PRRC_kwDOLBF5j85hbqbS",
        "diff_hunk": "@@ -0,0 +1,652 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Mistral AI search engine\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 4,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Requirement already satisfied: aiohttp==3.9.5 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (3.9.5)\\n\",\n+      \"Requirement already satisfied: beautifulsoup4==4.12.3 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (4.12.3)\\n\",\n+      \"Requirement already satisfied: faiss_cpu==1.8.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (1.8.0)\\n\",\n+      \"Requirement already satisfied: mistralai==0.4.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (0.4.0)\\n\",\n+      \"Requirement already satisfied: nest_asyncio==1.6.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (1.6.0)\\n\",\n+      \"Requirement already satisfied: numpy==1.26.4 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (1.26.4)\\n\",\n+      \"Requirement already satisfied: pandas==2.2.2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (2.2.2)\\n\",\n+      \"Requirement already satisfied: python-dotenv==1.0.1 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (1.0.1)\\n\",\n+      \"Requirement already satisfied: requests==2.32.3 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (2.32.3)\\n\",\n+      \"Requirement already satisfied: aiosignal>=1.1.2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from aiohttp==3.9.5) (1.3.1)\\n\",\n+      \"Requirement already satisfied: attrs>=17.3.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from aiohttp==3.9.5) (23.2.0)\\n\",\n+      \"Requirement already satisfied: frozenlist>=1.1.1 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from aiohttp==3.9.5) (1.4.1)\\n\",\n+      \"Requirement already satisfied: multidict<7.0,>=4.5 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from aiohttp==3.9.5) (6.0.5)\\n\",\n+      \"Requirement already satisfied: yarl<2.0,>=1.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from aiohttp==3.9.5) (1.9.4)\\n\",\n+      \"Requirement already satisfied: async-timeout<5.0,>=4.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from aiohttp==3.9.5) (4.0.3)\\n\",\n+      \"Requirement already satisfied: soupsieve>1.2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from beautifulsoup4==4.12.3) (2.5)\\n\",\n+      \"Requirement already satisfied: httpx<0.26,>=0.25 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from mistralai==0.4.0) (0.25.2)\\n\",\n+      \"Requirement already satisfied: orjson<3.11,>=3.9.10 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from mistralai==0.4.0) (3.10.4)\\n\",\n+      \"Requirement already satisfied: pydantic<3.0.0,>=2.5.2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from mistralai==0.4.0) (2.7.3)\\n\",\n+      \"Requirement already satisfied: python-dateutil>=2.8.2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from pandas==2.2.2) (2.9.0)\\n\",\n+      \"Requirement already satisfied: pytz>=2020.1 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from pandas==2.2.2) (2024.1)\\n\",\n+      \"Requirement already satisfied: tzdata>=2022.7 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from pandas==2.2.2) (2024.1)\\n\",\n+      \"Requirement already satisfied: charset-normalizer<4,>=2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from requests==2.32.3) (3.3.2)\\n\",\n+      \"Requirement already satisfied: idna<4,>=2.5 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from requests==2.32.3) (3.7)\\n\",\n+      \"Requirement already satisfied: urllib3<3,>=1.21.1 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from requests==2.32.3) (2.2.1)\\n\",\n+      \"Requirement already satisfied: certifi>=2017.4.17 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from requests==2.32.3) (2024.6.2)\\n\",\n+      \"Requirement already satisfied: anyio in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from httpx<0.26,>=0.25->mistralai==0.4.0) (4.4.0)\\n\",\n+      \"Requirement already satisfied: httpcore==1.* in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from httpx<0.26,>=0.25->mistralai==0.4.0) (1.0.5)\\n\",\n+      \"Requirement already satisfied: sniffio in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from httpx<0.26,>=0.25->mistralai==0.4.0) (1.3.1)\\n\",\n+      \"Requirement already satisfied: h11<0.15,>=0.13 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from httpcore==1.*->httpx<0.26,>=0.25->mistralai==0.4.0) (0.14.0)\\n\",\n+      \"Requirement already satisfied: annotated-types>=0.4.0 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from pydantic<3.0.0,>=2.5.2->mistralai==0.4.0) (0.7.0)\\n\",\n+      \"Requirement already satisfied: pydantic-core==2.18.4 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from pydantic<3.0.0,>=2.5.2->mistralai==0.4.0) (2.18.4)\\n\",\n+      \"Requirement already satisfied: typing-extensions>=4.6.1 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from pydantic<3.0.0,>=2.5.2->mistralai==0.4.0) (4.12.2)\\n\",\n+      \"Requirement already satisfied: six>=1.5 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas==2.2.2) (1.16.0)\\n\",\n+      \"Requirement already satisfied: exceptiongroup>=1.0.2 in /Users/hugolebelzic/miniconda3/envs/mistral-cookbook-contrib/lib/python3.10/site-packages (from anyio->httpx<0.26,>=0.25->mistralai==0.4.0) (1.2.0)\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"!pip install aiohttp==3.9.5 beautifulsoup4==4.12.3 faiss_cpu==1.8.0 mistralai==0.4.0 nest_asyncio==1.6.0 numpy==1.26.4 pandas==2.2.2 python-dotenv==1.0.1 requests==2.32.3\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"![image info](./images/mistral-search-graph.png)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 5,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from dotenv import load_dotenv\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"load_dotenv()  # load environment variables from .env file\\n\",\n+    \"MISTRAL_API_KEY = os.getenv(\\\"MISTRAL_API_KEY\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Scraper Definitions\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 7,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"import aiohttp\\n\",\n+    \"import asyncio\\n\",\n+    \"import nest_asyncio\\n\",\n+    \"from bs4 import BeautifulSoup\\n\",\n+    \"from concurrent.futures import ThreadPoolExecutor\\n\",\n+    \"import requests\\n\",\n+    \"import re\\n\",\n+    \"import pandas as pd\\n\",\n+    \"import faiss\\n\",\n+    \"import numpy as np\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"from mistralai.models.chat_completion import ChatMessage\\n\",\n+    \"\\n\",\n+    \"# Apply the nest_asyncio patch\\n\",\n+    \"nest_asyncio.apply()\\n\",\n+    \"\\n\",\n+    \"headers = {\\n\",\n+    \"    \\\"User-Agent\\\": \\\"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36\\\"\\n\",\n+    \"}\\n\",\n+    \"\\n\",\n+    \"total_results_to_fetch = 10  # total number of results to fetch\\n\",\n+    \"chunk_size = 1000  # size of each text chunk\\n\",\n+    \"\\n\",\n+    \"dataframe_out_path = 'temp.csv'\\n\",\n+    \"faiss_index_path = 'faiss_index.index'\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = MISTRAL_API_KEY  # replace with your actual API key\\n\",\n+    \"client = MistralClient(api_key=mistral_api_key)\\n\",\n+    \"\\n\",\n+    \"async def fetch(session, url, params=None):\\n\",\n+    \"    async with session.get(url, params=params, headers=headers, timeout=30) as response:\\n\",\n+    \"        return await response.text()\\n\",\n+    \"\\n\",\n+    \"async def fetch_page(session, params, page_num, results):\\n\",\n+    \"    print(f\\\"Fetching page: {page_num}\\\")\\n\",\n+    \"    params[\\\"start\\\"] = (page_num - 1) * params[\\\"num\\\"]\\n\",\n+    \"    html = await fetch(session, \\\"https://www.google.com/search\\\", params)\\n\",\n+    \"    soup = BeautifulSoup(html, 'html.parser')\\n\",\n+    \"\\n\",\n+    \"    for result in soup.select(\\\".tF2Cxc\\\"):\\n\",\n+    \"        if len(results) >= total_results_to_fetch:\\n\",\n+    \"            break\\n\",\n+    \"        title = result.select_one(\\\".DKV0Md\\\").text\\n\",\n+    \"        links = result.select_one(\\\".yuRUbf a\\\")[\\\"href\\\"]\\n\",\n+    \"\\n\",\n+    \"        results.append({\\n\",\n+    \"            \\\"title\\\": title,\\n\",\n+    \"            \\\"links\\\": links\\n\",\n+    \"        })\\n\",\n+    \"\\n\",\n+    \"async def fetch_content(session, url):\\n\",\n+    \"    async with session.get(url, headers=headers, timeout=30) as response:\\n\",\n+    \"        return await response.text()\\n\",\n+    \"\\n\",\n+    \"async def fetch_all_content(urls):\\n\",\n+    \"    async with aiohttp.ClientSession() as session:\\n\",\n+    \"        tasks = [fetch_content(session, url) for url in urls]\\n\",\n+    \"        return await asyncio.gather(*tasks)\\n\",\n+    \"\\n\",\n+    \"def get_all_text_from_url(url):\\n\",\n+    \"    response = requests.get(url, headers=headers, timeout=30)\\n\",\n+    \"    soup = BeautifulSoup(response.text, 'html.parser')\\n\",\n+    \"    for script in soup([\\\"script\\\", \\\"style\\\"]):\\n\",\n+    \"        script.extract()\\n\",\n+    \"    text = soup.get_text()\\n\",\n+    \"    lines = (line.strip() for line in text.splitlines())\\n\",\n+    \"    chunks = (phrase.strip() for line in lines for phrase in line.split(\\\"  \\\"))\\n\",\n+    \"    text = '\\\\n'.join(chunk for chunk in chunks if chunk)\\n\",\n+    \"    return text\\n\",\n+    \"\\n\",\n+    \"def split_text_into_chunks(text, chunk_size):\\n\",\n+    \"    sentences = re.split(r'(?<=[.!?]) +', text)\\n\",\n+    \"    chunks = []\\n\",\n+    \"    current_chunk = []\\n\",\n+    \"\\n\",\n+    \"    for sentence in sentences:\\n\",\n+    \"        if sum(len(s) for s in current_chunk) + len(sentence) + 1 > chunk_size:\\n\",\n+    \"            chunks.append(' '.join(current_chunk))\\n\",\n+    \"            current_chunk = [sentence]\\n\",\n+    \"        else:\\n\",\n+    \"            current_chunk.append(sentence)\\n\",\n+    \"\\n\",\n+    \"    if current_chunk:\\n\",\n+    \"        chunks.append(' '.join(current_chunk))\\n\",\n+    \"\\n\",\n+    \"    return chunks\\n\",\n+    \"\\n\",\n+    \"async def process_text_content(texts, chunk_size):\\n\",\n+    \"    loop = asyncio.get_event_loop()\\n\",\n+    \"    tasks = [loop.run_in_executor(None, split_text_into_chunks, text, chunk_size) for text in texts]\\n\",\n+    \"    return await asyncio.gather(*tasks)\\n\",\n+    \"\\n\",\n+    \"async def get_embeddings_from_mistral(client, text_chunks):\\n\",\n+    \"    response = client.embeddings(model=\\\"mistral-embed\\\", input=text_chunks)\\n\",\n+    \"    return [embedding.embedding for embedding in response.data]\\n\",\n+    \"\\n\",\n+    \"async def fetch_and_process_data(search_query):\\n\",\n+    \"    params = {\\n\",\n+    \"        \\\"q\\\": search_query,  # query example\\n\",\n+    \"        \\\"hl\\\": \\\"en\\\",         # language\\n\",\n+    \"        \\\"gl\\\": \\\"uk\\\",         # country of the search, UK -> United Kingdom\\n\",\n+    \"        \\\"start\\\": 0,         # number page by default up to 0\\n\",\n+    \"        \\\"num\\\": 10           # parameter defines the maximum number of results to return per page.\\n\",\n+    \"    }\\n\",\n+    \"    \\n\",\n+    \"    async with aiohttp.ClientSession() as session:\\n\",\n+    \"        page_num = 0\\n\",\n+    \"        results = []\\n\",\n+    \"        while len(results) < total_results_to_fetch:\\n\",\n+    \"            page_num += 1\\n\",\n+    \"            await fetch_page(session, params, page_num, results)\\n\",\n+    \"\\n\",\n+    \"        urls = [result['links'] for result in results]\\n\",\n+    \"\\n\",\n+    \"        with ThreadPoolExecutor(max_workers=10) as executor:\\n\",\n+    \"            loop = asyncio.get_event_loop()\\n\",\n+    \"            texts = await asyncio.gather(\\n\",\n+    \"                *[loop.run_in_executor(executor, get_all_text_from_url, url) for url in urls]\\n\",\n+    \"            )\\n\",\n+    \"\\n\",\n+    \"        chunks_list = await process_text_content(texts, chunk_size)\\n\",\n+    \"\\n\",\n+    \"        embeddings_list = []\\n\",\n+    \"        for chunks in chunks_list:\\n\",\n+    \"            embeddings = await get_embeddings_from_mistral(client, chunks)\\n\",\n+    \"            embeddings_list.append(embeddings)\\n\",\n+    \"\\n\",\n+    \"        data = []\\n\",\n+    \"        for i, result in enumerate(results):\\n\",\n+    \"            if i >= len(embeddings_list):\\n\",\n+    \"                print(f\\\"Error: No embeddings returned for result {i}\\\")\\n\",\n+    \"                continue\\n\",\n+    \"            for j, chunk in enumerate(chunks_list[i]):\\n\",\n+    \"                if j >= len(embeddings_list[i]):\\n\",\n+    \"                    print(f\\\"Error: No embedding returned for chunk {j} of result {i}\\\")\\n\",\n+    \"                    continue\\n\",\n+    \"                data.append({\\n\",\n+    \"                    'title': result['title'],\\n\",\n+    \"                    'url': result['links'],\\n\",\n+    \"                    'chunk': chunk,\\n\",\n+    \"                    'embedding': embeddings_list[i][j]\\n\",\n+    \"                })\\n\",\n+    \"\\n\",\n+    \"        df = pd.DataFrame(data)\\n\",\n+    \"        df.to_csv(dataframe_out_path, index=False)\\n\",\n+    \"\\n\",\n+    \"        # FAISS indexing\\n\",\n+    \"        dimension = len(embeddings_list[0][0])  # assuming all embeddings have the same dimension\\n\",\n+    \"        index = faiss.IndexFlatL2(dimension)\\n\",\n+    \"\\n\",\n+    \"        embeddings = np.array([entry['embedding'] for entry in data], dtype=np.float32)\\n\",\n+    \"        index.add(embeddings)\\n\",\n+    \"\\n\",\n+    \"        faiss.write_index(index, faiss_index_path)\\n\",\n+    \"\\n\",\n+    \"await fetch_and_process_data(\\\"What is the latest news about apple and openai?\\\")\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## little embeddings and vector store creation\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"[{'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': '\u201cThis is a method to allow Apple to make up for the fact that they haven\u2019t been focused on AI like they should have done over the last decade or so.\u201d Apple Intelligence was one of many announcements and updates from Apple\\\\non Monday, including a feature that lets AirPods Pro users nod yes or shake their heads no to Siri\u2019s questions when they are in crowded spaces. Additionally, the company announced that the\\\\nVision Pro headset will also be available in additional countries starting later this month, including mainland China, Hong Kong, Japan and Singapore.The company also unveiled a new feature called InSight for its tvOS18 that is similar to Amazon\u2019s X-Ray and shows the names of actors or a song playing on an Apple TV+ program.\\\\nCompany Town\\\\nScarlett Johansson also thinks OpenAI\u2019s new voice sounds like her. She\u2019s not happy about it\\\\nJohansson, who portrayed the voice of a computer program in \u2018Her,\u2019 was not behind OpenAI\u2019s \u2018Sky\u2019 voice assistant.'},\\n\",\n+       \" {'title': \\\"Apple partners with OpenAI as it unveils 'Apple Intelligence'\\\",\\n\",\n+       \"  'url': 'https://www.hurriyetdailynews.com/apple-partners-with-openai-as-it-unveils-apple-intelligence-197301',\\n\",\n+       \"  'chunk': 'They\\\\'re selling you down the river,\\\" Musk said in a post on social media.\\\\nApple Intelligence, which runs only on the company\\\\'s in-house technology, will enable users to create their own emojis based on a description in everyday language, or to generate brief summaries of e-mails in the mailbox.\\\\nApple said Siri, its voice assistant, will also get an AI infused upgrade and now will appear as a pulsating light on the edge of your home screen.\\\\nApple said it expected to announce support for other AI models in the future.\\\\nThe company founded by Steve Jobs had remained very quiet on AI since the start of the ChatGPT-sparked frenzy, with Apple for a while avoiding the term altogether.\\\\nBut the pressure became too great, with Wall Street propelling Microsoft past Apple as the world\\\\'s biggest company when measured by stock price, largely because of the Windows-maker\\\\'s unabashed embrace of AI.\\\\nQuark.Models.Entities.Ancestor?.Title?.ToUpperInvariant()\\\\n\u2018Over 400,000 irregular migrants voluntarily left T\u00fcrkiye in one year\u2019\\\\nLATEST NEWS\\\\n\u2018Over 400,000 irregular migrants voluntarily left T\u00fcrkiye in one year\u2019\\\\nIsrael parliament revives bill on ultra-Orthodox conscription\\\\nHouseholds spend most on rent, transport and food\\\\nAnkara sent note to London over basketball team\u2019s visa crisis, parliamentary question reveals\\\\nJapan biochemist who discovered statins, Akira Endo, dies\\\\nRecommended\\\\nHouseholds spend most on rent, transport and food\\\\nRetail sales growth continues to lose momentum\\\\nHenkel\u2019s revenue hits 5.3 billion euros in first quarter\\\\nChiquita liable for financing Colombian paramilitaries: Jury\\\\nSingapore Airline offers pay to victims of severe turbulence\\\\nIntel suspends expansion of factory plan in Israel\\\\nWORLD\\\\nIsrael parliament revives bill on ultra-Orthodox conscription\\\\nIsrael\\\\'s parliament voted Tuesday to revive a controversial bill to conscript ultra-Orthodox Jews, which is backed by Prime Minister Benjamin Netanyahu but has been criticised by his defense minister.\\\\nECONOMY\\\\nHouseholds spend most on rent, transport and food\\\\nHousing and rent, transport and food had the largest shares in households\u2019 total consumption expenditures last year, a survey by the Turkish Statistical Institute (T\u00dc\u0130K) has shown.\\\\nSPORTS\\\\nAli Ko\u00e7 reelected as Fenerbah\u00e7e president\\\\nBusinessman Ali Ko\u00e7 was reelected as the president of Fenerbah\u00e7e following an election held at the club\\\\'s ordinary general assembly on June 9.\\\\nT\u00fcrkiye\\\\nEconomy\\\\nOpinion\\\\nWorld\\\\nArts & Life\\\\nSports\\\\nVideo\\\\nPhoto\\\\n\u00a9\\\\nH\u00fcrriyet Daily News\\\\nPrivacy Policy\\\\nWork With Us\\\\nAbout the Newsroom\\\\nLetters to the Editor\\\\nAdvertise\\\\n\\\\ufeff'},\\n\",\n+       \" {'title': 'Apple doubles down on artificial intelligence, announcing ...',\\n\",\n+       \"  'url': 'https://www.npr.org/2024/06/10/nx-s1-4999051/apple-artificial-intelligence-partnership-openai-chatgpt-siri-iphone',\\n\",\n+       \"  'chunk': \\\"OpenAI itself has been embroiled in allegations of copying actor Scartlett Johansson\u2019s voice without her permission. Apple is also at the center of an antitrust lawsuit filed by the Justice Department and 15 states. The government accuses Apple of abusing its power as a monopoly to push out rivals and keep customers using its products. It\u2019s unclear how Apple\u2019s new partnership with OpenAI could play into this case. Shortly after Apple\u2019s announcement, OpenAI CEO Sam Altman posted on X, formerly known as Twitter, \u201cvery happy to be partnering with apple to integrate chatgpt into their devices later this year! think you will really like it.\u201d\\\\nApple is also rolling out what it calls Apple Intelligence, its term for Apple's own new generative AI software. Apple Intelligence will enable transcription for phone calls, AI photo retouching and improvements in the natural conversation flow with Siri, the company said.\\\"},\\n\",\n+       \" {'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': 'Tools made by San Francisco-based OpenAI have been used to create\\\\nmusic videos, read bedtime stories to children and help brainstorm ideas for writers. Companies including Microsoft and Google have aggressively incorporated AI into their products and services. Apple has often not been the first to market with new technological advances, choosing instead to enter new product categories \u2014 including smartphones and tablets \u2014 once they\u2019ve been established, leading to broader consumer adoption. For example, Apple only began selling its own virtual and augmented reality headset (known as Vision Pro) early this year.\\\\nApple said its AI capabilities were created with privacy protections in mind.'},\\n\",\n+       \" {'title': 'Apple announces deal with OpenAI. Will it be a game- ...',\\n\",\n+       \"  'url': 'https://www.latimes.com/entertainment-arts/business/story/2024-06-10/apple-announces-leap-into-ai-will-it-be-a-game-changer',\\n\",\n+       \"  'chunk': 'Apple announces deal with OpenAI. Will it be a game-changer? - Los Angeles Times\\\\nNews\\\\nHome Page\\\\nCalifornia\\\\nElection 2024\\\\nHousing & Homelessness\\\\nPolitics\\\\nScience & Medicine\\\\nWorld & Nation\\\\nBusiness\\\\nArtificial Intelligence\\\\nAutos\\\\nJobs, Labor & Workplace\\\\nReal Estate\\\\nTechnology and the Internet\\\\nCalifornia\\\\nCalifornia Politics\\\\nEarthquakes\\\\nEducation\\\\nHousing & Homelessness\\\\nL.A. Influential\\\\nL.A. Politics\\\\nMental Health\\\\nClimate & Environment\\\\nGlobal Warming\\\\nWater & Drought\\\\nEntertainment & Arts\\\\nArts\\\\nBooks\\\\nStand-Up Comedy\\\\nCompany Town\\\\nThe Envelope (Awards)\\\\nMovies\\\\nMusic\\\\nTelevision\\\\nThings to Do\\\\nDe Los\\\\nEn Espa\u00f1ol\\\\nFood\\\\n101 best restaurants in L.A.\\\\nRecipes\\\\nImage\\\\nLifestyle\\\\nHealth & Wellness\\\\nHome Design\\\\nL.A.'}]\"\n+      ]\n+     },\n+     \"execution_count\": 8,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"def query_vector_store(query_embedding, k=5):\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    Query the FAISS vector store and return the text results along with metadata.\\n\",\n+    \"\\n\",\n+    \"    :param query_embedding: The embedding to query with.\\n\",\n+    \"    :param k: Number of nearest neighbors to retrieve.\\n\",\n+    \"    :return: List of dictionaries containing text results and metadata of the k nearest neighbors.\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    # Load the index\\n\",\n+    \"\\n\",\n+    \"    index = faiss.read_index(faiss_index_path)\\n\",\n+    \"\\n\",\n+    \"    # Ensure the query embedding is a numpy array with the correct shape\\n\",\n+    \"    if not isinstance(query_embedding, np.ndarray):\\n\",\n+    \"        query_embedding = np.array(query_embedding, dtype=np.float32)\\n\",\n+    \"    if query_embedding.ndim == 1:\\n\",\n+    \"        query_embedding = np.expand_dims(query_embedding, axis=0)\\n\",\n+    \"\\n\",\n+    \"    # Query the index\\n\",\n+    \"    distances, indices = index.search(query_embedding, k)\\n\",\n+    \"    \\n\",\n+    \"    # Load the dataframe\\n\",\n+    \"    df = pd.read_csv(dataframe_out_path)\\n\",\n+    \"    \\n\",\n+    \"    # Retrieve the text results and metadata\\n\",\n+    \"    results = []\\n\",\n+    \"    for idx in indices[0]:\\n\",\n+    \"        result = {\\n\",\n+    \"            'title': df.iloc[idx]['title'],\\n\",\n+    \"            'url': df.iloc[idx]['url'],\\n\",\n+    \"            'chunk': df.iloc[idx]['chunk']\\n\",\n+    \"        }\\n\",\n+    \"        results.append(result)\\n\",\n+    \"    \\n\",\n+    \"    return results\\n\",\n+    \"\\n\",\n+    \"def query_embeddings(texts):\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    Convert text to embeddings using Mistral AI API.\\n\",\n+    \"\\n\",\n+    \"    :param api_key: Your Mistral API key.\\n\",\n+    \"    :param texts: List of texts to convert to embeddings.\\n\",\n+    \"    :return: List of embeddings.\\n\",\n+    \"    \\\"\\\"\\\"\\n\",\n+    \"    client = MistralClient(api_key=MISTRAL_API_KEY)\\n\",\n+    \"    response = client.embeddings(model=\\\"mistral-embed\\\", input=[texts])\\n\",\n+    \"    return [embedding.embedding for embedding in response.data]\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"embeddings = query_embeddings(\\\"AGI\\\")\\n\",\n+    \"results = query_vector_store(embeddings[0], k=5)\\n\",\n+    \"results\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## tools definition\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\",\n+      \"[{'title': \\\"Microsoft partners with France's Mistral AI, an OpenAI rival\\\", 'url': 'https://apnews.com/article/mistral-ai-lechat-microsoft-openai-cbd6f5604fa577a0d1e7f9047708b718', 'chunk': 'Mistral has also previously said it is teaming up with other big cloud providers including Amazon and Google.\\\\nRELATED COVERAGE\\\\nUS antitrust enforcers will investigate leading AI companies Microsoft, Nvidia and OpenAI\\\\nAI \u2018gold rush\u2019 for chatbot training data could run out of human-written text\\\\nFormer OpenAI employees lead push to protect whistleblowers flagging artificial intelligence risks\\\\nMistral made a big splash by attracting big amounts of investor funding to give it a multibillion-dollar valuation just months after it was founded last spring. It was started by three French former researchers from Google and Meta: CEO Arthur Mensch, Chief Scientist Guillaume Lample and Chief Technology Officer Timothee Lacroix.\\\\nIt has advertised an \u201copen-source\u201d approach to developing AI that involves publicly releasing key components of some AI systems, in contrast to companies such as OpenAI that closely guard them.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'Something went wrong while submitting the form.PricingLog inSign upCase studies\\\\nHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsSaveSavedToday I\u00e2\\\\x80\\\\x99m diving deep into Mistral AI, who are making headlines after recently closing their (huge) Series A round. Launched just 7 months ago, they\u00e2\\\\x80\\\\x99re disrupting the LLM market. I want to look at how they\u00e2\\\\x80\\\\x99re doing it - and how you can take advantage.This post covers:What is Mistral?Who\u00e2\\\\x80\\\\x99s behind it?The timeline: What\u00e2\\\\x80\\\\x99s happened to dateFundraisingProduct OverviewA peek inside their seed deck \u00f0\\\\x9f\\\\x91\\\\x80 Roadmap analysis. Are they achieving what they set out to do?5 big reasons Mistral\u00e2\\\\x80\\\\x99s making waves \u00f0\\\\x9f\\\\x8c\\\\x8aHow people actually use MistralOpportunities and how you can take advantageWhat developers think of MistralWhat is Mistral?A French startup that develops fast, open-source and secure language models.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'As Mistral has been true to the promise of releasing open models, the community (and other companies) have taken Mistral\u00e2\\\\x80\\\\x99s models and created better models on top of them. For example, OpenHermes 2.5 by Teknium and Neural Chat 7B by Intel.With AI models, open source takes many forms: from available to use locally but no details about the model (weights, architecture etc.) to models that are fully open source and allow users to train on the outputs.While Mistral\u00e2\\\\x80\\\\x99s models were open-weights from the start, Mistral\u00e2\\\\x80\\\\x99s latest announcement had a line in their Terms of Service Terms of Service which was spotted by Far El on Twitter, said:Basically, you can\u00e2\\\\x80\\\\x99t use it to train or improve other models or compete against them\u00e2\\\\x80\u00a6It wasn\u00e2\\\\x80\\\\x99t clear whether this was just for the API platform or the model itself. And unfortunately, open-source means you should be able to use this tech how you like, that\u00e2\\\\x80\\\\x99s kind of the point.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'Founded in 2023 by Arthur Mensch, Guillaume Lample, and Timoth\u00c3\u00a9e Lacroix.They\u00e2\\\\x80\\\\x99ve raised over $650M in funding, are valued at $2Bn, are less than a year old and have 22 employees.monthly search volume for \u00e2\\\\x80\\\\x98mistral ai\u00e2\\\\x80\\\\x99The company is important for a few reasons;It\u00e2\\\\x80\\\\x99s actually open-source, you know like OpenAI was supposed to be? Or how LlaMA by Meta kinda is but isn\u00e2\\\\x80\\\\x99t?It\u00e2\\\\x80\\\\x99s developed 2 AI models in less than a year.It\u00e2\\\\x80\\\\x99s French.The founders are 3 researchers from DeepMind and Meta who aimed to beat GPT 3.5 by year-end.'}, {'title': 'How Mistral AI, an OpenAI competitor, rocketed to $2Bn in ...', 'url': 'https://www.bensbites.com/case-study/how-mistral-ai-an-openai-competitor-rocketed-to-2bn-in-12-months', 'chunk': 'The big debate.Mistral believes (as do many others, myself included) that there are several concerns with closed AI approaches; businesses have to send sensitive data to it, only exposing the outputs doesn\u00e2\\\\x80\\\\x99t help connect with other components (retrieval, structure inputs etc) and the data used to train the models are secret (so we assume it can do some things it perhaps hasn\u00e2\\\\x80\\\\x99t been trained on).Now the bold stuff.\u00e2\\\\x80\\\\x9cMistral will offer the best technology in 4 years\u00e2\\\\x80\\\\x9d.How?They\u00e2\\\\x80\\\\x99ll take a more open approach to model development.Tighter integration with customers\u00e2\\\\x80\\\\x99 workflows.Increase focus on data sources and control.Propose unmatched guarantees on security and privacy.There\u00e2\\\\x80\\\\x99s a lot more detail in their deck on the above 4 points.As far as business focus goes\u00e2\\\\x80\u00a6\u00e2\\\\x80\\\\x9cOn the business side, we will provide the most valuable technology brick to the emerging AI-as-a-service industry that will revolutionise business workflows with generative AI.'}]\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"\\n\",\n+    \"nest_asyncio.apply()\\n\",\n+    \"\\n\",\n+    \"tools = [\\n\",\n+    \"    {\\n\",\n+    \"        \\\"type\\\": \\\"function\\\",\\n\",\n+    \"        \\\"function\\\": {\\n\",\n+    \"            \\\"name\\\": \\\"mistral_web_search\\\",\\n\",\n+    \"            \\\"description\\\": \\\"Fetch and process data from Google search based on a query, store results in FAISS vector store, and retrieve results.\\\",\\n\",\n+    \"            \\\"parameters\\\": {\\n\",\n+    \"                \\\"type\\\": \\\"object\\\",\\n\",\n+    \"                \\\"properties\\\": {\\n\",\n+    \"                    \\\"search_query\\\": {\\n\",\n+    \"                        \\\"type\\\": \\\"string\\\",\\n\",\n+    \"                        \\\"description\\\": \\\"The search query to use for fetching data from Google search.\\\"\\n\",\n+    \"                    }\\n\",\n+    \"                },\\n\",\n+    \"                \\\"required\\\": [\\\"search_query\\\"]\\n\",\n+    \"            },\\n\",\n+    \"        },\\n\",\n+    \"    },\\n\",\n+    \"]\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def mistral_web_search(search_query: str):\\n\",\n+    \"    async def run_search():\\n\",\n+    \"        await fetch_and_process_data(search_query)\\n\",\n+    \"        embeddings = query_embeddings(search_query)\\n\",\n+    \"        results_ = query_vector_store(embeddings[0], k=5)\\n\",\n+    \"        return results_\\n\",\n+    \"\\n\",\n+    \"    return asyncio.run(run_search())\\n\",\n+    \"\\n\",\n+    \"search_query = \\\"mistral and openai\\\"\\n\",\n+    \"results = mistral_web_search(search_query)\\n\",\n+    \"print(results)\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 10,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"'Mistral has also previously said it is teaming up with other big cloud providers including Amazon and Google.\\\\nRELATED COVERAGE\\\\nUS antitrust enforcers will investigate leading AI companies Microsoft, Nvidia and OpenAI\\\\nAI \u2018gold rush\u2019 for chatbot training data could run out of human-written text\\\\nFormer OpenAI employees lead push to protect whistleblowers flagging artificial intelligence risks\\\\nMistral made a big splash by attracting big amounts of investor funding to give it a multibillion-dollar valuation just months after it was founded last spring. It was started by three French former researchers from Google and Meta: CEO Arthur Mensch, Chief Scientist Guillaume Lample and Chief Technology Officer Timothee Lacroix.\\\\nIt has advertised an \u201copen-source\u201d approach to developing AI that involves publicly releasing key components of some AI systems, in contrast to companies such as OpenAI that closely guard them.\\\\nSomething went wrong while submitting the form.PricingLog inSign upCase studies\\\\nHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsHow Mistral AI, an OpenAI competitor, rocketed to $2Bn in <12 monthsSaveSavedToday I\u00e2\\\\x80\\\\x99m diving deep into Mistral AI, who are making headlines after recently closing their (huge) Series A round. Launched just 7 months ago, they\u00e2\\\\x80\\\\x99re disrupting the LLM market. I want to look at how they\u00e2\\\\x80\\\\x99re doing it - and how you can take advantage.This post covers:What is Mistral?Who\u00e2\\\\x80\\\\x99s behind it?The timeline: What\u00e2\\\\x80\\\\x99s happened to dateFundraisingProduct OverviewA peek inside their seed deck \u00f0\\\\x9f\\\\x91\\\\x80 Roadmap analysis. Are they achieving what they set out to do?5 big reasons Mistral\u00e2\\\\x80\\\\x99s making waves \u00f0\\\\x9f\\\\x8c\\\\x8aHow people actually use MistralOpportunities and how you can take advantageWhat developers think of MistralWhat is Mistral?A French startup that develops fast, open-source and secure language models.\\\\nAs Mistral has been true to the promise of releasing open models, the community (and other companies) have taken Mistral\u00e2\\\\x80\\\\x99s models and created better models on top of them. For example, OpenHermes 2.5 by Teknium and Neural Chat 7B by Intel.With AI models, open source takes many forms: from available to use locally but no details about the model (weights, architecture etc.) to models that are fully open source and allow users to train on the outputs.While Mistral\u00e2\\\\x80\\\\x99s models were open-weights from the start, Mistral\u00e2\\\\x80\\\\x99s latest announcement had a line in their Terms of Service Terms of Service which was spotted by Far El on Twitter, said:Basically, you can\u00e2\\\\x80\\\\x99t use it to train or improve other models or compete against them\u00e2\\\\x80\u00a6It wasn\u00e2\\\\x80\\\\x99t clear whether this was just for the API platform or the model itself. And unfortunately, open-source means you should be able to use this tech how you like, that\u00e2\\\\x80\\\\x99s kind of the point.\\\\nFounded in 2023 by Arthur Mensch, Guillaume Lample, and Timoth\u00c3\u00a9e Lacroix.They\u00e2\\\\x80\\\\x99ve raised over $650M in funding, are valued at $2Bn, are less than a year old and have 22 employees.monthly search volume for \u00e2\\\\x80\\\\x98mistral ai\u00e2\\\\x80\\\\x99The company is important for a few reasons;It\u00e2\\\\x80\\\\x99s actually open-source, you know like OpenAI was supposed to be? Or how LlaMA by Meta kinda is but isn\u00e2\\\\x80\\\\x99t?It\u00e2\\\\x80\\\\x99s developed 2 AI models in less than a year.It\u00e2\\\\x80\\\\x99s French.The founders are 3 researchers from DeepMind and Meta who aimed to beat GPT 3.5 by year-end.\\\\nThe big debate.Mistral believes (as do many others, myself included) that there are several concerns with closed AI approaches; businesses have to send sensitive data to it, only exposing the outputs doesn\u00e2\\\\x80\\\\x99t help connect with other components (retrieval, structure inputs etc) and the data used to train the models are secret (so we assume it can do some things it perhaps hasn\u00e2\\\\x80\\\\x99t been trained on).Now the bold stuff.\u00e2\\\\x80\\\\x9cMistral will offer the best technology in 4 years\u00e2\\\\x80\\\\x9d.How?They\u00e2\\\\x80\\\\x99ll take a more open approach to model development.Tighter integration with customers\u00e2\\\\x80\\\\x99 workflows.Increase focus on data sources and control.Propose unmatched guarantees on security and privacy.There\u00e2\\\\x80\\\\x99s a lot more detail in their deck on the above 4 points.As far as business focus goes\u00e2\\\\x80\u00a6\u00e2\\\\x80\\\\x9cOn the business side, we will provide the most valuable technology brick to the emerging AI-as-a-service industry that will revolutionise business workflows with generative AI.'\"\n+      ]\n+     },\n+     \"execution_count\": 10,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"\\\"\\\"\\\" little helper function to extract only the texts \\\"\\\"\\\"\\n\",\n+    \"def tools_to_str(tools_output: list) -> str:\\n\",\n+    \"    return '\\\\n'.join([tool['chunk'] for tool in tools_output])\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"tools_to_str(mistral_web_search(search_query))\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 11,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import functools\\n\",\n+    \"\\n\",\n+    \"names_to_functions = {\\n\",\n+    \"    'mistral_web_search': functools.partial(mistral_web_search),\\n\",\n+    \"}\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## chat\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 12,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages = [\\n\",\n+    \"    ChatMessage(role=\\\"user\\\", content=\\\"What happend during apple WWDC 2024?\\\"),\\n\",\n+    \"]\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 13,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"ChatCompletionResponse(id='ed2e245edaf04b3e96fea1a914e9e97f', object='chat.completion', created=1718097895, model='mistral-large-latest', choices=[ChatCompletionResponseChoice(index=0, message=ChatMessage(role='assistant', content='', name=None, tool_calls=[ToolCall(id='wq5uJdILV', type=<ToolType.function: 'function'>, function=FunctionCall(name='mistral_web_search', arguments='{\\\"search_query\\\": \\\"apple WWDC 2024\\\"}'))], tool_call_id=None), finish_reason=<FinishReason.tool_calls: 'tool_calls'>)], usage=UsageInfo(prompt_tokens=121, total_tokens=156, completion_tokens=35))\"\n+      ]\n+     },\n+     \"execution_count\": 13,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"model = \\\"mistral-large-latest\\\"\\n\",\n+    \"\\n\",\n+    \"client = MistralClient(api_key=MISTRAL_API_KEY)\\n\",\n+    \"response = client.chat(model=model, messages=messages, tools=tools, tool_choice=\\\"any\\\")\\n\",\n+    \"response\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 14,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages.append(response.choices[0].message)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 15,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"\\n\",\n+      \"function_name:  mistral_web_search \\n\",\n+      \"function_params:  {'search_query': 'apple WWDC 2024'}\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"import json\\n\",\n+    \"\\n\",\n+    \"tool_call = response.choices[0].message.tool_calls[0]\\n\",\n+    \"function_name = tool_call.function.name\\n\",\n+    \"function_params = json.loads(tool_call.function.arguments)\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"print(\\\"\\\\nfunction_name: \\\", function_name, \\\"\\\\nfunction_params: \\\", function_params)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 16,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Fetching page: 1\\n\",\n+      \"Fetching page: 2\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"\\\"Apple WWDC 2024: the 13 biggest announcements - The VergeSkip to main contentThe VergeThe Verge logo.The Verge homepageThe Verge homepageThe VergeThe Verge logo./Tech/Reviews/Science/Entertainment/AI/MoreMenuExpandThe VergeThe Verge logo.MenuExpandWWDC 2024/Apple/TechApple WWDC 2024: the 13 biggest announcementsApple WWDC 2024: the 13 biggest announcements / Apple\u2019s WWDC keynote had a lot to do with AI.By\\\\nEmma Roth, a news writer who covers the streaming wars, consumer tech, crypto, social media, and much more. Previously, she was a writer and editor at MUO.\\\\nJun 10, 2024, 6:57 PM UTCShare this storyApple\u2019s Worldwide Developers Conference keynote has come to a close \u2014 and the company had a whole lot to share.\\\\nFifty Distinguished Winners, who are recognised for outstanding submissions, will be invited to Cupertino for a three-day experience.\\\\nApple will share additional conference information in advance of WWDC24 through the Apple Developer app and website.\\\\nShare article\\\\nMedia\\\\nText of this article\\\\n26 March 2024\\\\nPRESS RELEASE\\\\nApple\u2019s Worldwide Developers Conference returns June 10, 2024\\\\nEntire conference available online for all developers, with a special event at Apple Park on June 10\\\\nCUPERTINO, CALIFORNIA Apple today announced it will host its annual Worldwide Developers Conference (WWDC) online from June 10 through 14, 2024. Developers and students will have the opportunity to celebrate in person at a special event at Apple Park on opening day.\\\\nFree for all developers, WWDC24 will spotlight the latest iOS, iPadOS, macOS, watchOS, tvOS, and visionOS advancements.\\\\niPadOS could finally get new apps like a native calculator, and some rumored new Apple Pencil 3 features.\\\\xa0We expect macOS to offer AI features, with native apps that lean on smart tools and generative AI: assisted writing in Pages, a slide deck maker in Keynote, coding in Xcode, all powered by AI.\\\\xa0When it comes to the Vision Pro and visionOS, we haven't heard much, so we're expecting a nod to spatial computing, but nothing huge coming yet. For wearables, we're not expecting big watchOS changes with watchOS 11, either.Watch WWDC 2024 live with usWWDC 2024 as it happens\\\\nRefresh\\\\n2024-06-10T16:26:28.008Z\\\\nGood morning, good afternoon and good evening, wherever you are in the world \u2013 and welcome to TechRadar's live coverage of WWDC 2024.\\\\n2024-06-10T16:45:58.710Z\\\\n(Image credit: Jacob Krol / Future)Apple's WWDC 2024 keynote is minutes away, with rumors swirling about \\\\xa0announcements focusing on artificial intelligence and Siri, Apple's languishing voice assistant.\\\\nThis year\u2019s conference will include video sessions and opportunities to engage with Apple designers and engineers and connect with the worldwide developer community.\\\\nWWDC24 will include an in-person experience on June 10 that will provide developers the opportunity to watch the keynote at Apple Park, meet with Apple team members, and take part in special activities. Space will be limited, and details on how to apply to attend can be found on the Apple Developer site and app.\\\\nApple is proud to support the next generation of developers through the Swift Student Challenge, one of many Apple programs that seek to uplift the next generation of developers, creators, and entrepreneurs. On March 28, this year\u2019s applicants will be notified of their status, and winners will be eligible to apply for the in-person experience at Apple Park. Fifty Distinguished Winners, who are recognised for outstanding submissions, will be invited to Cupertino for a three-day experience.\\\\nThis year\u2019s conference will include video sessions and opportunities to engage with Apple designers and engineers and connect with the worldwide developer community.\\\\nWWDC24 will include an in-person experience on June 10 that will provide developers the opportunity to watch the keynote at Apple Park, meet with Apple team members, and take part in special activities. Space will be limited, and details on how to apply to attend can be found on the Apple Developer site and app.\\\\nApple is proud to support the next generation of developers through the Swift Student Challenge, one of many Apple programs that seek to uplift the next generation of developers, creators, and entrepreneurs. On March 28, this year\u2019s applicants will be notified of their status, and winners will be eligible to apply for the in-person experience at Apple Park.\\\"\"\n+      ]\n+     },\n+     \"execution_count\": 16,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"function_result = tools_to_str(names_to_functions[function_name](**function_params))\\n\",\n+    \"function_result\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 17,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"\\\"Apple's Worldwide Developers Conference (WWDC) took place on June 10, 2024. The keynote focused mainly on artificial intelligence, with several announcements made. Unfortunately, I don't have real-time information, so I can't provide the specific details of the 13 biggest announcements mentioned in the article from The Verge.\\\\n\\\\nHowever, some general expectations before the event included the possibility of new apps for iPadOS such as a native calculator and new features for Apple Pencil 3. For macOS, it was anticipated that there would be AI features and smart tools integrated into native apps like Pages, Keynote, and Xcode.\\\\n\\\\nThe event also included video sessions and opportunities for developers to engage with Apple designers and engineers. There was an in-person experience at Apple Park for selected developers to watch the keynote, meet with Apple team members, and participate in special activities. Apple also continued its tradition of supporting the next generation of developers through the Swift Student Challenge.\\\"\"\n+      ]\n+     },\n+     \"execution_count\": 17,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"messages.append(ChatMessage(role=\\\"tool\\\", name=function_name, content=function_result, tool_call_id=tool_call.id))\\n\",\n+    \"\\n\",\n+    \"response = client.chat(model=model, messages=messages)\\n\",\n+    \"response.choices[0].message.content\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Chat in a chain (cleaner user experience)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"messages = []\\n\",\n+    \"\\n\",\n+    \"while True:\\n\",\n+    \"    input_ = input(\\\"Ask: \\\")\\n\",\n+    \"    messages.append(ChatMessage(role=\\\"user\\\", content=input_))\\n\",\n+    \"    response = client.chat(model=model, messages=messages, tools=tools, tool_choice=\\\"force\\\")\\n\",",
        "path": "mistral-search-engine.ipynb",
        "commit_id": "06f53ca21b9fcea8d4b00829657ec32a6459dd7c",
        "original_commit_id": "46b61de305f7047f03f9932f4acda233d04e0866",
        "user": {
          "login": "HugoLB0",
          "id": 66400773,
          "node_id": "MDQ6VXNlcjY2NDAwNzcz",
          "avatar_url": "https://avatars.githubusercontent.com/u/66400773?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/HugoLB0",
          "html_url": "https://github.com/HugoLB0",
          "followers_url": "https://api.github.com/users/HugoLB0/followers",
          "following_url": "https://api.github.com/users/HugoLB0/following{/other_user}",
          "gists_url": "https://api.github.com/users/HugoLB0/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/HugoLB0/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/HugoLB0/subscriptions",
          "organizations_url": "https://api.github.com/users/HugoLB0/orgs",
          "repos_url": "https://api.github.com/users/HugoLB0/repos",
          "events_url": "https://api.github.com/users/HugoLB0/events{/privacy}",
          "received_events_url": "https://api.github.com/users/HugoLB0/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "yea sorry you're right I keep getting confused with force and any. Just made the change !",
        "created_at": "2024-06-11T10:53:24Z",
        "updated_at": "2024-06-11T10:53:24Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634641618",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/52",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634641618"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/52#discussion_r1634641618"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/52"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1634641618/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 613,
        "side": "RIGHT",
        "in_reply_to_id": 1634598754,
        "original_position": 613,
        "position": null,
        "subject_type": "line"
      }
    ]
  },
  "39": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158302436",
        "html_url": "https://github.com/mistralai/cookbook/pull/39#issuecomment-2158302436",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/39",
        "id": 2158302436,
        "node_id": "IC_kwDOLBF5j86ApRTk",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-10T13:06:10Z",
        "updated_at": "2024-06-10T13:06:10Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @stephen37 thanks for contributing! could you add the notebook to the third-party integrations folder and could you use Mistral embeddings? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158302436/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158395267",
        "html_url": "https://github.com/mistralai/cookbook/pull/39#issuecomment-2158395267",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/39",
        "id": 2158395267,
        "node_id": "IC_kwDOLBF5j86Apn-D",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-10T13:33:16Z",
        "updated_at": "2024-06-10T13:33:50Z",
        "author_association": "COLLABORATOR",
        "body": "Since the issue seems to be the fact that the data is originally French we could switch to a different one in English.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158395267/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2176554887",
        "html_url": "https://github.com/mistralai/cookbook/pull/39#issuecomment-2176554887",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/39",
        "id": 2176554887,
        "node_id": "IC_kwDOLBF5j86Bu5eH",
        "user": {
          "login": "stephen37",
          "id": 6506810,
          "node_id": "MDQ6VXNlcjY1MDY4MTA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6506810?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stephen37",
          "html_url": "https://github.com/stephen37",
          "followers_url": "https://api.github.com/users/stephen37/followers",
          "following_url": "https://api.github.com/users/stephen37/following{/other_user}",
          "gists_url": "https://api.github.com/users/stephen37/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/stephen37/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/stephen37/subscriptions",
          "organizations_url": "https://api.github.com/users/stephen37/orgs",
          "repos_url": "https://api.github.com/users/stephen37/repos",
          "events_url": "https://api.github.com/users/stephen37/events{/privacy}",
          "received_events_url": "https://api.github.com/users/stephen37/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-18T16:51:42Z",
        "updated_at": "2024-06-18T16:51:42Z",
        "author_association": "NONE",
        "body": "> Hi @stephen37 thanks for contributing! could you add the notebook to the third-party integrations folder and could you use Mistral embeddings? Thanks!\r\n\r\nHey @sophiamyang, I moved it to the third party folder and changed to Mistral Embeddings, let me know what you think now \ud83d\ude4f",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2176554887/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2236583423",
        "html_url": "https://github.com/mistralai/cookbook/pull/39#issuecomment-2236583423",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/39",
        "id": 2236583423,
        "node_id": "IC_kwDOLBF5j86FT43_",
        "user": {
          "login": "stephen37",
          "id": 6506810,
          "node_id": "MDQ6VXNlcjY1MDY4MTA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6506810?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stephen37",
          "html_url": "https://github.com/stephen37",
          "followers_url": "https://api.github.com/users/stephen37/followers",
          "following_url": "https://api.github.com/users/stephen37/following{/other_user}",
          "gists_url": "https://api.github.com/users/stephen37/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/stephen37/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/stephen37/subscriptions",
          "organizations_url": "https://api.github.com/users/stephen37/orgs",
          "repos_url": "https://api.github.com/users/stephen37/repos",
          "events_url": "https://api.github.com/users/stephen37/events{/privacy}",
          "received_events_url": "https://api.github.com/users/stephen37/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-18T13:49:47Z",
        "updated_at": "2024-07-18T13:49:47Z",
        "author_association": "NONE",
        "body": "Hey @sophiamyang, do you think it's good to merge now? \ud83d\ude04 ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2236583423/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521097223",
        "html_url": "https://github.com/mistralai/cookbook/pull/39#issuecomment-2521097223",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/39",
        "id": 2521097223,
        "node_id": "IC_kwDOLBF5j86WROQH",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-05T18:14:55Z",
        "updated_at": "2024-12-05T18:14:55Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @stephen37 , thank you so much for the cookbook! We are ready to merge this cookbook! However, I got an error:\r\n```ValueError: ServiceContext is deprecated. Use llama_index.settings.Settings instead,``` \r\n\r\nCould you help update the syntax and tag the package version in case llamaindex has more changes? Also, wondering if you could help add another example using Mistral API in addition to Ollama? Thanks so much! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521097223/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2538063564",
        "html_url": "https://github.com/mistralai/cookbook/pull/39#issuecomment-2538063564",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/39",
        "id": 2538063564,
        "node_id": "IC_kwDOLBF5j86XR8bM",
        "user": {
          "login": "stephen37",
          "id": 6506810,
          "node_id": "MDQ6VXNlcjY1MDY4MTA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6506810?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/stephen37",
          "html_url": "https://github.com/stephen37",
          "followers_url": "https://api.github.com/users/stephen37/followers",
          "following_url": "https://api.github.com/users/stephen37/following{/other_user}",
          "gists_url": "https://api.github.com/users/stephen37/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/stephen37/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/stephen37/subscriptions",
          "organizations_url": "https://api.github.com/users/stephen37/orgs",
          "repos_url": "https://api.github.com/users/stephen37/repos",
          "events_url": "https://api.github.com/users/stephen37/events{/privacy}",
          "received_events_url": "https://api.github.com/users/stephen37/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-12T07:58:17Z",
        "updated_at": "2024-12-12T07:58:17Z",
        "author_association": "NONE",
        "body": "@sophiamyang Sorry for the delay, I was on holiday last week but I pushed a new commit addressing your concerns, let me know what you think :) ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2538063564/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2551978881",
        "html_url": "https://github.com/mistralai/cookbook/pull/39#issuecomment-2551978881",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/39",
        "id": 2551978881,
        "node_id": "IC_kwDOLBF5j86YHBuB",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-18T18:14:19Z",
        "updated_at": "2024-12-18T18:14:19Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @stephen37 , thanks so much for the updates!! Looks good. However, I got an error message: \"ValueError: File data/french_parliament_discussion.xml does not exist.\". Could you help fix? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2551978881/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "38": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2130497554",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#issuecomment-2130497554",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/38",
        "id": 2130497554,
        "node_id": "IC_kwDOLBF5j85-_NAS",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-05-24T23:07:06Z",
        "updated_at": "2024-05-24T23:07:30Z",
        "author_association": "CONTRIBUTOR",
        "body": "@pablocastro @chuwik plz review :)",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2130497554/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2135553820",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#issuecomment-2135553820",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/38",
        "id": 2135553820,
        "node_id": "IC_kwDOLBF5j85_Sfcc",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-05-28T15:36:15Z",
        "updated_at": "2024-06-04T14:51:50Z",
        "author_association": "CONTRIBUTOR",
        "body": "@sophiamyang @pandora-s-git @hrjn plz review :)",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2135553820/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2137980144",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#issuecomment-2137980144",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/38",
        "id": 2137980144,
        "node_id": "IC_kwDOLBF5j85_bvzw",
        "user": {
          "login": "chuwik",
          "id": 403428,
          "node_id": "MDQ6VXNlcjQwMzQyOA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/403428?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/chuwik",
          "html_url": "https://github.com/chuwik",
          "followers_url": "https://api.github.com/users/chuwik/followers",
          "following_url": "https://api.github.com/users/chuwik/following{/other_user}",
          "gists_url": "https://api.github.com/users/chuwik/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/chuwik/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/chuwik/subscriptions",
          "organizations_url": "https://api.github.com/users/chuwik/orgs",
          "repos_url": "https://api.github.com/users/chuwik/repos",
          "events_url": "https://api.github.com/users/chuwik/events{/privacy}",
          "received_events_url": "https://api.github.com/users/chuwik/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-05-29T18:03:26Z",
        "updated_at": "2024-05-29T18:03:26Z",
        "author_association": "NONE",
        "body": "@farzad528 I still see the old link even though the comment is resolved.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2137980144/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2138253106",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#issuecomment-2138253106",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/38",
        "id": 2138253106,
        "node_id": "IC_kwDOLBF5j85_cycy",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-05-29T20:59:37Z",
        "updated_at": "2024-05-29T20:59:37Z",
        "author_association": "CONTRIBUTOR",
        "body": "updated",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2138253106/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2148033786",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#issuecomment-2148033786",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/38",
        "id": 2148033786,
        "node_id": "IC_kwDOLBF5j86ACGT6",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-04T17:17:49Z",
        "updated_at": "2024-06-04T17:18:21Z",
        "author_association": "CONTRIBUTOR",
        "body": "@fkriti @santiagxf",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2148033786/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2155186082",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#issuecomment-2155186082",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/38",
        "id": 2155186082,
        "node_id": "IC_kwDOLBF5j86AdYei",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-07T16:44:40Z",
        "updated_at": "2024-06-07T16:45:12Z",
        "author_association": "COLLABORATOR",
        "body": "why is this PR closed?  @farzad528 are you going to make another one?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2155186082/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2155187353",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#issuecomment-2155187353",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/38",
        "id": 2155187353,
        "node_id": "IC_kwDOLBF5j86AdYyZ",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-07T16:45:41Z",
        "updated_at": "2024-06-07T16:45:41Z",
        "author_association": "CONTRIBUTOR",
        "body": "@sophiamyang sorry was just pulling latest from main!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2155187353/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2155214456",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#issuecomment-2155214456",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/38",
        "id": 2155214456,
        "node_id": "IC_kwDOLBF5j86AdfZ4",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-07T17:05:32Z",
        "updated_at": "2024-06-07T17:05:32Z",
        "author_association": "COLLABORATOR",
        "body": "cool does this notebook run successfully on colab and let me know when it's ready to be merged. ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2155214456/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 1,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2155238677",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#issuecomment-2155238677",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/38",
        "id": 2155238677,
        "node_id": "IC_kwDOLBF5j86AdlUV",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-07T17:23:29Z",
        "updated_at": "2024-06-07T17:23:37Z",
        "author_association": "CONTRIBUTOR",
        "body": "> cool does this notebook run successfully on colab and let me know when it's ready to be merged.\r\n\r\n@sophiamyang  Yes! I tested e2e on colab as well! Ready to be merged! Tysm for putting this together! Would love to share this with Azure AI customers! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2155238677/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2157775493",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#issuecomment-2157775493",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/38",
        "id": 2157775493,
        "node_id": "IC_kwDOLBF5j86AnQqF",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-10T09:06:05Z",
        "updated_at": "2024-06-10T09:06:05Z",
        "author_association": "CONTRIBUTOR",
        "body": "@sophiamyang ready to merge!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2157775493/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158295484",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#issuecomment-2158295484",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/38",
        "id": 2158295484,
        "node_id": "IC_kwDOLBF5j86ApPm8",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-10T13:03:54Z",
        "updated_at": "2024-06-10T13:03:54Z",
        "author_association": "COLLABORATOR",
        "body": "Awesome thanks so much! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158295484/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1617883310",
        "pull_request_review_id": 2083834802,
        "id": 1617883310,
        "node_id": "PRRC_kwDOLBF5j85gbvCu",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.SearchV2).\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "12f0b730fd347d55400b02acb645ba9dcb3ea4e6",
        "user": {
          "login": "chuwik",
          "id": 403428,
          "node_id": "MDQ6VXNlcjQwMzQyOA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/403428?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/chuwik",
          "html_url": "https://github.com/chuwik",
          "followers_url": "https://api.github.com/users/chuwik/followers",
          "following_url": "https://api.github.com/users/chuwik/following{/other_user}",
          "gists_url": "https://api.github.com/users/chuwik/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/chuwik/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/chuwik/subscriptions",
          "organizations_url": "https://api.github.com/users/chuwik/orgs",
          "repos_url": "https://api.github.com/users/chuwik/repos",
          "events_url": "https://api.github.com/users/chuwik/events{/privacy}",
          "received_events_url": "https://api.github.com/users/chuwik/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Update https://portal.azure.com/#create/Microsoft.SearchV2 to https://portal.azure.com/#create/Microsoft.Search",
        "created_at": "2024-05-28T20:56:48Z",
        "updated_at": "2024-05-28T20:56:48Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1617883310",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1617883310"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1617883310"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1617883310/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 233,
        "side": "RIGHT",
        "original_position": 233,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1619285423",
        "pull_request_review_id": 2086076086,
        "id": 1619285423,
        "node_id": "PRRC_kwDOLBF5j85ghFWv",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.SearchV2).\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "12f0b730fd347d55400b02acb645ba9dcb3ea4e6",
        "user": {
          "login": "chuwik",
          "id": 403428,
          "node_id": "MDQ6VXNlcjQwMzQyOA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/403428?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/chuwik",
          "html_url": "https://github.com/chuwik",
          "followers_url": "https://api.github.com/users/chuwik/followers",
          "following_url": "https://api.github.com/users/chuwik/following{/other_user}",
          "gists_url": "https://api.github.com/users/chuwik/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/chuwik/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/chuwik/subscriptions",
          "organizations_url": "https://api.github.com/users/chuwik/orgs",
          "repos_url": "https://api.github.com/users/chuwik/repos",
          "events_url": "https://api.github.com/users/chuwik/events{/privacy}",
          "received_events_url": "https://api.github.com/users/chuwik/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "I still see the old link even though this is resolved.",
        "created_at": "2024-05-29T18:02:58Z",
        "updated_at": "2024-05-29T18:02:58Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1619285423",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1619285423"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1619285423"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1619285423/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 233,
        "side": "RIGHT",
        "in_reply_to_id": 1617883310,
        "original_position": 233,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622986300",
        "pull_request_review_id": 2091771801,
        "id": 1622986300,
        "node_id": "PRRC_kwDOLBF5j85gvM48",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "pablocastro",
          "id": 3433341,
          "node_id": "MDQ6VXNlcjM0MzMzNDE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3433341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pablocastro",
          "html_url": "https://github.com/pablocastro",
          "followers_url": "https://api.github.com/users/pablocastro/followers",
          "following_url": "https://api.github.com/users/pablocastro/following{/other_user}",
          "gists_url": "https://api.github.com/users/pablocastro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pablocastro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pablocastro/subscriptions",
          "organizations_url": "https://api.github.com/users/pablocastro/orgs",
          "repos_url": "https://api.github.com/users/pablocastro/repos",
          "events_url": "https://api.github.com/users/pablocastro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pablocastro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Is this needed? On quick look it doesn't seem you're creating new columns. Next step to drop extra columns makes sense, just didn't follow this one.",
        "created_at": "2024-05-31T22:05:16Z",
        "updated_at": "2024-05-31T22:33:06Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622986300",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622986300"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622986300"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622986300/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 150,
        "side": "RIGHT",
        "original_position": 150,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622987973",
        "pull_request_review_id": 2091771801,
        "id": 1622987973,
        "node_id": "PRRC_kwDOLBF5j85gvNTF",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "pablocastro",
          "id": 3433341,
          "node_id": "MDQ6VXNlcjM0MzMzNDE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3433341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pablocastro",
          "html_url": "https://github.com/pablocastro",
          "followers_url": "https://api.github.com/users/pablocastro/followers",
          "following_url": "https://api.github.com/users/pablocastro/following{/other_user}",
          "gists_url": "https://api.github.com/users/pablocastro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pablocastro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pablocastro/subscriptions",
          "organizations_url": "https://api.github.com/users/pablocastro/orgs",
          "repos_url": "https://api.github.com/users/pablocastro/repos",
          "events_url": "https://api.github.com/users/pablocastro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pablocastro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Wrong link, this is for outbound connections using a managed identity for the search service (e.g. for indexers, etc.). The applicable docs for authenticating with Entra (AAD) are here: https://learn.microsoft.com/azure/search/search-security-rbac",
        "created_at": "2024-05-31T22:08:52Z",
        "updated_at": "2024-05-31T22:33:06Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622987973",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622987973"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622987973"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622987973/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 238,
        "side": "RIGHT",
        "original_position": 238,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622988835",
        "pull_request_review_id": 2091771801,
        "id": 1622988835,
        "node_id": "PRRC_kwDOLBF5j85gvNgj",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-create-service-portal).\\n\"",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "pablocastro",
          "id": 3433341,
          "node_id": "MDQ6VXNlcjM0MzMzNDE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3433341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pablocastro",
          "html_url": "https://github.com/pablocastro",
          "followers_url": "https://api.github.com/users/pablocastro/followers",
          "following_url": "https://api.github.com/users/pablocastro/following{/other_user}",
          "gists_url": "https://api.github.com/users/pablocastro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pablocastro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pablocastro/subscriptions",
          "organizations_url": "https://api.github.com/users/pablocastro/orgs",
          "repos_url": "https://api.github.com/users/pablocastro/repos",
          "events_url": "https://api.github.com/users/pablocastro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pablocastro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Nit: it's better if you remove the language/locale from docs URLs so it goes to the users' preference, e.g. https://learn.microsoft.com/azure/search/search-create-service-portal for this one",
        "created_at": "2024-05-31T22:10:43Z",
        "updated_at": "2024-05-31T22:33:06Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622988835",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622988835"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622988835"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622988835/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 240,
        "side": "RIGHT",
        "original_position": 240,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622989862",
        "pull_request_review_id": 2091771801,
        "id": 1622989862,
        "node_id": "PRRC_kwDOLBF5j85gvNwm",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-create-service-portal).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Authenticate into Azure AI Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from getpass import getpass\\n\",\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"SEARCH_SERVICE_ENDPOINT = os.getenv(\\\"SEARCH_SERVICE_ENDPOINT\\\") or getpass(\\\"Enter your Azure AI Search Service Endpoint: \\\")\\n\",\n+    \"SEARCH_SERVICE_API_KEY = os.getenv(\\\"SEARCH_SERVICE_API_KEY\\\") or getpass(\\\"Enter your Azure AI Search Service API Key: \\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 72,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Using AAD for authentication.\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"USE_AAD_FOR_SEARCH = True\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "pablocastro",
          "id": 3433341,
          "node_id": "MDQ6VXNlcjM0MzMzNDE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3433341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pablocastro",
          "html_url": "https://github.com/pablocastro",
          "followers_url": "https://api.github.com/users/pablocastro/followers",
          "following_url": "https://api.github.com/users/pablocastro/following{/other_user}",
          "gists_url": "https://api.github.com/users/pablocastro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pablocastro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pablocastro/subscriptions",
          "organizations_url": "https://api.github.com/users/pablocastro/orgs",
          "repos_url": "https://api.github.com/users/pablocastro/repos",
          "events_url": "https://api.github.com/users/pablocastro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pablocastro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Why ask for api key in the previous cell if you set AAD auth to true here? Maybe you can move the other line to the `else` branch below and avoid asking if you don't need a key.",
        "created_at": "2024-05-31T22:13:09Z",
        "updated_at": "2024-05-31T22:33:06Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622989862",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622989862"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622989862"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622989862/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 279,
        "side": "RIGHT",
        "original_position": 279,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622990770",
        "pull_request_review_id": 2091771801,
        "id": 1622990770,
        "node_id": "PRRC_kwDOLBF5j85gvN-y",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-create-service-portal).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Authenticate into Azure AI Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from getpass import getpass\\n\",\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"SEARCH_SERVICE_ENDPOINT = os.getenv(\\\"SEARCH_SERVICE_ENDPOINT\\\") or getpass(\\\"Enter your Azure AI Search Service Endpoint: \\\")\\n\",\n+    \"SEARCH_SERVICE_API_KEY = os.getenv(\\\"SEARCH_SERVICE_API_KEY\\\") or getpass(\\\"Enter your Azure AI Search Service API Key: \\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 72,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Using AAD for authentication.\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"USE_AAD_FOR_SEARCH = True\\n\",\n+    \"\\n\",\n+    \"def authenticate_azure_search(api_key=None, use_aad_for_search=False):\\n\",\n+    \"    if use_aad_for_search:\\n\",\n+    \"        print(\\\"Using AAD for authentication.\\\")\\n\",\n+    \"        credential = DefaultAzureCredential()\\n\",\n+    \"    else:\\n\",\n+    \"        print(\\\"Using API keys for authentication.\\\")\\n\",\n+    \"        if api_key is None:\\n\",\n+    \"            raise ValueError(\\\"API key must be provided if not using AAD for authentication.\\\")\\n\",\n+    \"        credential = AzureKeyCredential(api_key)\\n\",\n+    \"    return credential\\n\",\n+    \"\\n\",\n+    \"azure_search_credential = authenticate_azure_search(\\n\",\n+    \"    api_key=SEARCH_SERVICE_API_KEY, use_aad_for_search=USE_AAD_FOR_SEARCH\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Create a vector index\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 70,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \" ai-arxiv2-semantic-chunks created\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents.indexes import SearchIndexClient\\n\",\n+    \"from azure.search.documents.indexes.models import (\\n\",\n+    \"    SimpleField,\\n\",\n+    \"    SearchFieldDataType,\\n\",\n+    \"    SearchableField,\\n\",\n+    \"    SearchField,\\n\",\n+    \"    VectorSearch,\\n\",\n+    \"    HnswAlgorithmConfiguration,\\n\",\n+    \"    VectorSearchProfile,\\n\",\n+    \"    SemanticConfiguration,\\n\",\n+    \"    SemanticPrioritizedFields,\\n\",\n+    \"    SemanticField,\\n\",\n+    \"    SemanticSearch,\\n\",\n+    \"    SearchIndex,\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"DIMENSIONS = 1024\\n\",\n+    \"HNSW_PARAMETERS = {\\\"m\\\": 4, \\\"metric\\\": \\\"cosine\\\", \\\"ef_construction\\\": 400, \\\"ef_search\\\": 500}\\n\",\n+    \"INDEX_NAME = \\\"ai-arxiv2-semantic-chunks\\\"  # replace with your actual index name\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def create_index(endpoint, credential):\\n\",\n+    \"    # Create a search index\\n\",\n+    \"    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)\\n\",\n+    \"    fields = [\\n\",\n+    \"        SimpleField(\\n\",\n+    \"            name=\\\"id\\\",\\n\",\n+    \"            type=SearchFieldDataType.String,\\n\",\n+    \"            key=True,\\n\",\n+    \"            sortable=True,\\n\",\n+    \"            filterable=True,\\n\",\n+    \"            facetable=True,\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "pablocastro",
          "id": 3433341,
          "node_id": "MDQ6VXNlcjM0MzMzNDE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3433341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pablocastro",
          "html_url": "https://github.com/pablocastro",
          "followers_url": "https://api.github.com/users/pablocastro/followers",
          "following_url": "https://api.github.com/users/pablocastro/following{/other_user}",
          "gists_url": "https://api.github.com/users/pablocastro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pablocastro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pablocastro/subscriptions",
          "organizations_url": "https://api.github.com/users/pablocastro/orgs",
          "repos_url": "https://api.github.com/users/pablocastro/repos",
          "events_url": "https://api.github.com/users/pablocastro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pablocastro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Why mark this as facetable? Keys are not good candidates for this. Also, do you need it to be sortable?",
        "created_at": "2024-05-31T22:15:18Z",
        "updated_at": "2024-05-31T22:33:06Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622990770",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622990770"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622990770"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622990770/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 349,
        "side": "RIGHT",
        "original_position": 349,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622992428",
        "pull_request_review_id": 2091771801,
        "id": 1622992428,
        "node_id": "PRRC_kwDOLBF5j85gvOYs",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-create-service-portal).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Authenticate into Azure AI Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from getpass import getpass\\n\",\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"SEARCH_SERVICE_ENDPOINT = os.getenv(\\\"SEARCH_SERVICE_ENDPOINT\\\") or getpass(\\\"Enter your Azure AI Search Service Endpoint: \\\")\\n\",\n+    \"SEARCH_SERVICE_API_KEY = os.getenv(\\\"SEARCH_SERVICE_API_KEY\\\") or getpass(\\\"Enter your Azure AI Search Service API Key: \\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 72,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Using AAD for authentication.\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"USE_AAD_FOR_SEARCH = True\\n\",\n+    \"\\n\",\n+    \"def authenticate_azure_search(api_key=None, use_aad_for_search=False):\\n\",\n+    \"    if use_aad_for_search:\\n\",\n+    \"        print(\\\"Using AAD for authentication.\\\")\\n\",\n+    \"        credential = DefaultAzureCredential()\\n\",\n+    \"    else:\\n\",\n+    \"        print(\\\"Using API keys for authentication.\\\")\\n\",\n+    \"        if api_key is None:\\n\",\n+    \"            raise ValueError(\\\"API key must be provided if not using AAD for authentication.\\\")\\n\",\n+    \"        credential = AzureKeyCredential(api_key)\\n\",\n+    \"    return credential\\n\",\n+    \"\\n\",\n+    \"azure_search_credential = authenticate_azure_search(\\n\",\n+    \"    api_key=SEARCH_SERVICE_API_KEY, use_aad_for_search=USE_AAD_FOR_SEARCH\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Create a vector index\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 70,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \" ai-arxiv2-semantic-chunks created\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents.indexes import SearchIndexClient\\n\",\n+    \"from azure.search.documents.indexes.models import (\\n\",\n+    \"    SimpleField,\\n\",\n+    \"    SearchFieldDataType,\\n\",\n+    \"    SearchableField,\\n\",\n+    \"    SearchField,\\n\",\n+    \"    VectorSearch,\\n\",\n+    \"    HnswAlgorithmConfiguration,\\n\",\n+    \"    VectorSearchProfile,\\n\",\n+    \"    SemanticConfiguration,\\n\",\n+    \"    SemanticPrioritizedFields,\\n\",\n+    \"    SemanticField,\\n\",\n+    \"    SemanticSearch,\\n\",\n+    \"    SearchIndex,\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"DIMENSIONS = 1024\\n\",\n+    \"HNSW_PARAMETERS = {\\\"m\\\": 4, \\\"metric\\\": \\\"cosine\\\", \\\"ef_construction\\\": 400, \\\"ef_search\\\": 500}\\n\",\n+    \"INDEX_NAME = \\\"ai-arxiv2-semantic-chunks\\\"  # replace with your actual index name\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def create_index(endpoint, credential):\\n\",\n+    \"    # Create a search index\\n\",\n+    \"    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)\\n\",\n+    \"    fields = [\\n\",\n+    \"        SimpleField(\\n\",\n+    \"            name=\\\"id\\\",\\n\",\n+    \"            type=SearchFieldDataType.String,\\n\",\n+    \"            key=True,\\n\",\n+    \"            sortable=True,\\n\",\n+    \"            filterable=True,\\n\",\n+    \"            facetable=True,\\n\",\n+    \"        ),\\n\",\n+    \"        SearchableField(name=\\\"title\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(name=\\\"content\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(\\n\",\n+    \"            name=\\\"arxiv_id\\\", type=SearchFieldDataType.String, filterable=True\\n\",\n+    \"        ),\\n\",\n+    \"        SearchField(\\n\",\n+    \"            name=\\\"embedding\\\",\\n\",\n+    \"            type=SearchFieldDataType.Collection(SearchFieldDataType.Single),\\n\",\n+    \"            searchable=True,\\n\",\n+    \"            vector_search_dimensions=DIMENSIONS,\\n\",\n+    \"            vector_search_profile_name=\\\"myHnswProfile\\\",\\n\",\n+    \"            hidden=False,  # Set to true if you want to retrieve the embeddings in the search results\\n\",\n+    \"        ),\\n\",\n+    \"    ]\\n\",\n+    \"\\n\",\n+    \"    # Configure the vector search configuration\\n\",\n+    \"    vector_search = VectorSearch(\\n\",\n+    \"        algorithms=[\\n\",\n+    \"            HnswAlgorithmConfiguration(name=\\\"myHnsw\\\", parameters=HNSW_PARAMETERS)\\n\",\n+    \"        ],\\n\",\n+    \"        profiles=[\\n\",\n+    \"            VectorSearchProfile(\\n\",\n+    \"                name=\\\"myHnswProfile\\\",\\n\",\n+    \"                algorithm_configuration_name=\\\"myHnsw\\\",\\n\",\n+    \"            )\\n\",\n+    \"        ],\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    semantic_config = SemanticConfiguration(\\n\",\n+    \"        name=\\\"my-semantic-config\\\",\\n\",\n+    \"        prioritized_fields=SemanticPrioritizedFields(\\n\",\n+    \"            title_field=SemanticField(field_name=\\\"title\\\"),\\n\",\n+    \"            keywords_fields=[SemanticField(field_name=\\\"arxiv_id\\\")],\\n\",\n+    \"            content_fields=[SemanticField(field_name=\\\"content\\\")],\\n\",\n+    \"        ),\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    # Create the semantic settings with the configuration\\n\",\n+    \"    semantic_search = SemanticSearch(configurations=[semantic_config])\\n\",\n+    \"\\n\",\n+    \"    # Create the search index with the semantic settings\\n\",\n+    \"    index = SearchIndex(\\n\",\n+    \"        name=INDEX_NAME,\\n\",\n+    \"        fields=fields,\\n\",\n+    \"        vector_search=vector_search,\\n\",\n+    \"        semantic_search=semantic_search,\\n\",\n+    \"    )\\n\",\n+    \"    result = index_client.create_or_update_index(index)\\n\",\n+    \"    print(f\\\" {result.name} created\\\")\\n\",\n+    \"    \\n\",\n+    \"create_index(SEARCH_SERVICE_ENDPOINT, azure_search_credential)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Estimate Cost for Embedding Generation\\n\",\n+    \"\\n\",\n+    \"As per the information from [Lunary.ai's Mistral Tokenizer](https://lunary.ai/mistral-tokenizer), one token is approximately equivalent to five characters of text. \\n\",\n+    \"\\n\",\n+    \"According to [Mistral's Pricing](https://mistral.ai/technology/#pricing), the cost for using `mistral-embed` is $0.1 per 1M tokens for both inputs and outputs.\\n\",\n+    \"\\n\",\n+    \"In the following code block, we will calculate the estimated cost for generating embeddings based on the size of our dataset and these pricing details.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 54,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Estimated cost for generating embeddings: $0.19047898000000002\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"def estimate_cost(data, cost_per_million_tokens=0.1):\\n\",\n+    \"    total_characters = sum(len(entry['content']) for entry in data)\\n\",\n+    \"    total_tokens = total_characters / 5  # 1 token is approximately 5 characters\\n\",\n+    \"    total_tokens_in_millions = total_tokens / 1_000_000\\n\",\n+    \"    total_cost = total_tokens_in_millions * cost_per_million_tokens\\n\",\n+    \"    return total_cost\\n\",\n+    \"\\n\",\n+    \"estimated_cost = estimate_cost(data)\\n\",\n+    \"print(f\\\"Estimated cost for generating embeddings: ${estimated_cost}\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Transform Dataset for Azure AI Search Upload\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Function to transform your dataset into the format required by Azure AI Search\\n\",\n+    \"def transform_to_search_document(record):\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "pablocastro",
          "id": 3433341,
          "node_id": "MDQ6VXNlcjM0MzMzNDE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3433341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pablocastro",
          "html_url": "https://github.com/pablocastro",
          "followers_url": "https://api.github.com/users/pablocastro/followers",
          "following_url": "https://api.github.com/users/pablocastro/following{/other_user}",
          "gists_url": "https://api.github.com/users/pablocastro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pablocastro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pablocastro/subscriptions",
          "organizations_url": "https://api.github.com/users/pablocastro/orgs",
          "repos_url": "https://api.github.com/users/pablocastro/repos",
          "events_url": "https://api.github.com/users/pablocastro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pablocastro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "I can't see what's being transformed in this method, seems we're creating a new list with objects with the same content, am I missing something?",
        "created_at": "2024-05-31T22:18:45Z",
        "updated_at": "2024-05-31T22:33:06Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622992428",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622992428"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622992428"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622992428/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 456,
        "side": "RIGHT",
        "original_position": 456,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622993376",
        "pull_request_review_id": 2091771801,
        "id": 1622993376,
        "node_id": "PRRC_kwDOLBF5j85gvOng",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-create-service-portal).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Authenticate into Azure AI Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from getpass import getpass\\n\",\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"SEARCH_SERVICE_ENDPOINT = os.getenv(\\\"SEARCH_SERVICE_ENDPOINT\\\") or getpass(\\\"Enter your Azure AI Search Service Endpoint: \\\")\\n\",\n+    \"SEARCH_SERVICE_API_KEY = os.getenv(\\\"SEARCH_SERVICE_API_KEY\\\") or getpass(\\\"Enter your Azure AI Search Service API Key: \\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 72,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Using AAD for authentication.\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"USE_AAD_FOR_SEARCH = True\\n\",\n+    \"\\n\",\n+    \"def authenticate_azure_search(api_key=None, use_aad_for_search=False):\\n\",\n+    \"    if use_aad_for_search:\\n\",\n+    \"        print(\\\"Using AAD for authentication.\\\")\\n\",\n+    \"        credential = DefaultAzureCredential()\\n\",\n+    \"    else:\\n\",\n+    \"        print(\\\"Using API keys for authentication.\\\")\\n\",\n+    \"        if api_key is None:\\n\",\n+    \"            raise ValueError(\\\"API key must be provided if not using AAD for authentication.\\\")\\n\",\n+    \"        credential = AzureKeyCredential(api_key)\\n\",\n+    \"    return credential\\n\",\n+    \"\\n\",\n+    \"azure_search_credential = authenticate_azure_search(\\n\",\n+    \"    api_key=SEARCH_SERVICE_API_KEY, use_aad_for_search=USE_AAD_FOR_SEARCH\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Create a vector index\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 70,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \" ai-arxiv2-semantic-chunks created\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents.indexes import SearchIndexClient\\n\",\n+    \"from azure.search.documents.indexes.models import (\\n\",\n+    \"    SimpleField,\\n\",\n+    \"    SearchFieldDataType,\\n\",\n+    \"    SearchableField,\\n\",\n+    \"    SearchField,\\n\",\n+    \"    VectorSearch,\\n\",\n+    \"    HnswAlgorithmConfiguration,\\n\",\n+    \"    VectorSearchProfile,\\n\",\n+    \"    SemanticConfiguration,\\n\",\n+    \"    SemanticPrioritizedFields,\\n\",\n+    \"    SemanticField,\\n\",\n+    \"    SemanticSearch,\\n\",\n+    \"    SearchIndex,\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"DIMENSIONS = 1024\\n\",\n+    \"HNSW_PARAMETERS = {\\\"m\\\": 4, \\\"metric\\\": \\\"cosine\\\", \\\"ef_construction\\\": 400, \\\"ef_search\\\": 500}\\n\",\n+    \"INDEX_NAME = \\\"ai-arxiv2-semantic-chunks\\\"  # replace with your actual index name\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def create_index(endpoint, credential):\\n\",\n+    \"    # Create a search index\\n\",\n+    \"    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)\\n\",\n+    \"    fields = [\\n\",\n+    \"        SimpleField(\\n\",\n+    \"            name=\\\"id\\\",\\n\",\n+    \"            type=SearchFieldDataType.String,\\n\",\n+    \"            key=True,\\n\",\n+    \"            sortable=True,\\n\",\n+    \"            filterable=True,\\n\",\n+    \"            facetable=True,\\n\",\n+    \"        ),\\n\",\n+    \"        SearchableField(name=\\\"title\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(name=\\\"content\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(\\n\",\n+    \"            name=\\\"arxiv_id\\\", type=SearchFieldDataType.String, filterable=True\\n\",\n+    \"        ),\\n\",\n+    \"        SearchField(\\n\",\n+    \"            name=\\\"embedding\\\",\\n\",\n+    \"            type=SearchFieldDataType.Collection(SearchFieldDataType.Single),\\n\",\n+    \"            searchable=True,\\n\",\n+    \"            vector_search_dimensions=DIMENSIONS,\\n\",\n+    \"            vector_search_profile_name=\\\"myHnswProfile\\\",\\n\",\n+    \"            hidden=False,  # Set to true if you want to retrieve the embeddings in the search results\\n\",\n+    \"        ),\\n\",\n+    \"    ]\\n\",\n+    \"\\n\",\n+    \"    # Configure the vector search configuration\\n\",\n+    \"    vector_search = VectorSearch(\\n\",\n+    \"        algorithms=[\\n\",\n+    \"            HnswAlgorithmConfiguration(name=\\\"myHnsw\\\", parameters=HNSW_PARAMETERS)\\n\",\n+    \"        ],\\n\",\n+    \"        profiles=[\\n\",\n+    \"            VectorSearchProfile(\\n\",\n+    \"                name=\\\"myHnswProfile\\\",\\n\",\n+    \"                algorithm_configuration_name=\\\"myHnsw\\\",\\n\",\n+    \"            )\\n\",\n+    \"        ],\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    semantic_config = SemanticConfiguration(\\n\",\n+    \"        name=\\\"my-semantic-config\\\",\\n\",\n+    \"        prioritized_fields=SemanticPrioritizedFields(\\n\",\n+    \"            title_field=SemanticField(field_name=\\\"title\\\"),\\n\",\n+    \"            keywords_fields=[SemanticField(field_name=\\\"arxiv_id\\\")],\\n\",\n+    \"            content_fields=[SemanticField(field_name=\\\"content\\\")],\\n\",\n+    \"        ),\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    # Create the semantic settings with the configuration\\n\",\n+    \"    semantic_search = SemanticSearch(configurations=[semantic_config])\\n\",\n+    \"\\n\",\n+    \"    # Create the search index with the semantic settings\\n\",\n+    \"    index = SearchIndex(\\n\",\n+    \"        name=INDEX_NAME,\\n\",\n+    \"        fields=fields,\\n\",\n+    \"        vector_search=vector_search,\\n\",\n+    \"        semantic_search=semantic_search,\\n\",\n+    \"    )\\n\",\n+    \"    result = index_client.create_or_update_index(index)\\n\",\n+    \"    print(f\\\" {result.name} created\\\")\\n\",\n+    \"    \\n\",\n+    \"create_index(SEARCH_SERVICE_ENDPOINT, azure_search_credential)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Estimate Cost for Embedding Generation\\n\",\n+    \"\\n\",\n+    \"As per the information from [Lunary.ai's Mistral Tokenizer](https://lunary.ai/mistral-tokenizer), one token is approximately equivalent to five characters of text. \\n\",\n+    \"\\n\",\n+    \"According to [Mistral's Pricing](https://mistral.ai/technology/#pricing), the cost for using `mistral-embed` is $0.1 per 1M tokens for both inputs and outputs.\\n\",\n+    \"\\n\",\n+    \"In the following code block, we will calculate the estimated cost for generating embeddings based on the size of our dataset and these pricing details.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 54,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Estimated cost for generating embeddings: $0.19047898000000002\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"def estimate_cost(data, cost_per_million_tokens=0.1):\\n\",\n+    \"    total_characters = sum(len(entry['content']) for entry in data)\\n\",\n+    \"    total_tokens = total_characters / 5  # 1 token is approximately 5 characters\\n\",\n+    \"    total_tokens_in_millions = total_tokens / 1_000_000\\n\",\n+    \"    total_cost = total_tokens_in_millions * cost_per_million_tokens\\n\",\n+    \"    return total_cost\\n\",\n+    \"\\n\",\n+    \"estimated_cost = estimate_cost(data)\\n\",\n+    \"print(f\\\"Estimated cost for generating embeddings: ${estimated_cost}\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Transform Dataset for Azure AI Search Upload\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Function to transform your dataset into the format required by Azure AI Search\\n\",\n+    \"def transform_to_search_document(record):\\n\",\n+    \"    return {\\n\",\n+    \"        \\\"id\\\": record[\\\"id\\\"],\\n\",\n+    \"        \\\"arxiv_id\\\": record[\\\"arxiv_id\\\"],\\n\",\n+    \"        \\\"title\\\": record[\\\"title\\\"],\\n\",\n+    \"        \\\"content\\\": record[\\\"content\\\"]\\n\",\n+    \"    }\\n\",\n+    \"    \\n\",\n+    \"# Transform all documents in the dataset\\n\",\n+    \"transformed_documents = [transform_to_search_document(doc) for doc in data]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Generate Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 58,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"def generate_embeddings(documents, model):\\n\",\n+    \"    for document in documents:\\n\",\n+    \"        content = document['content']\\n\",\n+    \"        embed = mistral.embeddings(\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "pablocastro",
          "id": 3433341,
          "node_id": "MDQ6VXNlcjM0MzMzNDE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3433341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pablocastro",
          "html_url": "https://github.com/pablocastro",
          "followers_url": "https://api.github.com/users/pablocastro/followers",
          "following_url": "https://api.github.com/users/pablocastro/following{/other_user}",
          "gists_url": "https://api.github.com/users/pablocastro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pablocastro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pablocastro/subscriptions",
          "organizations_url": "https://api.github.com/users/pablocastro/orgs",
          "repos_url": "https://api.github.com/users/pablocastro/repos",
          "events_url": "https://api.github.com/users/pablocastro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pablocastro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "this supports sending documents in batches (you're passing an array of 1). if there are only a few docs in this sample dataset, you could get all embeddings in a single call, and if there are a lot, it'll be quicker :)",
        "created_at": "2024-05-31T22:20:59Z",
        "updated_at": "2024-05-31T22:33:06Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622993376",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622993376"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622993376"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622993376/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 484,
        "side": "RIGHT",
        "original_position": 484,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622994578",
        "pull_request_review_id": 2091771801,
        "id": 1622994578,
        "node_id": "PRRC_kwDOLBF5j85gvO6S",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-create-service-portal).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Authenticate into Azure AI Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from getpass import getpass\\n\",\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"SEARCH_SERVICE_ENDPOINT = os.getenv(\\\"SEARCH_SERVICE_ENDPOINT\\\") or getpass(\\\"Enter your Azure AI Search Service Endpoint: \\\")\\n\",\n+    \"SEARCH_SERVICE_API_KEY = os.getenv(\\\"SEARCH_SERVICE_API_KEY\\\") or getpass(\\\"Enter your Azure AI Search Service API Key: \\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 72,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Using AAD for authentication.\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"USE_AAD_FOR_SEARCH = True\\n\",\n+    \"\\n\",\n+    \"def authenticate_azure_search(api_key=None, use_aad_for_search=False):\\n\",\n+    \"    if use_aad_for_search:\\n\",\n+    \"        print(\\\"Using AAD for authentication.\\\")\\n\",\n+    \"        credential = DefaultAzureCredential()\\n\",\n+    \"    else:\\n\",\n+    \"        print(\\\"Using API keys for authentication.\\\")\\n\",\n+    \"        if api_key is None:\\n\",\n+    \"            raise ValueError(\\\"API key must be provided if not using AAD for authentication.\\\")\\n\",\n+    \"        credential = AzureKeyCredential(api_key)\\n\",\n+    \"    return credential\\n\",\n+    \"\\n\",\n+    \"azure_search_credential = authenticate_azure_search(\\n\",\n+    \"    api_key=SEARCH_SERVICE_API_KEY, use_aad_for_search=USE_AAD_FOR_SEARCH\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Create a vector index\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 70,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \" ai-arxiv2-semantic-chunks created\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents.indexes import SearchIndexClient\\n\",\n+    \"from azure.search.documents.indexes.models import (\\n\",\n+    \"    SimpleField,\\n\",\n+    \"    SearchFieldDataType,\\n\",\n+    \"    SearchableField,\\n\",\n+    \"    SearchField,\\n\",\n+    \"    VectorSearch,\\n\",\n+    \"    HnswAlgorithmConfiguration,\\n\",\n+    \"    VectorSearchProfile,\\n\",\n+    \"    SemanticConfiguration,\\n\",\n+    \"    SemanticPrioritizedFields,\\n\",\n+    \"    SemanticField,\\n\",\n+    \"    SemanticSearch,\\n\",\n+    \"    SearchIndex,\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"DIMENSIONS = 1024\\n\",\n+    \"HNSW_PARAMETERS = {\\\"m\\\": 4, \\\"metric\\\": \\\"cosine\\\", \\\"ef_construction\\\": 400, \\\"ef_search\\\": 500}\\n\",\n+    \"INDEX_NAME = \\\"ai-arxiv2-semantic-chunks\\\"  # replace with your actual index name\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def create_index(endpoint, credential):\\n\",\n+    \"    # Create a search index\\n\",\n+    \"    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)\\n\",\n+    \"    fields = [\\n\",\n+    \"        SimpleField(\\n\",\n+    \"            name=\\\"id\\\",\\n\",\n+    \"            type=SearchFieldDataType.String,\\n\",\n+    \"            key=True,\\n\",\n+    \"            sortable=True,\\n\",\n+    \"            filterable=True,\\n\",\n+    \"            facetable=True,\\n\",\n+    \"        ),\\n\",\n+    \"        SearchableField(name=\\\"title\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(name=\\\"content\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(\\n\",\n+    \"            name=\\\"arxiv_id\\\", type=SearchFieldDataType.String, filterable=True\\n\",\n+    \"        ),\\n\",\n+    \"        SearchField(\\n\",\n+    \"            name=\\\"embedding\\\",\\n\",\n+    \"            type=SearchFieldDataType.Collection(SearchFieldDataType.Single),\\n\",\n+    \"            searchable=True,\\n\",\n+    \"            vector_search_dimensions=DIMENSIONS,\\n\",\n+    \"            vector_search_profile_name=\\\"myHnswProfile\\\",\\n\",\n+    \"            hidden=False,  # Set to true if you want to retrieve the embeddings in the search results\\n\",\n+    \"        ),\\n\",\n+    \"    ]\\n\",\n+    \"\\n\",\n+    \"    # Configure the vector search configuration\\n\",\n+    \"    vector_search = VectorSearch(\\n\",\n+    \"        algorithms=[\\n\",\n+    \"            HnswAlgorithmConfiguration(name=\\\"myHnsw\\\", parameters=HNSW_PARAMETERS)\\n\",\n+    \"        ],\\n\",\n+    \"        profiles=[\\n\",\n+    \"            VectorSearchProfile(\\n\",\n+    \"                name=\\\"myHnswProfile\\\",\\n\",\n+    \"                algorithm_configuration_name=\\\"myHnsw\\\",\\n\",\n+    \"            )\\n\",\n+    \"        ],\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    semantic_config = SemanticConfiguration(\\n\",\n+    \"        name=\\\"my-semantic-config\\\",\\n\",\n+    \"        prioritized_fields=SemanticPrioritizedFields(\\n\",\n+    \"            title_field=SemanticField(field_name=\\\"title\\\"),\\n\",\n+    \"            keywords_fields=[SemanticField(field_name=\\\"arxiv_id\\\")],\\n\",\n+    \"            content_fields=[SemanticField(field_name=\\\"content\\\")],\\n\",\n+    \"        ),\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    # Create the semantic settings with the configuration\\n\",\n+    \"    semantic_search = SemanticSearch(configurations=[semantic_config])\\n\",\n+    \"\\n\",\n+    \"    # Create the search index with the semantic settings\\n\",\n+    \"    index = SearchIndex(\\n\",\n+    \"        name=INDEX_NAME,\\n\",\n+    \"        fields=fields,\\n\",\n+    \"        vector_search=vector_search,\\n\",\n+    \"        semantic_search=semantic_search,\\n\",\n+    \"    )\\n\",\n+    \"    result = index_client.create_or_update_index(index)\\n\",\n+    \"    print(f\\\" {result.name} created\\\")\\n\",\n+    \"    \\n\",\n+    \"create_index(SEARCH_SERVICE_ENDPOINT, azure_search_credential)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Estimate Cost for Embedding Generation\\n\",\n+    \"\\n\",\n+    \"As per the information from [Lunary.ai's Mistral Tokenizer](https://lunary.ai/mistral-tokenizer), one token is approximately equivalent to five characters of text. \\n\",\n+    \"\\n\",\n+    \"According to [Mistral's Pricing](https://mistral.ai/technology/#pricing), the cost for using `mistral-embed` is $0.1 per 1M tokens for both inputs and outputs.\\n\",\n+    \"\\n\",\n+    \"In the following code block, we will calculate the estimated cost for generating embeddings based on the size of our dataset and these pricing details.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 54,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Estimated cost for generating embeddings: $0.19047898000000002\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"def estimate_cost(data, cost_per_million_tokens=0.1):\\n\",\n+    \"    total_characters = sum(len(entry['content']) for entry in data)\\n\",\n+    \"    total_tokens = total_characters / 5  # 1 token is approximately 5 characters\\n\",\n+    \"    total_tokens_in_millions = total_tokens / 1_000_000\\n\",\n+    \"    total_cost = total_tokens_in_millions * cost_per_million_tokens\\n\",\n+    \"    return total_cost\\n\",\n+    \"\\n\",\n+    \"estimated_cost = estimate_cost(data)\\n\",\n+    \"print(f\\\"Estimated cost for generating embeddings: ${estimated_cost}\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Transform Dataset for Azure AI Search Upload\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Function to transform your dataset into the format required by Azure AI Search\\n\",\n+    \"def transform_to_search_document(record):\\n\",\n+    \"    return {\\n\",\n+    \"        \\\"id\\\": record[\\\"id\\\"],\\n\",\n+    \"        \\\"arxiv_id\\\": record[\\\"arxiv_id\\\"],\\n\",\n+    \"        \\\"title\\\": record[\\\"title\\\"],\\n\",\n+    \"        \\\"content\\\": record[\\\"content\\\"]\\n\",\n+    \"    }\\n\",\n+    \"    \\n\",\n+    \"# Transform all documents in the dataset\\n\",\n+    \"transformed_documents = [transform_to_search_document(doc) for doc in data]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Generate Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 58,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"def generate_embeddings(documents, model):\\n\",\n+    \"    for document in documents:\\n\",\n+    \"        content = document['content']\\n\",\n+    \"        embed = mistral.embeddings(\\n\",\n+    \"            model=model, input=[content]\\n\",\n+    \"        )\\n\",\n+    \"        # Add the embedding to the document\\n\",\n+    \"        document['embedding'] = embed.data[0].embedding\\n\",\n+    \"    return documents\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "pablocastro",
          "id": 3433341,
          "node_id": "MDQ6VXNlcjM0MzMzNDE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3433341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pablocastro",
          "html_url": "https://github.com/pablocastro",
          "followers_url": "https://api.github.com/users/pablocastro/followers",
          "following_url": "https://api.github.com/users/pablocastro/following{/other_user}",
          "gists_url": "https://api.github.com/users/pablocastro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pablocastro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pablocastro/subscriptions",
          "organizations_url": "https://api.github.com/users/pablocastro/orgs",
          "repos_url": "https://api.github.com/users/pablocastro/repos",
          "events_url": "https://api.github.com/users/pablocastro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pablocastro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "You;'re changing the objects in the documents list in place, not sure why return it and re-assign it",
        "created_at": "2024-05-31T22:23:13Z",
        "updated_at": "2024-05-31T22:33:06Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622994578",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622994578"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622994578"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622994578/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 489,
        "side": "RIGHT",
        "original_position": 489,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622995525",
        "pull_request_review_id": 2091771801,
        "id": 1622995525,
        "node_id": "PRRC_kwDOLBF5j85gvPJF",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-create-service-portal).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Authenticate into Azure AI Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from getpass import getpass\\n\",\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"SEARCH_SERVICE_ENDPOINT = os.getenv(\\\"SEARCH_SERVICE_ENDPOINT\\\") or getpass(\\\"Enter your Azure AI Search Service Endpoint: \\\")\\n\",\n+    \"SEARCH_SERVICE_API_KEY = os.getenv(\\\"SEARCH_SERVICE_API_KEY\\\") or getpass(\\\"Enter your Azure AI Search Service API Key: \\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 72,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Using AAD for authentication.\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"USE_AAD_FOR_SEARCH = True\\n\",\n+    \"\\n\",\n+    \"def authenticate_azure_search(api_key=None, use_aad_for_search=False):\\n\",\n+    \"    if use_aad_for_search:\\n\",\n+    \"        print(\\\"Using AAD for authentication.\\\")\\n\",\n+    \"        credential = DefaultAzureCredential()\\n\",\n+    \"    else:\\n\",\n+    \"        print(\\\"Using API keys for authentication.\\\")\\n\",\n+    \"        if api_key is None:\\n\",\n+    \"            raise ValueError(\\\"API key must be provided if not using AAD for authentication.\\\")\\n\",\n+    \"        credential = AzureKeyCredential(api_key)\\n\",\n+    \"    return credential\\n\",\n+    \"\\n\",\n+    \"azure_search_credential = authenticate_azure_search(\\n\",\n+    \"    api_key=SEARCH_SERVICE_API_KEY, use_aad_for_search=USE_AAD_FOR_SEARCH\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Create a vector index\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 70,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \" ai-arxiv2-semantic-chunks created\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents.indexes import SearchIndexClient\\n\",\n+    \"from azure.search.documents.indexes.models import (\\n\",\n+    \"    SimpleField,\\n\",\n+    \"    SearchFieldDataType,\\n\",\n+    \"    SearchableField,\\n\",\n+    \"    SearchField,\\n\",\n+    \"    VectorSearch,\\n\",\n+    \"    HnswAlgorithmConfiguration,\\n\",\n+    \"    VectorSearchProfile,\\n\",\n+    \"    SemanticConfiguration,\\n\",\n+    \"    SemanticPrioritizedFields,\\n\",\n+    \"    SemanticField,\\n\",\n+    \"    SemanticSearch,\\n\",\n+    \"    SearchIndex,\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"DIMENSIONS = 1024\\n\",\n+    \"HNSW_PARAMETERS = {\\\"m\\\": 4, \\\"metric\\\": \\\"cosine\\\", \\\"ef_construction\\\": 400, \\\"ef_search\\\": 500}\\n\",\n+    \"INDEX_NAME = \\\"ai-arxiv2-semantic-chunks\\\"  # replace with your actual index name\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def create_index(endpoint, credential):\\n\",\n+    \"    # Create a search index\\n\",\n+    \"    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)\\n\",\n+    \"    fields = [\\n\",\n+    \"        SimpleField(\\n\",\n+    \"            name=\\\"id\\\",\\n\",\n+    \"            type=SearchFieldDataType.String,\\n\",\n+    \"            key=True,\\n\",\n+    \"            sortable=True,\\n\",\n+    \"            filterable=True,\\n\",\n+    \"            facetable=True,\\n\",\n+    \"        ),\\n\",\n+    \"        SearchableField(name=\\\"title\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(name=\\\"content\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(\\n\",\n+    \"            name=\\\"arxiv_id\\\", type=SearchFieldDataType.String, filterable=True\\n\",\n+    \"        ),\\n\",\n+    \"        SearchField(\\n\",\n+    \"            name=\\\"embedding\\\",\\n\",\n+    \"            type=SearchFieldDataType.Collection(SearchFieldDataType.Single),\\n\",\n+    \"            searchable=True,\\n\",\n+    \"            vector_search_dimensions=DIMENSIONS,\\n\",\n+    \"            vector_search_profile_name=\\\"myHnswProfile\\\",\\n\",\n+    \"            hidden=False,  # Set to true if you want to retrieve the embeddings in the search results\\n\",\n+    \"        ),\\n\",\n+    \"    ]\\n\",\n+    \"\\n\",\n+    \"    # Configure the vector search configuration\\n\",\n+    \"    vector_search = VectorSearch(\\n\",\n+    \"        algorithms=[\\n\",\n+    \"            HnswAlgorithmConfiguration(name=\\\"myHnsw\\\", parameters=HNSW_PARAMETERS)\\n\",\n+    \"        ],\\n\",\n+    \"        profiles=[\\n\",\n+    \"            VectorSearchProfile(\\n\",\n+    \"                name=\\\"myHnswProfile\\\",\\n\",\n+    \"                algorithm_configuration_name=\\\"myHnsw\\\",\\n\",\n+    \"            )\\n\",\n+    \"        ],\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    semantic_config = SemanticConfiguration(\\n\",\n+    \"        name=\\\"my-semantic-config\\\",\\n\",\n+    \"        prioritized_fields=SemanticPrioritizedFields(\\n\",\n+    \"            title_field=SemanticField(field_name=\\\"title\\\"),\\n\",\n+    \"            keywords_fields=[SemanticField(field_name=\\\"arxiv_id\\\")],\\n\",\n+    \"            content_fields=[SemanticField(field_name=\\\"content\\\")],\\n\",\n+    \"        ),\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    # Create the semantic settings with the configuration\\n\",\n+    \"    semantic_search = SemanticSearch(configurations=[semantic_config])\\n\",\n+    \"\\n\",\n+    \"    # Create the search index with the semantic settings\\n\",\n+    \"    index = SearchIndex(\\n\",\n+    \"        name=INDEX_NAME,\\n\",\n+    \"        fields=fields,\\n\",\n+    \"        vector_search=vector_search,\\n\",\n+    \"        semantic_search=semantic_search,\\n\",\n+    \"    )\\n\",\n+    \"    result = index_client.create_or_update_index(index)\\n\",\n+    \"    print(f\\\" {result.name} created\\\")\\n\",\n+    \"    \\n\",\n+    \"create_index(SEARCH_SERVICE_ENDPOINT, azure_search_credential)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Estimate Cost for Embedding Generation\\n\",\n+    \"\\n\",\n+    \"As per the information from [Lunary.ai's Mistral Tokenizer](https://lunary.ai/mistral-tokenizer), one token is approximately equivalent to five characters of text. \\n\",\n+    \"\\n\",\n+    \"According to [Mistral's Pricing](https://mistral.ai/technology/#pricing), the cost for using `mistral-embed` is $0.1 per 1M tokens for both inputs and outputs.\\n\",\n+    \"\\n\",\n+    \"In the following code block, we will calculate the estimated cost for generating embeddings based on the size of our dataset and these pricing details.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 54,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Estimated cost for generating embeddings: $0.19047898000000002\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"def estimate_cost(data, cost_per_million_tokens=0.1):\\n\",\n+    \"    total_characters = sum(len(entry['content']) for entry in data)\\n\",\n+    \"    total_tokens = total_characters / 5  # 1 token is approximately 5 characters\\n\",\n+    \"    total_tokens_in_millions = total_tokens / 1_000_000\\n\",\n+    \"    total_cost = total_tokens_in_millions * cost_per_million_tokens\\n\",\n+    \"    return total_cost\\n\",\n+    \"\\n\",\n+    \"estimated_cost = estimate_cost(data)\\n\",\n+    \"print(f\\\"Estimated cost for generating embeddings: ${estimated_cost}\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Transform Dataset for Azure AI Search Upload\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Function to transform your dataset into the format required by Azure AI Search\\n\",\n+    \"def transform_to_search_document(record):\\n\",\n+    \"    return {\\n\",\n+    \"        \\\"id\\\": record[\\\"id\\\"],\\n\",\n+    \"        \\\"arxiv_id\\\": record[\\\"arxiv_id\\\"],\\n\",\n+    \"        \\\"title\\\": record[\\\"title\\\"],\\n\",\n+    \"        \\\"content\\\": record[\\\"content\\\"]\\n\",\n+    \"    }\\n\",\n+    \"    \\n\",\n+    \"# Transform all documents in the dataset\\n\",\n+    \"transformed_documents = [transform_to_search_document(doc) for doc in data]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Generate Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 58,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"def generate_embeddings(documents, model):\\n\",\n+    \"    for document in documents:\\n\",\n+    \"        content = document['content']\\n\",\n+    \"        embed = mistral.embeddings(\\n\",\n+    \"            model=model, input=[content]\\n\",\n+    \"        )\\n\",\n+    \"        # Add the embedding to the document\\n\",\n+    \"        document['embedding'] = embed.data[0].embedding\\n\",\n+    \"    return documents\\n\",\n+    \"\\n\",\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"transformed_documents_with_embeddings = generate_embeddings(transformed_documents, embed_model)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Azure AI Search doesn't allow certain unsafe keys so we'll base64 encode `id` here\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 78,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import base64\\n\",\n+    \"\\n\",\n+    \"def encode_key(key):\\n\",\n+    \"    return base64.urlsafe_b64encode(key.encode()).decode()\\n\",\n+    \"\\n\",\n+    \"# Use the function to encode keys\\n\",\n+    \"for document in transformed_documents_with_embeddings:\\n\",\n+    \"    document['id'] = encode_key(document['id'])\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Upload Documents\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 82,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Uploaded batch 1 of 21\\n\",\n+      \"Uploaded batch 2 of 21\\n\",\n+      \"Uploaded batch 3 of 21\\n\",\n+      \"Uploaded batch 4 of 21\\n\",\n+      \"Uploaded batch 5 of 21\\n\",\n+      \"Uploaded batch 6 of 21\\n\",\n+      \"Uploaded batch 7 of 21\\n\",\n+      \"Uploaded batch 8 of 21\\n\",\n+      \"Uploaded batch 9 of 21\\n\",\n+      \"Uploaded batch 10 of 21\\n\",\n+      \"Uploaded batch 11 of 21\\n\",\n+      \"Uploaded batch 12 of 21\\n\",\n+      \"Uploaded batch 13 of 21\\n\",\n+      \"Uploaded batch 14 of 21\\n\",\n+      \"Uploaded batch 15 of 21\\n\",\n+      \"Uploaded batch 16 of 21\\n\",\n+      \"Uploaded batch 17 of 21\\n\",\n+      \"Uploaded batch 18 of 21\\n\",\n+      \"Uploaded batch 19 of 21\\n\",\n+      \"Uploaded batch 20 of 21\\n\",\n+      \"Uploaded 10000 documents in total\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"from azure.search.documents import SearchClient\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def upload_documents(index_name, endpoint, credential, documents):\\n\",\n+    \"    client = SearchClient(\\n\",\n+    \"        endpoint=endpoint, index_name=index_name, credential=credential\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    # Split documents into chunks of 500\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "pablocastro",
          "id": 3433341,
          "node_id": "MDQ6VXNlcjM0MzMzNDE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3433341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pablocastro",
          "html_url": "https://github.com/pablocastro",
          "followers_url": "https://api.github.com/users/pablocastro/followers",
          "following_url": "https://api.github.com/users/pablocastro/following{/other_user}",
          "gists_url": "https://api.github.com/users/pablocastro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pablocastro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pablocastro/subscriptions",
          "organizations_url": "https://api.github.com/users/pablocastro/orgs",
          "repos_url": "https://api.github.com/users/pablocastro/repos",
          "events_url": "https://api.github.com/users/pablocastro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pablocastro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Nit: the word \"chunk\" is so commonly used for passage chunking that's best not to use it for other contexts to avoid confusion, maybe say in \"in batches of 500\"?",
        "created_at": "2024-05-31T22:24:51Z",
        "updated_at": "2024-05-31T22:33:06Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622995525",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622995525"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622995525"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622995525/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 569,
        "side": "RIGHT",
        "original_position": 569,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622997596",
        "pull_request_review_id": 2091771801,
        "id": 1622997596,
        "node_id": "PRRC_kwDOLBF5j85gvPpc",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-create-service-portal).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Authenticate into Azure AI Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from getpass import getpass\\n\",\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"SEARCH_SERVICE_ENDPOINT = os.getenv(\\\"SEARCH_SERVICE_ENDPOINT\\\") or getpass(\\\"Enter your Azure AI Search Service Endpoint: \\\")\\n\",\n+    \"SEARCH_SERVICE_API_KEY = os.getenv(\\\"SEARCH_SERVICE_API_KEY\\\") or getpass(\\\"Enter your Azure AI Search Service API Key: \\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 72,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Using AAD for authentication.\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"USE_AAD_FOR_SEARCH = True\\n\",\n+    \"\\n\",\n+    \"def authenticate_azure_search(api_key=None, use_aad_for_search=False):\\n\",\n+    \"    if use_aad_for_search:\\n\",\n+    \"        print(\\\"Using AAD for authentication.\\\")\\n\",\n+    \"        credential = DefaultAzureCredential()\\n\",\n+    \"    else:\\n\",\n+    \"        print(\\\"Using API keys for authentication.\\\")\\n\",\n+    \"        if api_key is None:\\n\",\n+    \"            raise ValueError(\\\"API key must be provided if not using AAD for authentication.\\\")\\n\",\n+    \"        credential = AzureKeyCredential(api_key)\\n\",\n+    \"    return credential\\n\",\n+    \"\\n\",\n+    \"azure_search_credential = authenticate_azure_search(\\n\",\n+    \"    api_key=SEARCH_SERVICE_API_KEY, use_aad_for_search=USE_AAD_FOR_SEARCH\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Create a vector index\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 70,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \" ai-arxiv2-semantic-chunks created\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents.indexes import SearchIndexClient\\n\",\n+    \"from azure.search.documents.indexes.models import (\\n\",\n+    \"    SimpleField,\\n\",\n+    \"    SearchFieldDataType,\\n\",\n+    \"    SearchableField,\\n\",\n+    \"    SearchField,\\n\",\n+    \"    VectorSearch,\\n\",\n+    \"    HnswAlgorithmConfiguration,\\n\",\n+    \"    VectorSearchProfile,\\n\",\n+    \"    SemanticConfiguration,\\n\",\n+    \"    SemanticPrioritizedFields,\\n\",\n+    \"    SemanticField,\\n\",\n+    \"    SemanticSearch,\\n\",\n+    \"    SearchIndex,\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"DIMENSIONS = 1024\\n\",\n+    \"HNSW_PARAMETERS = {\\\"m\\\": 4, \\\"metric\\\": \\\"cosine\\\", \\\"ef_construction\\\": 400, \\\"ef_search\\\": 500}\\n\",\n+    \"INDEX_NAME = \\\"ai-arxiv2-semantic-chunks\\\"  # replace with your actual index name\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def create_index(endpoint, credential):\\n\",\n+    \"    # Create a search index\\n\",\n+    \"    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)\\n\",\n+    \"    fields = [\\n\",\n+    \"        SimpleField(\\n\",\n+    \"            name=\\\"id\\\",\\n\",\n+    \"            type=SearchFieldDataType.String,\\n\",\n+    \"            key=True,\\n\",\n+    \"            sortable=True,\\n\",\n+    \"            filterable=True,\\n\",\n+    \"            facetable=True,\\n\",\n+    \"        ),\\n\",\n+    \"        SearchableField(name=\\\"title\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(name=\\\"content\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(\\n\",\n+    \"            name=\\\"arxiv_id\\\", type=SearchFieldDataType.String, filterable=True\\n\",\n+    \"        ),\\n\",\n+    \"        SearchField(\\n\",\n+    \"            name=\\\"embedding\\\",\\n\",\n+    \"            type=SearchFieldDataType.Collection(SearchFieldDataType.Single),\\n\",\n+    \"            searchable=True,\\n\",\n+    \"            vector_search_dimensions=DIMENSIONS,\\n\",\n+    \"            vector_search_profile_name=\\\"myHnswProfile\\\",\\n\",\n+    \"            hidden=False,  # Set to true if you want to retrieve the embeddings in the search results\\n\",\n+    \"        ),\\n\",\n+    \"    ]\\n\",\n+    \"\\n\",\n+    \"    # Configure the vector search configuration\\n\",\n+    \"    vector_search = VectorSearch(\\n\",\n+    \"        algorithms=[\\n\",\n+    \"            HnswAlgorithmConfiguration(name=\\\"myHnsw\\\", parameters=HNSW_PARAMETERS)\\n\",\n+    \"        ],\\n\",\n+    \"        profiles=[\\n\",\n+    \"            VectorSearchProfile(\\n\",\n+    \"                name=\\\"myHnswProfile\\\",\\n\",\n+    \"                algorithm_configuration_name=\\\"myHnsw\\\",\\n\",\n+    \"            )\\n\",\n+    \"        ],\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    semantic_config = SemanticConfiguration(\\n\",\n+    \"        name=\\\"my-semantic-config\\\",\\n\",\n+    \"        prioritized_fields=SemanticPrioritizedFields(\\n\",\n+    \"            title_field=SemanticField(field_name=\\\"title\\\"),\\n\",\n+    \"            keywords_fields=[SemanticField(field_name=\\\"arxiv_id\\\")],\\n\",\n+    \"            content_fields=[SemanticField(field_name=\\\"content\\\")],\\n\",\n+    \"        ),\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    # Create the semantic settings with the configuration\\n\",\n+    \"    semantic_search = SemanticSearch(configurations=[semantic_config])\\n\",\n+    \"\\n\",\n+    \"    # Create the search index with the semantic settings\\n\",\n+    \"    index = SearchIndex(\\n\",\n+    \"        name=INDEX_NAME,\\n\",\n+    \"        fields=fields,\\n\",\n+    \"        vector_search=vector_search,\\n\",\n+    \"        semantic_search=semantic_search,\\n\",\n+    \"    )\\n\",\n+    \"    result = index_client.create_or_update_index(index)\\n\",\n+    \"    print(f\\\" {result.name} created\\\")\\n\",\n+    \"    \\n\",\n+    \"create_index(SEARCH_SERVICE_ENDPOINT, azure_search_credential)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Estimate Cost for Embedding Generation\\n\",\n+    \"\\n\",\n+    \"As per the information from [Lunary.ai's Mistral Tokenizer](https://lunary.ai/mistral-tokenizer), one token is approximately equivalent to five characters of text. \\n\",\n+    \"\\n\",\n+    \"According to [Mistral's Pricing](https://mistral.ai/technology/#pricing), the cost for using `mistral-embed` is $0.1 per 1M tokens for both inputs and outputs.\\n\",\n+    \"\\n\",\n+    \"In the following code block, we will calculate the estimated cost for generating embeddings based on the size of our dataset and these pricing details.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 54,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Estimated cost for generating embeddings: $0.19047898000000002\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"def estimate_cost(data, cost_per_million_tokens=0.1):\\n\",\n+    \"    total_characters = sum(len(entry['content']) for entry in data)\\n\",\n+    \"    total_tokens = total_characters / 5  # 1 token is approximately 5 characters\\n\",\n+    \"    total_tokens_in_millions = total_tokens / 1_000_000\\n\",\n+    \"    total_cost = total_tokens_in_millions * cost_per_million_tokens\\n\",\n+    \"    return total_cost\\n\",\n+    \"\\n\",\n+    \"estimated_cost = estimate_cost(data)\\n\",\n+    \"print(f\\\"Estimated cost for generating embeddings: ${estimated_cost}\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Transform Dataset for Azure AI Search Upload\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Function to transform your dataset into the format required by Azure AI Search\\n\",\n+    \"def transform_to_search_document(record):\\n\",\n+    \"    return {\\n\",\n+    \"        \\\"id\\\": record[\\\"id\\\"],\\n\",\n+    \"        \\\"arxiv_id\\\": record[\\\"arxiv_id\\\"],\\n\",\n+    \"        \\\"title\\\": record[\\\"title\\\"],\\n\",\n+    \"        \\\"content\\\": record[\\\"content\\\"]\\n\",\n+    \"    }\\n\",\n+    \"    \\n\",\n+    \"# Transform all documents in the dataset\\n\",\n+    \"transformed_documents = [transform_to_search_document(doc) for doc in data]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Generate Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 58,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"def generate_embeddings(documents, model):\\n\",\n+    \"    for document in documents:\\n\",\n+    \"        content = document['content']\\n\",\n+    \"        embed = mistral.embeddings(\\n\",\n+    \"            model=model, input=[content]\\n\",\n+    \"        )\\n\",\n+    \"        # Add the embedding to the document\\n\",\n+    \"        document['embedding'] = embed.data[0].embedding\\n\",\n+    \"    return documents\\n\",\n+    \"\\n\",\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"transformed_documents_with_embeddings = generate_embeddings(transformed_documents, embed_model)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Azure AI Search doesn't allow certain unsafe keys so we'll base64 encode `id` here\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 78,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import base64\\n\",\n+    \"\\n\",\n+    \"def encode_key(key):\\n\",\n+    \"    return base64.urlsafe_b64encode(key.encode()).decode()\\n\",\n+    \"\\n\",\n+    \"# Use the function to encode keys\\n\",\n+    \"for document in transformed_documents_with_embeddings:\\n\",\n+    \"    document['id'] = encode_key(document['id'])\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Upload Documents\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 82,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Uploaded batch 1 of 21\\n\",\n+      \"Uploaded batch 2 of 21\\n\",\n+      \"Uploaded batch 3 of 21\\n\",\n+      \"Uploaded batch 4 of 21\\n\",\n+      \"Uploaded batch 5 of 21\\n\",\n+      \"Uploaded batch 6 of 21\\n\",\n+      \"Uploaded batch 7 of 21\\n\",\n+      \"Uploaded batch 8 of 21\\n\",\n+      \"Uploaded batch 9 of 21\\n\",\n+      \"Uploaded batch 10 of 21\\n\",\n+      \"Uploaded batch 11 of 21\\n\",\n+      \"Uploaded batch 12 of 21\\n\",\n+      \"Uploaded batch 13 of 21\\n\",\n+      \"Uploaded batch 14 of 21\\n\",\n+      \"Uploaded batch 15 of 21\\n\",\n+      \"Uploaded batch 16 of 21\\n\",\n+      \"Uploaded batch 17 of 21\\n\",\n+      \"Uploaded batch 18 of 21\\n\",\n+      \"Uploaded batch 19 of 21\\n\",\n+      \"Uploaded batch 20 of 21\\n\",\n+      \"Uploaded 10000 documents in total\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"from azure.search.documents import SearchClient\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def upload_documents(index_name, endpoint, credential, documents):\\n\",\n+    \"    client = SearchClient(\\n\",\n+    \"        endpoint=endpoint, index_name=index_name, credential=credential\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    # Split documents into chunks of 500\\n\",\n+    \"    for i in range(0, len(documents), 500):\\n\",\n+    \"        batch = documents[i : i + 500]\\n\",\n+    \"        result = client.upload_documents(documents=batch)\\n\",\n+    \"        print(f\\\"Uploaded batch {i//500 + 1} of {len(documents)//500 + 1}\\\")\\n\",\n+    \"\\n\",\n+    \"    print(f\\\"Uploaded {len(documents)} documents in total\\\")\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"upload_documents(\\n\",\n+    \"    INDEX_NAME,\\n\",\n+    \"    SEARCH_SERVICE_ENDPOINT,\\n\",\n+    \"    azure_search_credential,\\n\",\n+    \"    transformed_documents_with_embeddings,\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Perform a Vector Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 73,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Initialize the SearchClient\\n\",\n+    \"search_client = SearchClient(\\n\",\n+    \"    endpoint=SEARCH_SERVICE_ENDPOINT, \\n\",\n+    \"    index_name=INDEX_NAME, \\n\",\n+    \"    credential=azure_search_credential\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 74,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"ID: MjQwMS4wNDA4OCM5\\n\",\n+      \"Arxiv ID: 2401.04088\\n\",\n+      \"Title: Mixtral of Experts\\n\",\n+      \"Score: 0.7831335\\n\",\n+      \"Content: Mistral 78 % 2681 Mistral 78 3 3 s0 5 = A % 66 50 g 4 45 64 78 138 348708 78 138 348708 78 138 348 70B S66 Mixtral 8x7B 50 Mixtral 8x7B 5 = 564 340 g al Mistral 78 ee Mistral 78 3 5 \u00c2\u00a7 30 5 eo \u00e2 = Mistral \u00c2\u00b0 20 \u00e2 e LlaMA2 78 (138 348 70B 7B (138 348 708 7B \u00c2\u00ab13B 34B 708 Active Params Active Params Active Params Figure 3: Results on MMLU, commonsense reasoning, world knowledge and reading comprehension, math and code for Mistral (7B/8x7B) vs Llama 2 (7B/13B/70B). Mixtral largely outperforms Llama 2 70B on all benchmarks, except on reading comprehension benchmarks while using 5x lower active parameters. It is also vastly superior to Llama 2 70B on code and math. Detailed results for Mixtral, Mistral 7B and Llama 2 7B/13B/70B and Llama 1 34B2 are reported in Table 2. Figure 2 compares the performance of Mixtral with the Llama models in different categories. Mixtral surpasses Llama 2 70B across most metrics. In particular, Mixtral displays a superior performance in code and mathematics benchmarks. Size and Efficiency. We compare our performance to the Llama 2 family, aiming to understand Mixtral models\u00e2 efficiency in the cost-performance spectrum (see Figure 3). As a sparse Mixture- of-Experts model, Mixtral only uses 13B active parameters for each token. With 5x lower active parameters, Mixtral is able to outperform Llama 2 70B across most categories. Note that this analysis focuses on the active parameter count (see Section 2.1), which is directly proportional to the inference compute cost, but does not consider the memory costs and hardware utilization.\\n\",\n+      \"--------------------------------------------------\\n\",\n+      \"ID: MjMxMC4wNjgyNSMx\\n\",\n+      \"Arxiv ID: 2310.06825\\n\",\n+      \"Title: Mistral 7B\\n\",\n+      \"Score: 0.7815856\\n\",\n+      \"Content: Mistral 7B outperforms the previous best 13B model (Llama 2, [26]) across all tested benchmarks, and surpasses the best 34B model (LLaMa 34B, [25]) in mathematics and code generation. Furthermore, Mistral 7B approaches the coding performance of Code-Llama 7B [20], without sacrificing performance on non-code related benchmarks. Mistral 7B leverages grouped-query attention (GQA) [1], and sliding window attention (SWA) [6, 3]. GQA significantly accelerates the inference speed, and also reduces the memory requirement during decoding, allowing for higher batch sizes hence higher throughput, a crucial factor for real-time applications. In addition, SWA is designed to handle longer sequences more effectively at a reduced computational cost, thereby alleviating a common limitation in LLMs. These attention mechanisms collectively contribute to the enhanced performance and efficiency of Mistral 7B. Mistral 7B is released under the Apache 2.0 license. This release is accompanied by a reference implementation1 facilitating easy deployment either locally or on cloud platforms such as AWS, GCP, or Azure using the vLLM [17] inference server and SkyPilot 2. Integration with Hugging Face 3 is also streamlined for easier integration. Moreover, Mistral 7B is crafted for ease of fine-tuning across a myriad of tasks. As a demonstration of its adaptability and superior performance, we present a chat model fine-tuned from Mistral 7B that significantly outperforms the Llama 2 13B \u00e2 Chat model. Mistral 7B takes a significant step in balancing the goals of getting high performance while keeping large language models efficient. Through our work, our aim is to help the community create more affordable, efficient, and high-performing language models that can be used in a wide range of real-world applications.\\n\",\n+      \"--------------------------------------------------\\n\",\n+      \"ID: MjMxMC4wNjgyNSM4\\n\",\n+      \"Arxiv ID: 2310.06825\\n\",\n+      \"Title: Mistral 7B\\n\",\n+      \"Score: 0.77976066\\n\",\n+      \"Content: When evaluated on reasoning, comprehension, and STEM reasoning (specifically MMLU), Mistral 7B mirrored performance that one might expect from a Llama 2 model with more than 3x its size. On the Knowledge benchmarks, Mistral 7B\u00e2 s performance achieves a lower compression rate of 1.9x, which is likely due to its limited parameter count that restricts the amount of knowledge it can store. Evaluation Differences. On some benchmarks, there are some differences between our evaluation protocol and the one reported in the Llama 2 paper: 1) on MBPP, we use the hand-verified subset 2) on TriviaQA, we do not provide Wikipedia contexts. # Instruction Finetuning To evaluate the generalization capabilities of Mistral 7B, we fine-tuned it on instruction datasets publicly available on the Hugging Face repository. No proprietary data or training tricks were utilized: Mistral 7B \u00e2 Instruct model is a simple and preliminary demonstration that the base model can easily be fine-tuned to achieve good performance. In Table 3, we observe that the resulting model, Mistral 7B \u00e2 Instruct, exhibits superior perfor- mance compared to all 7B models on MT-Bench, and is comparable to 13B \u00e2 Chat models. An independent human evaluation was conducted on https://llmboxing.com/leaderboard. Model Chatbot Arena ELO Rating MT Bench WizardLM 13B v1.2 Mistral 7B Instruct Llama 2 13B Chat Vicuna 13B Llama 2 7B Chat Vicuna 7B Alpaca 13B 1047 1031 1012 1041 985 997 914 7.2 6.84 +/- 0.07 6.65 6.57 6.27 6.17 4.53 Table 3: Comparison of Chat models. Mistral 7B \u00e2 Instruct outperforms all 7B models on MT-Bench, and is comparable to 13B \u00e2\\n\",\n+      \"--------------------------------------------------\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents.models import (\\n\",\n+    \"    VectorizedQuery\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"def generate_query_embedding(query):\\n\",\n+    \"    # Set the embedding model\\n\",\n+    \"    embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"    # Generate embedding for the query\\n\",\n+    \"    embed = mistral.embeddings(model=embed_model, input=[query])\\n\",\n+    \"    return embed.data[0].embedding\\n\",\n+    \"\\n\",\n+    \"# Pure Vector Search\\n\",\n+    \"query = \\\"can you tell me about mistral LLM?\\\"\\n\",\n+    \"\\n\",\n+    \"vector_query = VectorizedQuery(\\n\",\n+    \"    vector=generate_query_embedding(query), k_nearest_neighbors=3, fields=\\\"embedding\\\"\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"results = search_client.search(\\n\",\n+    \"    search_text=None,\\n\",\n+    \"    vector_queries=[vector_query],\\n\",\n+    \"    select=[\\\"id\\\", \\\"arxiv_id\\\", \\\"title\\\", \\\"content\\\"],\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"for result in results:\\n\",\n+    \"    print(f\\\"ID: {result['id']}\\\")\\n\",\n+    \"    print(f\\\"Arxiv ID: {result['arxiv_id']}\\\")\\n\",\n+    \"    print(f\\\"Title: {result['title']}\\\")\\n\",\n+    \"    print(f\\\"Score: {result['@search.score']}\\\")\\n\",\n+    \"    print(f\\\"Content: {result['content']}\\\")\\n\",\n+    \"    print(\\\"-\\\" * 50)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Perform a Hybrid Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 75,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"ID: MjMxMC4wNjgyNSM4\\n\",\n+      \"Arxiv ID: 2310.06825\\n\",\n+      \"Title: Mistral 7B\\n\",\n+      \"Score: 0.032258063554763794\\n\",\n+      \"Content: When evaluated on reasoning, comprehension, and STEM reasoning (specifically MMLU), Mistral 7B mirrored performance that one might expect from a Llama 2 model with more than 3x its size. On the Knowledge benchmarks, Mistral 7B\u00e2 s performance achieves a lower compression rate of 1.9x, which is likely due to its limited parameter count that restricts the amount of knowledge it can store. Evaluation Differences. On some benchmarks, there are some differences between our evaluation protocol and the one reported in the Llama 2 paper: 1) on MBPP, we use the hand-verified subset 2) on TriviaQA, we do not provide Wikipedia contexts. # Instruction Finetuning To evaluate the generalization capabilities of Mistral 7B, we fine-tuned it on instruction datasets publicly available on the Hugging Face repository. No proprietary data or training tricks were utilized: Mistral 7B \u00e2 Instruct model is a simple and preliminary demonstration that the base model can easily be fine-tuned to achieve good performance. In Table 3, we observe that the resulting model, Mistral 7B \u00e2 Instruct, exhibits superior perfor- mance compared to all 7B models on MT-Bench, and is comparable to 13B \u00e2 Chat models. An independent human evaluation was conducted on https://llmboxing.com/leaderboard. Model Chatbot Arena ELO Rating MT Bench WizardLM 13B v1.2 Mistral 7B Instruct Llama 2 13B Chat Vicuna 13B Llama 2 7B Chat Vicuna 7B Alpaca 13B 1047 1031 1012 1041 985 997 914 7.2 6.84 +/- 0.07 6.65 6.57 6.27 6.17 4.53 Table 3: Comparison of Chat models. Mistral 7B \u00e2 Instruct outperforms all 7B models on MT-Bench, and is comparable to 13B \u00e2\\n\",\n+      \"--------------------------------------------------\\n\",\n+      \"ID: MjMxMC4wNjgyNSMx\\n\",\n+      \"Arxiv ID: 2310.06825\\n\",\n+      \"Title: Mistral 7B\\n\",\n+      \"Score: 0.03154495730996132\\n\",\n+      \"Content: Mistral 7B outperforms the previous best 13B model (Llama 2, [26]) across all tested benchmarks, and surpasses the best 34B model (LLaMa 34B, [25]) in mathematics and code generation. Furthermore, Mistral 7B approaches the coding performance of Code-Llama 7B [20], without sacrificing performance on non-code related benchmarks. Mistral 7B leverages grouped-query attention (GQA) [1], and sliding window attention (SWA) [6, 3]. GQA significantly accelerates the inference speed, and also reduces the memory requirement during decoding, allowing for higher batch sizes hence higher throughput, a crucial factor for real-time applications. In addition, SWA is designed to handle longer sequences more effectively at a reduced computational cost, thereby alleviating a common limitation in LLMs. These attention mechanisms collectively contribute to the enhanced performance and efficiency of Mistral 7B. Mistral 7B is released under the Apache 2.0 license. This release is accompanied by a reference implementation1 facilitating easy deployment either locally or on cloud platforms such as AWS, GCP, or Azure using the vLLM [17] inference server and SkyPilot 2. Integration with Hugging Face 3 is also streamlined for easier integration. Moreover, Mistral 7B is crafted for ease of fine-tuning across a myriad of tasks. As a demonstration of its adaptability and superior performance, we present a chat model fine-tuned from Mistral 7B that significantly outperforms the Llama 2 13B \u00e2 Chat model. Mistral 7B takes a significant step in balancing the goals of getting high performance while keeping large language models efficient. Through our work, our aim is to help the community create more affordable, efficient, and high-performing language models that can be used in a wide range of real-world applications.\\n\",\n+      \"--------------------------------------------------\\n\",\n+      \"ID: MjQwMS4wNDA4OCM5\\n\",\n+      \"Arxiv ID: 2401.04088\\n\",\n+      \"Title: Mixtral of Experts\\n\",\n+      \"Score: 0.021544717252254486\\n\",\n+      \"Content: Mistral 78 % 2681 Mistral 78 3 3 s0 5 = A % 66 50 g 4 45 64 78 138 348708 78 138 348708 78 138 348 70B S66 Mixtral 8x7B 50 Mixtral 8x7B 5 = 564 340 g al Mistral 78 ee Mistral 78 3 5 \u00c2\u00a7 30 5 eo \u00e2 = Mistral \u00c2\u00b0 20 \u00e2 e LlaMA2 78 (138 348 70B 7B (138 348 708 7B \u00c2\u00ab13B 34B 708 Active Params Active Params Active Params Figure 3: Results on MMLU, commonsense reasoning, world knowledge and reading comprehension, math and code for Mistral (7B/8x7B) vs Llama 2 (7B/13B/70B). Mixtral largely outperforms Llama 2 70B on all benchmarks, except on reading comprehension benchmarks while using 5x lower active parameters. It is also vastly superior to Llama 2 70B on code and math. Detailed results for Mixtral, Mistral 7B and Llama 2 7B/13B/70B and Llama 1 34B2 are reported in Table 2. Figure 2 compares the performance of Mixtral with the Llama models in different categories. Mixtral surpasses Llama 2 70B across most metrics. In particular, Mixtral displays a superior performance in code and mathematics benchmarks. Size and Efficiency. We compare our performance to the Llama 2 family, aiming to understand Mixtral models\u00e2 efficiency in the cost-performance spectrum (see Figure 3). As a sparse Mixture- of-Experts model, Mixtral only uses 13B active parameters for each token. With 5x lower active parameters, Mixtral is able to outperform Llama 2 70B across most categories. Note that this analysis focuses on the active parameter count (see Section 2.1), which is directly proportional to the inference compute cost, but does not consider the memory costs and hardware utilization.\\n\",\n+      \"--------------------------------------------------\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"def generate_query_embedding(query):\\n\",\n+    \"    # Set the embedding model\\n\",\n+    \"    embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"    # Generate embedding for the query\\n\",\n+    \"    embed = mistral.embeddings(model=embed_model, input=[query])\\n\",\n+    \"    return embed.data[0].embedding\\n\",\n+    \"\\n\",\n+    \"# Pure Vector Search\\n\",\n+    \"query = \\\"can you tell me about mistral LLM?\\\"\\n\",\n+    \"\\n\",\n+    \"vector_query = VectorizedQuery(\\n\",\n+    \"    vector=generate_query_embedding(query), k_nearest_neighbors=3, fields=\\\"embedding\\\"\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"results = search_client.search(\\n\",\n+    \"    search_text=query,\\n\",\n+    \"    vector_queries=[vector_query],\\n\",\n+    \"    select=[\\\"id\\\", \\\"arxiv_id\\\", \\\"title\\\", \\\"content\\\"],\\n\",\n+    \"    top=3 # Limit the number of results\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"for result in results:\\n\",\n+    \"    print(f\\\"ID: {result['id']}\\\")\\n\",\n+    \"    print(f\\\"Arxiv ID: {result['arxiv_id']}\\\")\\n\",\n+    \"    print(f\\\"Title: {result['title']}\\\")\\n\",\n+    \"    print(f\\\"Score: {result['@search.score']}\\\")\\n\",\n+    \"    print(f\\\"Content: {result['content']}\\\")\\n\",\n+    \"    print(\\\"-\\\" * 50)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Ground retreived results from Azure AI Search to Mistral-Large LLM\"",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "pablocastro",
          "id": 3433341,
          "node_id": "MDQ6VXNlcjM0MzMzNDE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3433341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pablocastro",
          "html_url": "https://github.com/pablocastro",
          "followers_url": "https://api.github.com/users/pablocastro/followers",
          "following_url": "https://api.github.com/users/pablocastro/following{/other_user}",
          "gists_url": "https://api.github.com/users/pablocastro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pablocastro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pablocastro/subscriptions",
          "organizations_url": "https://api.github.com/users/pablocastro/orgs",
          "repos_url": "https://api.github.com/users/pablocastro/repos",
          "events_url": "https://api.github.com/users/pablocastro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pablocastro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Typo (retrieved)",
        "created_at": "2024-05-31T22:29:11Z",
        "updated_at": "2024-05-31T22:33:06Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622997596",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622997596"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1622997596"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1622997596/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 745,
        "side": "RIGHT",
        "original_position": 745,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625854827",
        "pull_request_review_id": 2096147406,
        "id": 1625854827,
        "node_id": "PRRC_kwDOLBF5j85g6JNr",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "You're right, the map operation is not necessary since I'm only dropping columns. The remove_columns method suffices. ",
        "created_at": "2024-06-04T11:46:48Z",
        "updated_at": "2024-06-04T11:46:49Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1625854827",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625854827"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1625854827"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625854827/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 150,
        "side": "RIGHT",
        "in_reply_to_id": 1622986300,
        "original_position": 150,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625882018",
        "pull_request_review_id": 2096194659,
        "id": 1625882018,
        "node_id": "PRRC_kwDOLBF5j85g6P2i",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-create-service-portal).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Authenticate into Azure AI Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from getpass import getpass\\n\",\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"SEARCH_SERVICE_ENDPOINT = os.getenv(\\\"SEARCH_SERVICE_ENDPOINT\\\") or getpass(\\\"Enter your Azure AI Search Service Endpoint: \\\")\\n\",\n+    \"SEARCH_SERVICE_API_KEY = os.getenv(\\\"SEARCH_SERVICE_API_KEY\\\") or getpass(\\\"Enter your Azure AI Search Service API Key: \\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 72,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Using AAD for authentication.\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"USE_AAD_FOR_SEARCH = True\\n\",\n+    \"\\n\",\n+    \"def authenticate_azure_search(api_key=None, use_aad_for_search=False):\\n\",\n+    \"    if use_aad_for_search:\\n\",\n+    \"        print(\\\"Using AAD for authentication.\\\")\\n\",\n+    \"        credential = DefaultAzureCredential()\\n\",\n+    \"    else:\\n\",\n+    \"        print(\\\"Using API keys for authentication.\\\")\\n\",\n+    \"        if api_key is None:\\n\",\n+    \"            raise ValueError(\\\"API key must be provided if not using AAD for authentication.\\\")\\n\",\n+    \"        credential = AzureKeyCredential(api_key)\\n\",\n+    \"    return credential\\n\",\n+    \"\\n\",\n+    \"azure_search_credential = authenticate_azure_search(\\n\",\n+    \"    api_key=SEARCH_SERVICE_API_KEY, use_aad_for_search=USE_AAD_FOR_SEARCH\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Create a vector index\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 70,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \" ai-arxiv2-semantic-chunks created\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents.indexes import SearchIndexClient\\n\",\n+    \"from azure.search.documents.indexes.models import (\\n\",\n+    \"    SimpleField,\\n\",\n+    \"    SearchFieldDataType,\\n\",\n+    \"    SearchableField,\\n\",\n+    \"    SearchField,\\n\",\n+    \"    VectorSearch,\\n\",\n+    \"    HnswAlgorithmConfiguration,\\n\",\n+    \"    VectorSearchProfile,\\n\",\n+    \"    SemanticConfiguration,\\n\",\n+    \"    SemanticPrioritizedFields,\\n\",\n+    \"    SemanticField,\\n\",\n+    \"    SemanticSearch,\\n\",\n+    \"    SearchIndex,\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"DIMENSIONS = 1024\\n\",\n+    \"HNSW_PARAMETERS = {\\\"m\\\": 4, \\\"metric\\\": \\\"cosine\\\", \\\"ef_construction\\\": 400, \\\"ef_search\\\": 500}\\n\",\n+    \"INDEX_NAME = \\\"ai-arxiv2-semantic-chunks\\\"  # replace with your actual index name\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def create_index(endpoint, credential):\\n\",\n+    \"    # Create a search index\\n\",\n+    \"    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)\\n\",\n+    \"    fields = [\\n\",\n+    \"        SimpleField(\\n\",\n+    \"            name=\\\"id\\\",\\n\",\n+    \"            type=SearchFieldDataType.String,\\n\",\n+    \"            key=True,\\n\",\n+    \"            sortable=True,\\n\",\n+    \"            filterable=True,\\n\",\n+    \"            facetable=True,\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Updated",
        "created_at": "2024-06-04T12:07:49Z",
        "updated_at": "2024-06-04T12:07:49Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1625882018",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625882018"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1625882018"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625882018/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 349,
        "side": "RIGHT",
        "in_reply_to_id": 1622990770,
        "original_position": 349,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625922922",
        "pull_request_review_id": 2096258007,
        "id": 1625922922,
        "node_id": "PRRC_kwDOLBF5j85g6Z1q",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-create-service-portal).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Authenticate into Azure AI Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from getpass import getpass\\n\",\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"SEARCH_SERVICE_ENDPOINT = os.getenv(\\\"SEARCH_SERVICE_ENDPOINT\\\") or getpass(\\\"Enter your Azure AI Search Service Endpoint: \\\")\\n\",\n+    \"SEARCH_SERVICE_API_KEY = os.getenv(\\\"SEARCH_SERVICE_API_KEY\\\") or getpass(\\\"Enter your Azure AI Search Service API Key: \\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 72,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Using AAD for authentication.\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"USE_AAD_FOR_SEARCH = True\\n\",\n+    \"\\n\",\n+    \"def authenticate_azure_search(api_key=None, use_aad_for_search=False):\\n\",\n+    \"    if use_aad_for_search:\\n\",\n+    \"        print(\\\"Using AAD for authentication.\\\")\\n\",\n+    \"        credential = DefaultAzureCredential()\\n\",\n+    \"    else:\\n\",\n+    \"        print(\\\"Using API keys for authentication.\\\")\\n\",\n+    \"        if api_key is None:\\n\",\n+    \"            raise ValueError(\\\"API key must be provided if not using AAD for authentication.\\\")\\n\",\n+    \"        credential = AzureKeyCredential(api_key)\\n\",\n+    \"    return credential\\n\",\n+    \"\\n\",\n+    \"azure_search_credential = authenticate_azure_search(\\n\",\n+    \"    api_key=SEARCH_SERVICE_API_KEY, use_aad_for_search=USE_AAD_FOR_SEARCH\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Create a vector index\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 70,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \" ai-arxiv2-semantic-chunks created\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents.indexes import SearchIndexClient\\n\",\n+    \"from azure.search.documents.indexes.models import (\\n\",\n+    \"    SimpleField,\\n\",\n+    \"    SearchFieldDataType,\\n\",\n+    \"    SearchableField,\\n\",\n+    \"    SearchField,\\n\",\n+    \"    VectorSearch,\\n\",\n+    \"    HnswAlgorithmConfiguration,\\n\",\n+    \"    VectorSearchProfile,\\n\",\n+    \"    SemanticConfiguration,\\n\",\n+    \"    SemanticPrioritizedFields,\\n\",\n+    \"    SemanticField,\\n\",\n+    \"    SemanticSearch,\\n\",\n+    \"    SearchIndex,\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"DIMENSIONS = 1024\\n\",\n+    \"HNSW_PARAMETERS = {\\\"m\\\": 4, \\\"metric\\\": \\\"cosine\\\", \\\"ef_construction\\\": 400, \\\"ef_search\\\": 500}\\n\",\n+    \"INDEX_NAME = \\\"ai-arxiv2-semantic-chunks\\\"  # replace with your actual index name\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def create_index(endpoint, credential):\\n\",\n+    \"    # Create a search index\\n\",\n+    \"    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)\\n\",\n+    \"    fields = [\\n\",\n+    \"        SimpleField(\\n\",\n+    \"            name=\\\"id\\\",\\n\",\n+    \"            type=SearchFieldDataType.String,\\n\",\n+    \"            key=True,\\n\",\n+    \"            sortable=True,\\n\",\n+    \"            filterable=True,\\n\",\n+    \"            facetable=True,\\n\",\n+    \"        ),\\n\",\n+    \"        SearchableField(name=\\\"title\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(name=\\\"content\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(\\n\",\n+    \"            name=\\\"arxiv_id\\\", type=SearchFieldDataType.String, filterable=True\\n\",\n+    \"        ),\\n\",\n+    \"        SearchField(\\n\",\n+    \"            name=\\\"embedding\\\",\\n\",\n+    \"            type=SearchFieldDataType.Collection(SearchFieldDataType.Single),\\n\",\n+    \"            searchable=True,\\n\",\n+    \"            vector_search_dimensions=DIMENSIONS,\\n\",\n+    \"            vector_search_profile_name=\\\"myHnswProfile\\\",\\n\",\n+    \"            hidden=False,  # Set to true if you want to retrieve the embeddings in the search results\\n\",\n+    \"        ),\\n\",\n+    \"    ]\\n\",\n+    \"\\n\",\n+    \"    # Configure the vector search configuration\\n\",\n+    \"    vector_search = VectorSearch(\\n\",\n+    \"        algorithms=[\\n\",\n+    \"            HnswAlgorithmConfiguration(name=\\\"myHnsw\\\", parameters=HNSW_PARAMETERS)\\n\",\n+    \"        ],\\n\",\n+    \"        profiles=[\\n\",\n+    \"            VectorSearchProfile(\\n\",\n+    \"                name=\\\"myHnswProfile\\\",\\n\",\n+    \"                algorithm_configuration_name=\\\"myHnsw\\\",\\n\",\n+    \"            )\\n\",\n+    \"        ],\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    semantic_config = SemanticConfiguration(\\n\",\n+    \"        name=\\\"my-semantic-config\\\",\\n\",\n+    \"        prioritized_fields=SemanticPrioritizedFields(\\n\",\n+    \"            title_field=SemanticField(field_name=\\\"title\\\"),\\n\",\n+    \"            keywords_fields=[SemanticField(field_name=\\\"arxiv_id\\\")],\\n\",\n+    \"            content_fields=[SemanticField(field_name=\\\"content\\\")],\\n\",\n+    \"        ),\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    # Create the semantic settings with the configuration\\n\",\n+    \"    semantic_search = SemanticSearch(configurations=[semantic_config])\\n\",\n+    \"\\n\",\n+    \"    # Create the search index with the semantic settings\\n\",\n+    \"    index = SearchIndex(\\n\",\n+    \"        name=INDEX_NAME,\\n\",\n+    \"        fields=fields,\\n\",\n+    \"        vector_search=vector_search,\\n\",\n+    \"        semantic_search=semantic_search,\\n\",\n+    \"    )\\n\",\n+    \"    result = index_client.create_or_update_index(index)\\n\",\n+    \"    print(f\\\" {result.name} created\\\")\\n\",\n+    \"    \\n\",\n+    \"create_index(SEARCH_SERVICE_ENDPOINT, azure_search_credential)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Estimate Cost for Embedding Generation\\n\",\n+    \"\\n\",\n+    \"As per the information from [Lunary.ai's Mistral Tokenizer](https://lunary.ai/mistral-tokenizer), one token is approximately equivalent to five characters of text. \\n\",\n+    \"\\n\",\n+    \"According to [Mistral's Pricing](https://mistral.ai/technology/#pricing), the cost for using `mistral-embed` is $0.1 per 1M tokens for both inputs and outputs.\\n\",\n+    \"\\n\",\n+    \"In the following code block, we will calculate the estimated cost for generating embeddings based on the size of our dataset and these pricing details.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 54,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Estimated cost for generating embeddings: $0.19047898000000002\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"def estimate_cost(data, cost_per_million_tokens=0.1):\\n\",\n+    \"    total_characters = sum(len(entry['content']) for entry in data)\\n\",\n+    \"    total_tokens = total_characters / 5  # 1 token is approximately 5 characters\\n\",\n+    \"    total_tokens_in_millions = total_tokens / 1_000_000\\n\",\n+    \"    total_cost = total_tokens_in_millions * cost_per_million_tokens\\n\",\n+    \"    return total_cost\\n\",\n+    \"\\n\",\n+    \"estimated_cost = estimate_cost(data)\\n\",\n+    \"print(f\\\"Estimated cost for generating embeddings: ${estimated_cost}\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Transform Dataset for Azure AI Search Upload\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Function to transform your dataset into the format required by Azure AI Search\\n\",\n+    \"def transform_to_search_document(record):\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "The transformation function transform_to_search_document converts the HuggingFace `Dataset` object into a list of dictionaries that is required format to upload to Azure AI Search, also I kept getting an error when trying to generate embeddings.\r\n",
        "created_at": "2024-06-04T12:32:52Z",
        "updated_at": "2024-06-04T12:32:52Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1625922922",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625922922"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1625922922"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625922922/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 456,
        "side": "RIGHT",
        "in_reply_to_id": 1622992428,
        "original_position": 456,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625925743",
        "pull_request_review_id": 2096262817,
        "id": 1625925743,
        "node_id": "PRRC_kwDOLBF5j85g6ahv",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-create-service-portal).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Authenticate into Azure AI Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from getpass import getpass\\n\",\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"SEARCH_SERVICE_ENDPOINT = os.getenv(\\\"SEARCH_SERVICE_ENDPOINT\\\") or getpass(\\\"Enter your Azure AI Search Service Endpoint: \\\")\\n\",\n+    \"SEARCH_SERVICE_API_KEY = os.getenv(\\\"SEARCH_SERVICE_API_KEY\\\") or getpass(\\\"Enter your Azure AI Search Service API Key: \\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 72,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Using AAD for authentication.\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"USE_AAD_FOR_SEARCH = True\\n\",\n+    \"\\n\",\n+    \"def authenticate_azure_search(api_key=None, use_aad_for_search=False):\\n\",\n+    \"    if use_aad_for_search:\\n\",\n+    \"        print(\\\"Using AAD for authentication.\\\")\\n\",\n+    \"        credential = DefaultAzureCredential()\\n\",\n+    \"    else:\\n\",\n+    \"        print(\\\"Using API keys for authentication.\\\")\\n\",\n+    \"        if api_key is None:\\n\",\n+    \"            raise ValueError(\\\"API key must be provided if not using AAD for authentication.\\\")\\n\",\n+    \"        credential = AzureKeyCredential(api_key)\\n\",\n+    \"    return credential\\n\",\n+    \"\\n\",\n+    \"azure_search_credential = authenticate_azure_search(\\n\",\n+    \"    api_key=SEARCH_SERVICE_API_KEY, use_aad_for_search=USE_AAD_FOR_SEARCH\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Create a vector index\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 70,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \" ai-arxiv2-semantic-chunks created\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents.indexes import SearchIndexClient\\n\",\n+    \"from azure.search.documents.indexes.models import (\\n\",\n+    \"    SimpleField,\\n\",\n+    \"    SearchFieldDataType,\\n\",\n+    \"    SearchableField,\\n\",\n+    \"    SearchField,\\n\",\n+    \"    VectorSearch,\\n\",\n+    \"    HnswAlgorithmConfiguration,\\n\",\n+    \"    VectorSearchProfile,\\n\",\n+    \"    SemanticConfiguration,\\n\",\n+    \"    SemanticPrioritizedFields,\\n\",\n+    \"    SemanticField,\\n\",\n+    \"    SemanticSearch,\\n\",\n+    \"    SearchIndex,\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"DIMENSIONS = 1024\\n\",\n+    \"HNSW_PARAMETERS = {\\\"m\\\": 4, \\\"metric\\\": \\\"cosine\\\", \\\"ef_construction\\\": 400, \\\"ef_search\\\": 500}\\n\",\n+    \"INDEX_NAME = \\\"ai-arxiv2-semantic-chunks\\\"  # replace with your actual index name\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def create_index(endpoint, credential):\\n\",\n+    \"    # Create a search index\\n\",\n+    \"    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)\\n\",\n+    \"    fields = [\\n\",\n+    \"        SimpleField(\\n\",\n+    \"            name=\\\"id\\\",\\n\",\n+    \"            type=SearchFieldDataType.String,\\n\",\n+    \"            key=True,\\n\",\n+    \"            sortable=True,\\n\",\n+    \"            filterable=True,\\n\",\n+    \"            facetable=True,\\n\",\n+    \"        ),\\n\",\n+    \"        SearchableField(name=\\\"title\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(name=\\\"content\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(\\n\",\n+    \"            name=\\\"arxiv_id\\\", type=SearchFieldDataType.String, filterable=True\\n\",\n+    \"        ),\\n\",\n+    \"        SearchField(\\n\",\n+    \"            name=\\\"embedding\\\",\\n\",\n+    \"            type=SearchFieldDataType.Collection(SearchFieldDataType.Single),\\n\",\n+    \"            searchable=True,\\n\",\n+    \"            vector_search_dimensions=DIMENSIONS,\\n\",\n+    \"            vector_search_profile_name=\\\"myHnswProfile\\\",\\n\",\n+    \"            hidden=False,  # Set to true if you want to retrieve the embeddings in the search results\\n\",\n+    \"        ),\\n\",\n+    \"    ]\\n\",\n+    \"\\n\",\n+    \"    # Configure the vector search configuration\\n\",\n+    \"    vector_search = VectorSearch(\\n\",\n+    \"        algorithms=[\\n\",\n+    \"            HnswAlgorithmConfiguration(name=\\\"myHnsw\\\", parameters=HNSW_PARAMETERS)\\n\",\n+    \"        ],\\n\",\n+    \"        profiles=[\\n\",\n+    \"            VectorSearchProfile(\\n\",\n+    \"                name=\\\"myHnswProfile\\\",\\n\",\n+    \"                algorithm_configuration_name=\\\"myHnsw\\\",\\n\",\n+    \"            )\\n\",\n+    \"        ],\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    semantic_config = SemanticConfiguration(\\n\",\n+    \"        name=\\\"my-semantic-config\\\",\\n\",\n+    \"        prioritized_fields=SemanticPrioritizedFields(\\n\",\n+    \"            title_field=SemanticField(field_name=\\\"title\\\"),\\n\",\n+    \"            keywords_fields=[SemanticField(field_name=\\\"arxiv_id\\\")],\\n\",\n+    \"            content_fields=[SemanticField(field_name=\\\"content\\\")],\\n\",\n+    \"        ),\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    # Create the semantic settings with the configuration\\n\",\n+    \"    semantic_search = SemanticSearch(configurations=[semantic_config])\\n\",\n+    \"\\n\",\n+    \"    # Create the search index with the semantic settings\\n\",\n+    \"    index = SearchIndex(\\n\",\n+    \"        name=INDEX_NAME,\\n\",\n+    \"        fields=fields,\\n\",\n+    \"        vector_search=vector_search,\\n\",\n+    \"        semantic_search=semantic_search,\\n\",\n+    \"    )\\n\",\n+    \"    result = index_client.create_or_update_index(index)\\n\",\n+    \"    print(f\\\" {result.name} created\\\")\\n\",\n+    \"    \\n\",\n+    \"create_index(SEARCH_SERVICE_ENDPOINT, azure_search_credential)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Estimate Cost for Embedding Generation\\n\",\n+    \"\\n\",\n+    \"As per the information from [Lunary.ai's Mistral Tokenizer](https://lunary.ai/mistral-tokenizer), one token is approximately equivalent to five characters of text. \\n\",\n+    \"\\n\",\n+    \"According to [Mistral's Pricing](https://mistral.ai/technology/#pricing), the cost for using `mistral-embed` is $0.1 per 1M tokens for both inputs and outputs.\\n\",\n+    \"\\n\",\n+    \"In the following code block, we will calculate the estimated cost for generating embeddings based on the size of our dataset and these pricing details.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 54,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Estimated cost for generating embeddings: $0.19047898000000002\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"def estimate_cost(data, cost_per_million_tokens=0.1):\\n\",\n+    \"    total_characters = sum(len(entry['content']) for entry in data)\\n\",\n+    \"    total_tokens = total_characters / 5  # 1 token is approximately 5 characters\\n\",\n+    \"    total_tokens_in_millions = total_tokens / 1_000_000\\n\",\n+    \"    total_cost = total_tokens_in_millions * cost_per_million_tokens\\n\",\n+    \"    return total_cost\\n\",\n+    \"\\n\",\n+    \"estimated_cost = estimate_cost(data)\\n\",\n+    \"print(f\\\"Estimated cost for generating embeddings: ${estimated_cost}\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Transform Dataset for Azure AI Search Upload\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Function to transform your dataset into the format required by Azure AI Search\\n\",\n+    \"def transform_to_search_document(record):\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "The other option would probably be to just map the embeddings directly to the dataset object first but we'd still need to convert to list of dictionaries as a valid argument for the `upload_documents` function to AI Search",
        "created_at": "2024-06-04T12:35:01Z",
        "updated_at": "2024-06-04T12:35:01Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1625925743",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625925743"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1625925743"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625925743/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 456,
        "side": "RIGHT",
        "in_reply_to_id": 1622992428,
        "original_position": 456,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625946328",
        "pull_request_review_id": 2096296083,
        "id": 1625946328,
        "node_id": "PRRC_kwDOLBF5j85g6fjY",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-create-service-portal).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Authenticate into Azure AI Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from getpass import getpass\\n\",\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"SEARCH_SERVICE_ENDPOINT = os.getenv(\\\"SEARCH_SERVICE_ENDPOINT\\\") or getpass(\\\"Enter your Azure AI Search Service Endpoint: \\\")\\n\",\n+    \"SEARCH_SERVICE_API_KEY = os.getenv(\\\"SEARCH_SERVICE_API_KEY\\\") or getpass(\\\"Enter your Azure AI Search Service API Key: \\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 72,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Using AAD for authentication.\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"USE_AAD_FOR_SEARCH = True\\n\",\n+    \"\\n\",\n+    \"def authenticate_azure_search(api_key=None, use_aad_for_search=False):\\n\",\n+    \"    if use_aad_for_search:\\n\",\n+    \"        print(\\\"Using AAD for authentication.\\\")\\n\",\n+    \"        credential = DefaultAzureCredential()\\n\",\n+    \"    else:\\n\",\n+    \"        print(\\\"Using API keys for authentication.\\\")\\n\",\n+    \"        if api_key is None:\\n\",\n+    \"            raise ValueError(\\\"API key must be provided if not using AAD for authentication.\\\")\\n\",\n+    \"        credential = AzureKeyCredential(api_key)\\n\",\n+    \"    return credential\\n\",\n+    \"\\n\",\n+    \"azure_search_credential = authenticate_azure_search(\\n\",\n+    \"    api_key=SEARCH_SERVICE_API_KEY, use_aad_for_search=USE_AAD_FOR_SEARCH\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Create a vector index\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 70,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \" ai-arxiv2-semantic-chunks created\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents.indexes import SearchIndexClient\\n\",\n+    \"from azure.search.documents.indexes.models import (\\n\",\n+    \"    SimpleField,\\n\",\n+    \"    SearchFieldDataType,\\n\",\n+    \"    SearchableField,\\n\",\n+    \"    SearchField,\\n\",\n+    \"    VectorSearch,\\n\",\n+    \"    HnswAlgorithmConfiguration,\\n\",\n+    \"    VectorSearchProfile,\\n\",\n+    \"    SemanticConfiguration,\\n\",\n+    \"    SemanticPrioritizedFields,\\n\",\n+    \"    SemanticField,\\n\",\n+    \"    SemanticSearch,\\n\",\n+    \"    SearchIndex,\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"DIMENSIONS = 1024\\n\",\n+    \"HNSW_PARAMETERS = {\\\"m\\\": 4, \\\"metric\\\": \\\"cosine\\\", \\\"ef_construction\\\": 400, \\\"ef_search\\\": 500}\\n\",\n+    \"INDEX_NAME = \\\"ai-arxiv2-semantic-chunks\\\"  # replace with your actual index name\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def create_index(endpoint, credential):\\n\",\n+    \"    # Create a search index\\n\",\n+    \"    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)\\n\",\n+    \"    fields = [\\n\",\n+    \"        SimpleField(\\n\",\n+    \"            name=\\\"id\\\",\\n\",\n+    \"            type=SearchFieldDataType.String,\\n\",\n+    \"            key=True,\\n\",\n+    \"            sortable=True,\\n\",\n+    \"            filterable=True,\\n\",\n+    \"            facetable=True,\\n\",\n+    \"        ),\\n\",\n+    \"        SearchableField(name=\\\"title\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(name=\\\"content\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(\\n\",\n+    \"            name=\\\"arxiv_id\\\", type=SearchFieldDataType.String, filterable=True\\n\",\n+    \"        ),\\n\",\n+    \"        SearchField(\\n\",\n+    \"            name=\\\"embedding\\\",\\n\",\n+    \"            type=SearchFieldDataType.Collection(SearchFieldDataType.Single),\\n\",\n+    \"            searchable=True,\\n\",\n+    \"            vector_search_dimensions=DIMENSIONS,\\n\",\n+    \"            vector_search_profile_name=\\\"myHnswProfile\\\",\\n\",\n+    \"            hidden=False,  # Set to true if you want to retrieve the embeddings in the search results\\n\",\n+    \"        ),\\n\",\n+    \"    ]\\n\",\n+    \"\\n\",\n+    \"    # Configure the vector search configuration\\n\",\n+    \"    vector_search = VectorSearch(\\n\",\n+    \"        algorithms=[\\n\",\n+    \"            HnswAlgorithmConfiguration(name=\\\"myHnsw\\\", parameters=HNSW_PARAMETERS)\\n\",\n+    \"        ],\\n\",\n+    \"        profiles=[\\n\",\n+    \"            VectorSearchProfile(\\n\",\n+    \"                name=\\\"myHnswProfile\\\",\\n\",\n+    \"                algorithm_configuration_name=\\\"myHnsw\\\",\\n\",\n+    \"            )\\n\",\n+    \"        ],\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    semantic_config = SemanticConfiguration(\\n\",\n+    \"        name=\\\"my-semantic-config\\\",\\n\",\n+    \"        prioritized_fields=SemanticPrioritizedFields(\\n\",\n+    \"            title_field=SemanticField(field_name=\\\"title\\\"),\\n\",\n+    \"            keywords_fields=[SemanticField(field_name=\\\"arxiv_id\\\")],\\n\",\n+    \"            content_fields=[SemanticField(field_name=\\\"content\\\")],\\n\",\n+    \"        ),\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    # Create the semantic settings with the configuration\\n\",\n+    \"    semantic_search = SemanticSearch(configurations=[semantic_config])\\n\",\n+    \"\\n\",\n+    \"    # Create the search index with the semantic settings\\n\",\n+    \"    index = SearchIndex(\\n\",\n+    \"        name=INDEX_NAME,\\n\",\n+    \"        fields=fields,\\n\",\n+    \"        vector_search=vector_search,\\n\",\n+    \"        semantic_search=semantic_search,\\n\",\n+    \"    )\\n\",\n+    \"    result = index_client.create_or_update_index(index)\\n\",\n+    \"    print(f\\\" {result.name} created\\\")\\n\",\n+    \"    \\n\",\n+    \"create_index(SEARCH_SERVICE_ENDPOINT, azure_search_credential)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Estimate Cost for Embedding Generation\\n\",\n+    \"\\n\",\n+    \"As per the information from [Lunary.ai's Mistral Tokenizer](https://lunary.ai/mistral-tokenizer), one token is approximately equivalent to five characters of text. \\n\",\n+    \"\\n\",\n+    \"According to [Mistral's Pricing](https://mistral.ai/technology/#pricing), the cost for using `mistral-embed` is $0.1 per 1M tokens for both inputs and outputs.\\n\",\n+    \"\\n\",\n+    \"In the following code block, we will calculate the estimated cost for generating embeddings based on the size of our dataset and these pricing details.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 54,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Estimated cost for generating embeddings: $0.19047898000000002\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"def estimate_cost(data, cost_per_million_tokens=0.1):\\n\",\n+    \"    total_characters = sum(len(entry['content']) for entry in data)\\n\",\n+    \"    total_tokens = total_characters / 5  # 1 token is approximately 5 characters\\n\",\n+    \"    total_tokens_in_millions = total_tokens / 1_000_000\\n\",\n+    \"    total_cost = total_tokens_in_millions * cost_per_million_tokens\\n\",\n+    \"    return total_cost\\n\",\n+    \"\\n\",\n+    \"estimated_cost = estimate_cost(data)\\n\",\n+    \"print(f\\\"Estimated cost for generating embeddings: ${estimated_cost}\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Transform Dataset for Azure AI Search Upload\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Function to transform your dataset into the format required by Azure AI Search\\n\",\n+    \"def transform_to_search_document(record):\\n\",\n+    \"    return {\\n\",\n+    \"        \\\"id\\\": record[\\\"id\\\"],\\n\",\n+    \"        \\\"arxiv_id\\\": record[\\\"arxiv_id\\\"],\\n\",\n+    \"        \\\"title\\\": record[\\\"title\\\"],\\n\",\n+    \"        \\\"content\\\": record[\\\"content\\\"]\\n\",\n+    \"    }\\n\",\n+    \"    \\n\",\n+    \"# Transform all documents in the dataset\\n\",\n+    \"transformed_documents = [transform_to_search_document(doc) for doc in data]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Generate Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 58,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"def generate_embeddings(documents, model):\\n\",\n+    \"    for document in documents:\\n\",\n+    \"        content = document['content']\\n\",\n+    \"        embed = mistral.embeddings(\\n\",\n+    \"            model=model, input=[content]\\n\",\n+    \"        )\\n\",\n+    \"        # Add the embedding to the document\\n\",\n+    \"        document['embedding'] = embed.data[0].embedding\\n\",\n+    \"    return documents\\n\",\n+    \"\\n\",\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"transformed_documents_with_embeddings = generate_embeddings(transformed_documents, embed_model)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Azure AI Search doesn't allow certain unsafe keys so we'll base64 encode `id` here\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 78,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import base64\\n\",\n+    \"\\n\",\n+    \"def encode_key(key):\\n\",\n+    \"    return base64.urlsafe_b64encode(key.encode()).decode()\\n\",\n+    \"\\n\",\n+    \"# Use the function to encode keys\\n\",\n+    \"for document in transformed_documents_with_embeddings:\\n\",\n+    \"    document['id'] = encode_key(document['id'])\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Upload Documents\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 82,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Uploaded batch 1 of 21\\n\",\n+      \"Uploaded batch 2 of 21\\n\",\n+      \"Uploaded batch 3 of 21\\n\",\n+      \"Uploaded batch 4 of 21\\n\",\n+      \"Uploaded batch 5 of 21\\n\",\n+      \"Uploaded batch 6 of 21\\n\",\n+      \"Uploaded batch 7 of 21\\n\",\n+      \"Uploaded batch 8 of 21\\n\",\n+      \"Uploaded batch 9 of 21\\n\",\n+      \"Uploaded batch 10 of 21\\n\",\n+      \"Uploaded batch 11 of 21\\n\",\n+      \"Uploaded batch 12 of 21\\n\",\n+      \"Uploaded batch 13 of 21\\n\",\n+      \"Uploaded batch 14 of 21\\n\",\n+      \"Uploaded batch 15 of 21\\n\",\n+      \"Uploaded batch 16 of 21\\n\",\n+      \"Uploaded batch 17 of 21\\n\",\n+      \"Uploaded batch 18 of 21\\n\",\n+      \"Uploaded batch 19 of 21\\n\",\n+      \"Uploaded batch 20 of 21\\n\",\n+      \"Uploaded 10000 documents in total\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"from azure.search.documents import SearchClient\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def upload_documents(index_name, endpoint, credential, documents):\\n\",\n+    \"    client = SearchClient(\\n\",\n+    \"        endpoint=endpoint, index_name=index_name, credential=credential\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    # Split documents into chunks of 500\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "farzad528",
          "id": 40604067,
          "node_id": "MDQ6VXNlcjQwNjA0MDY3",
          "avatar_url": "https://avatars.githubusercontent.com/u/40604067?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/farzad528",
          "html_url": "https://github.com/farzad528",
          "followers_url": "https://api.github.com/users/farzad528/followers",
          "following_url": "https://api.github.com/users/farzad528/following{/other_user}",
          "gists_url": "https://api.github.com/users/farzad528/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/farzad528/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/farzad528/subscriptions",
          "organizations_url": "https://api.github.com/users/farzad528/orgs",
          "repos_url": "https://api.github.com/users/farzad528/repos",
          "events_url": "https://api.github.com/users/farzad528/events{/privacy}",
          "received_events_url": "https://api.github.com/users/farzad528/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "I actually forgot about using SearchIndexingBufferedSender in the SDK :) Updated",
        "created_at": "2024-06-04T12:49:10Z",
        "updated_at": "2024-06-04T12:49:10Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1625946328",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625946328"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1625946328"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1625946328/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 569,
        "side": "RIGHT",
        "in_reply_to_id": 1622995525,
        "original_position": 569,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1626266815",
        "pull_request_review_id": 2096830023,
        "id": 1626266815,
        "node_id": "PRRC_kwDOLBF5j85g7ty_",
        "diff_hunk": "@@ -0,0 +1,637 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 25,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 25,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 26,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 26,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 27,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 27,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.remove_columns([\\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"])\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 28,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 7,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 8,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: Using Microsoft Entra ID (f.k.a. Azure Active Directory) is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/azure/search/search-security-rbac) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/azure/search/search-create-service-portal).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Authenticate into Azure AI Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Using AAD for authentication.\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from getpass import getpass\\n\",\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"# Configuration variable\\n\",\n+    \"USE_AAD_FOR_SEARCH = True\\n\",\n+    \"SEARCH_SERVICE_ENDPOINT = os.getenv(\\\"SEARCH_SERVICE_ENDPOINT\\\") or getpass(\\\"Enter your Azure AI Search Service Endpoint: \\\")\\n\",\n+    \"\\n\",\n+    \"def authenticate_azure_search(use_aad_for_search=False):\\n\",\n+    \"    if use_aad_for_search:\\n\",\n+    \"        print(\\\"Using AAD for authentication.\\\")\\n\",\n+    \"        credential = DefaultAzureCredential()\\n\",\n+    \"    else:\\n\",\n+    \"        print(\\\"Using API keys for authentication.\\\")\\n\",\n+    \"        api_key = os.getenv(\\\"SEARCH_SERVICE_API_KEY\\\") or getpass(\\\"Enter your Azure AI Search Service API Key: \\\")\\n\",\n+    \"        if api_key is None:\\n\",\n+    \"            raise ValueError(\\\"API key must be provided if not using AAD for authentication.\\\")\\n\",\n+    \"        credential = AzureKeyCredential(api_key)\\n\",\n+    \"    return credential\\n\",\n+    \"\\n\",\n+    \"azure_search_credential = authenticate_azure_search(\\n\",\n+    \"    use_aad_for_search=USE_AAD_FOR_SEARCH\\n\",\n+    \")\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Create a vector index\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 36,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"ai-arxiv2-semantic-chunks created\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents.indexes import SearchIndexClient\\n\",\n+    \"from azure.search.documents.indexes.models import (\\n\",\n+    \"    SimpleField, SearchFieldDataType, SearchableField, SearchField,\\n\",\n+    \"    VectorSearch, HnswAlgorithmConfiguration, VectorSearchProfile,\\n\",\n+    \"    SemanticConfiguration, SemanticPrioritizedFields, SemanticField,\\n\",\n+    \"    SemanticSearch, SearchIndex\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"DIMENSIONS = 1024\\n\",\n+    \"HNSW_PARAMETERS = {\\\"m\\\": 4, \\\"metric\\\": \\\"cosine\\\", \\\"ef_construction\\\": 400, \\\"ef_search\\\": 500}\\n\",\n+    \"INDEX_NAME = \\\"ai-arxiv2-semantic-chunks\\\"\\n\",\n+    \"\\n\",\n+    \"# Create a search index\\n\",\n+    \"index_client = SearchIndexClient(endpoint=SEARCH_SERVICE_ENDPOINT, credential=azure_search_credential)\\n\",\n+    \"fields = [\\n\",\n+    \"    SimpleField(name=\\\"id\\\", type=SearchFieldDataType.String, key=True, sortable=False, filterable=True, facetable=False),\\n\",\n+    \"    SearchableField(name=\\\"title\\\", type=SearchFieldDataType.String),\\n\",\n+    \"    SearchableField(name=\\\"content\\\", type=SearchFieldDataType.String),\\n\",\n+    \"    SearchableField(name=\\\"arxiv_id\\\", type=SearchFieldDataType.String, filterable=True),\\n\",\n+    \"    SearchField(name=\\\"embedding\\\", type=SearchFieldDataType.Collection(SearchFieldDataType.Single),\\n\",\n+    \"                searchable=True, vector_search_dimensions=DIMENSIONS, vector_search_profile_name=\\\"myHnswProfile\\\", hidden=False)\\n\",\n+    \"]\\n\",\n+    \"\\n\",\n+    \"vector_search = VectorSearch(\\n\",\n+    \"    algorithms=[HnswAlgorithmConfiguration(name=\\\"myHnsw\\\", parameters=HNSW_PARAMETERS)],\\n\",\n+    \"    profiles=[VectorSearchProfile(name=\\\"myHnswProfile\\\", algorithm_configuration_name=\\\"myHnsw\\\")]\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"semantic_config = SemanticConfiguration(\\n\",\n+    \"    name=\\\"my-semantic-config\\\",\\n\",\n+    \"    prioritized_fields=SemanticPrioritizedFields(\\n\",\n+    \"        title_field=SemanticField(field_name=\\\"title\\\"),\\n\",\n+    \"        keywords_fields=[SemanticField(field_name=\\\"arxiv_id\\\")],\\n\",\n+    \"        content_fields=[SemanticField(field_name=\\\"content\\\")]\\n\",\n+    \"    )\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"semantic_search = SemanticSearch(configurations=[semantic_config])\\n\",\n+    \"index = SearchIndex(name=INDEX_NAME, fields=fields, vector_search=vector_search, semantic_search=semantic_search)\\n\",\n+    \"result = index_client.create_or_update_index(index)\\n\",\n+    \"print(f\\\"{result.name} created\\\")\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Estimate Cost for Embedding Generation\\n\",\n+    \"\\n\",\n+    \"As per the information from [Lunary.ai's Mistral Tokenizer](https://lunary.ai/mistral-tokenizer), one token is approximately equivalent to five characters of text. \\n\",\n+    \"\\n\",\n+    \"According to [Mistral's Pricing](https://mistral.ai/technology/#pricing), the cost for using `mistral-embed` is $0.1 per 1M tokens for both inputs and outputs.\\n\",\n+    \"\\n\",\n+    \"In the following code block, we will calculate the estimated cost for generating embeddings based on the size of our dataset and these pricing details.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 37,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Estimated cost for generating embeddings: $0.19047898000000002\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"# Estimate cost for generating embeddings\\n\",\n+    \"def estimate_cost(data, cost_per_million_tokens=0.1):\\n\",\n+    \"    total_characters = sum(len(entry['content']) for entry in data)\\n\",\n+    \"    total_tokens = total_characters / 5  # 1 token is approximately 5 characters\\n\",\n+    \"    total_cost = (total_tokens / 1_000_000) * cost_per_million_tokens\\n\",\n+    \"    return total_cost\\n\",\n+    \"\\n\",\n+    \"estimated_cost = estimate_cost(data)\\n\",\n+    \"print(f\\\"Estimated cost for generating embeddings: ${estimated_cost}\\\")\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Transform Dataset for Azure AI Search Upload\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 38,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Function to transform your dataset into the format required by Azure AI Search\\n\",\n+    \"def transform_to_search_document(record):\\n\",\n+    \"    return {\\n\",\n+    \"        \\\"id\\\": record[\\\"id\\\"],\\n\",\n+    \"        \\\"arxiv_id\\\": record[\\\"arxiv_id\\\"],\\n\",\n+    \"        \\\"title\\\": record[\\\"title\\\"],\\n\",\n+    \"        \\\"content\\\": record[\\\"content\\\"]\\n\",\n+    \"    }\\n\",\n+    \"    \\n\",\n+    \"# Transform all documents in the dataset\\n\",\n+    \"transformed_documents = [transform_to_search_document(doc) for doc in data]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Generate Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"def generate_embeddings(documents, model, batch_size=20):\\n\",\n+    \"    for i in range(0, len(documents), batch_size):\\n\",\n+    \"        batch = documents[i:i + batch_size]\\n\",\n+    \"        contents = [doc['content'] for doc in batch]\\n\",\n+    \"        embeds = mistral.embeddings(model=model, input=contents)\\n\",\n+    \"        for j, document in enumerate(batch):\\n\",\n+    \"            document['embedding'] = embeds.data[j].embedding\\n\",\n+    \"    return documents\\n\",\n+    \"\\n\",\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"generate_embeddings(transformed_documents, embed_model)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Azure AI Search doesn't allow certain unsafe keys so we'll base64 encode `id` here\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 43,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import base64\\n\",\n+    \"\\n\",\n+    \"# Base64 encode IDs for Azure AI Search compatibility\\n\",\n+    \"def encode_key(key):\\n\",\n+    \"    return base64.urlsafe_b64encode(key.encode()).decode()\\n\",\n+    \"\\n\",\n+    \"for document in transformed_documents:\\n\",\n+    \"    document['id'] = encode_key(document['id'])\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Upload Documents\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 44,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Uploaded 10000 documents in total\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents import SearchIndexingBufferedSender\\n\",\n+    \"\\n\",\n+    \"# Upload documents\\n\",\n+    \"def upload_documents(index_name, endpoint, credential, documents):\\n\",\n+    \"    buffered_sender = SearchIndexingBufferedSender(endpoint=endpoint, index_name=index_name, credential=credential)\\n\",\n+    \"    for document in documents:\\n\",",
        "path": "third_party/Azure AI Search/azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "fe53eb0779fe48e43c905244209366558071de3d",
        "user": {
          "login": "pablocastro",
          "id": 3433341,
          "node_id": "MDQ6VXNlcjM0MzMzNDE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3433341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pablocastro",
          "html_url": "https://github.com/pablocastro",
          "followers_url": "https://api.github.com/users/pablocastro/followers",
          "following_url": "https://api.github.com/users/pablocastro/following{/other_user}",
          "gists_url": "https://api.github.com/users/pablocastro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pablocastro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pablocastro/subscriptions",
          "organizations_url": "https://api.github.com/users/pablocastro/orgs",
          "repos_url": "https://api.github.com/users/pablocastro/repos",
          "events_url": "https://api.github.com/users/pablocastro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pablocastro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Why not just pass the documents array to the buffered sender in a single call? Is documents not a plain list?",
        "created_at": "2024-06-04T15:59:10Z",
        "updated_at": "2024-06-04T16:09:39Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1626266815",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1626266815"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1626266815"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1626266815/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": 476,
        "original_line": 476,
        "side": "RIGHT",
        "original_position": 476,
        "position": 476,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1626277729",
        "pull_request_review_id": 2096830023,
        "id": 1626277729,
        "node_id": "PRRC_kwDOLBF5j85g7wdh",
        "diff_hunk": "@@ -0,0 +1,908 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# RAG with Mistral AI, Azure AI Search and Azure AI Studio\\n\",\n+    \"\\n\",\n+    \"## Overview\\n\",\n+    \"\\n\",\n+    \"This notebook demonstrates how to integrate Mistral Embeddings with Azure AI Search as a vector store, and use the results to ground responses in the Mistral Chat Completion Model.\\n\",\n+    \"\\n\",\n+    \"## Prerequisites\\n\",\n+    \"\\n\",\n+    \"- Mistral AI API Key OR Azure AI Studio Deployed Mistral Chat Completion Model and Azure AI Studio API Key\\n\",\n+    \"- Azure AI Search service\\n\",\n+    \"- Python 3.x environment with necessary libraries installed\\n\",\n+    \"\\n\",\n+    \"## Steps\\n\",\n+    \"\\n\",\n+    \"1. Install required packages\\n\",\n+    \"2. Load data and generate Mistral embeddings\\n\",\n+    \"3. Index embeddings in Azure AI Search\\n\",\n+    \"4. Perform search using Azure AI Search\\n\",\n+    \"5. Ground search results in Mistral Chat Completion Model\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Install Required Packages\\n\",\n+    \"\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Install Required Packages\\n\",\n+    \"!pip install azure-search-documents==11.6.0b4\\n\",\n+    \"!pip install azure-identity==1.16.0 datasets==2.19.1 mistralai==0.2.0\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Load Data and Generate Mistral Embeddings\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 29,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'prechunk_id', 'postchunk_id', 'arxiv_id', 'references'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 29,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"from datasets import load_dataset\\n\",\n+    \"\\n\",\n+    \"data = load_dataset(\\n\",\n+    \"    \\\"jamescalam/ai-arxiv2-semantic-chunks\\\",\\n\",\n+    \"    split=\\\"train[:10000]\\\"\\n\",\n+    \")\\n\",\n+    \"data\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We have 10K chunks, where each chunk is roughly the length of 1-2 paragraphs in length. Here is an example of a single record:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 30,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"{'id': '2401.04088#0',\\n\",\n+       \" 'title': 'Mixtral of Experts',\\n\",\n+       \" 'content': '4 2 0 2 n a J 8 ] G L . s c [ 1 v 8 8 0 4 0 . 1 0 4 2 : v i X r a # Mixtral of Experts Albert Q. Jiang, Alexandre Sablayrolles, Antoine Roux, Arthur Mensch, Blanche Savary, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Emma Bou Hanna, Florian Bressand, Gianna Lengyel, Guillaume Bour, Guillaume Lample, L\u00c3\u00a9lio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Sandeep Subramanian, Sophia Yang, Szymon Antoniak, Teven Le Scao, Th\u00c3\u00a9ophile Gervet, Thibaut Lavril, Thomas Wang, Timoth\u00c3\u00a9e Lacroix, William El Sayed Abstract We introduce Mixtral 8x7B, a Sparse Mixture of Experts (SMoE) language model. Mixtral has the same architecture as Mistral 7B, with the difference that each layer is composed of 8 feedforward blocks (i.e. experts). For every token, at each layer, a router network selects two experts to process the current state and combine their outputs. Even though each token only sees two experts, the selected experts can be different at each timestep. As a result, each token has access to 47B parameters, but only uses 13B active parameters during inference. Mixtral was trained with a context size of 32k tokens and it outperforms or matches Llama 2 70B and GPT-3.5 across all evaluated benchmarks. In particular, Mixtral vastly outperforms Llama 2 70B on mathematics, code generation, and multilingual benchmarks. We also provide a model fine- tuned to follow instructions, Mixtral 8x7B \u00e2 Instruct, that surpasses GPT-3.5 Turbo, Claude-2.1, Gemini Pro, and Llama 2 70B \u00e2 chat model on human bench- marks. Both the base and instruct models are released under the Apache 2.0 license.',\\n\",\n+       \" 'prechunk_id': '',\\n\",\n+       \" 'postchunk_id': '2401.04088#1',\\n\",\n+       \" 'arxiv_id': '2401.04088',\\n\",\n+       \" 'references': ['1905.07830']}\"\n+      ]\n+     },\n+     \"execution_count\": 30,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data[0]\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"Format the data into the format we need, this will contain `id`, `title`, `content` (which we will embed), and `arxiv_id`.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 33,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Map: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10000/10000 [00:00<00:00, 13667.24 examples/s]\\n\"\n+     ]\n+    },\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"Dataset({\\n\",\n+       \"    features: ['id', 'title', 'content', 'arxiv_id'],\\n\",\n+       \"    num_rows: 10000\\n\",\n+       \"})\"\n+      ]\n+     },\n+     \"execution_count\": 33,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"data = data.map(lambda x: {\\n\",\n+    \"    \\\"id\\\": x[\\\"id\\\"],\\n\",\n+    \"    \\\"title\\\": x[\\\"title\\\"],\\n\",\n+    \"    \\\"content\\\": x[\\\"content\\\"],\\n\",\n+    \"    \\\"arxiv_id\\\": x[\\\"arxiv_id\\\"],\\n\",\n+    \"})\\n\",\n+    \"\\n\",\n+    \"data = data.remove_columns([\\n\",\n+    \"    \\\"prechunk_id\\\", \\\"postchunk_id\\\", \\\"references\\\"\\n\",\n+    \"])\\n\",\n+    \"\\n\",\n+    \"data\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We need to define an embedding model to create our embedding vectors for retrieval, for that we will be using Mistral AI's `mistral-embed`. There is some cost associated with this model, so be aware of that (costs for running this notebook are <$1).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 19,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"from mistralai.client import MistralClient\\n\",\n+    \"import getpass  # console.mistral.ai/api-keys/\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.getenv(\\\"MISTRAL_API_KEY\\\") or getpass.getpass(\\\"Enter your Mistral API key: \\\")\\n\",\n+    \"\\n\",\n+    \"mistral = MistralClient(api_key=mistral_api_key)\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 8,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"embed_model = \\\"mistral-embed\\\"\\n\",\n+    \"\\n\",\n+    \"embeds = mistral.embeddings(\\n\",\n+    \"    model=embed_model, input=[\\\"this is a test\\\"]\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"We can view the dimensionality of our returned embeddings, which we'll need soon when initializing our vector index:\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 9,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"data\": {\n+      \"text/plain\": [\n+       \"1024\"\n+      ]\n+     },\n+     \"execution_count\": 9,\n+     \"metadata\": {},\n+     \"output_type\": \"execute_result\"\n+    }\n+   ],\n+   \"source\": [\n+    \"dims = len(embeds.data[0].embedding)\\n\",\n+    \"dims\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Index Embeddings into Azure AI Search\\n\",\n+    \"\\n\",\n+    \"Now we create our vector DB to store our vectors. For this, we need to set up an [Azure AI Search service](https://portal.azure.com/#create/Microsoft.Search).\\n\",\n+    \"\\n\",\n+    \"There are two ways to authenticate to Azure AI Search:\\n\",\n+    \"\\n\",\n+    \"1. **Service Key**: The service key can be found in the \\\"Settings -> Keys\\\" section in the left navbar of the Azure portal dashboard. Make sure to select the ADMIN key.\\n\",\n+    \"2. **Managed Identity**: This is a more secure and recommended way to authenticate. You can follow the instructions in the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-howto-managed-identities-data-sources?tabs=portal-sys%2Cportal-user) to set up Managed Identity.\\n\",\n+    \"\\n\",\n+    \"For more detailed instructions on creating an Azure AI Search service, please refer to the [official Microsoft documentation](https://learn.microsoft.com/en-us/azure/search/search-create-service-portal).\\n\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Authenticate into Azure AI Search\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from getpass import getpass\\n\",\n+    \"from azure.identity import DefaultAzureCredential\\n\",\n+    \"from azure.core.credentials import AzureKeyCredential\\n\",\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"SEARCH_SERVICE_ENDPOINT = os.getenv(\\\"SEARCH_SERVICE_ENDPOINT\\\") or getpass(\\\"Enter your Azure AI Search Service Endpoint: \\\")\\n\",\n+    \"SEARCH_SERVICE_API_KEY = os.getenv(\\\"SEARCH_SERVICE_API_KEY\\\") or getpass(\\\"Enter your Azure AI Search Service API Key: \\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 72,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Using AAD for authentication.\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"USE_AAD_FOR_SEARCH = True\\n\",\n+    \"\\n\",\n+    \"def authenticate_azure_search(api_key=None, use_aad_for_search=False):\\n\",\n+    \"    if use_aad_for_search:\\n\",\n+    \"        print(\\\"Using AAD for authentication.\\\")\\n\",\n+    \"        credential = DefaultAzureCredential()\\n\",\n+    \"    else:\\n\",\n+    \"        print(\\\"Using API keys for authentication.\\\")\\n\",\n+    \"        if api_key is None:\\n\",\n+    \"            raise ValueError(\\\"API key must be provided if not using AAD for authentication.\\\")\\n\",\n+    \"        credential = AzureKeyCredential(api_key)\\n\",\n+    \"    return credential\\n\",\n+    \"\\n\",\n+    \"azure_search_credential = authenticate_azure_search(\\n\",\n+    \"    api_key=SEARCH_SERVICE_API_KEY, use_aad_for_search=USE_AAD_FOR_SEARCH\\n\",\n+    \")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Create a vector index\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 70,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \" ai-arxiv2-semantic-chunks created\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"from azure.search.documents.indexes import SearchIndexClient\\n\",\n+    \"from azure.search.documents.indexes.models import (\\n\",\n+    \"    SimpleField,\\n\",\n+    \"    SearchFieldDataType,\\n\",\n+    \"    SearchableField,\\n\",\n+    \"    SearchField,\\n\",\n+    \"    VectorSearch,\\n\",\n+    \"    HnswAlgorithmConfiguration,\\n\",\n+    \"    VectorSearchProfile,\\n\",\n+    \"    SemanticConfiguration,\\n\",\n+    \"    SemanticPrioritizedFields,\\n\",\n+    \"    SemanticField,\\n\",\n+    \"    SemanticSearch,\\n\",\n+    \"    SearchIndex,\\n\",\n+    \")\\n\",\n+    \"\\n\",\n+    \"DIMENSIONS = 1024\\n\",\n+    \"HNSW_PARAMETERS = {\\\"m\\\": 4, \\\"metric\\\": \\\"cosine\\\", \\\"ef_construction\\\": 400, \\\"ef_search\\\": 500}\\n\",\n+    \"INDEX_NAME = \\\"ai-arxiv2-semantic-chunks\\\"  # replace with your actual index name\\n\",\n+    \"\\n\",\n+    \"\\n\",\n+    \"def create_index(endpoint, credential):\\n\",\n+    \"    # Create a search index\\n\",\n+    \"    index_client = SearchIndexClient(endpoint=endpoint, credential=credential)\\n\",\n+    \"    fields = [\\n\",\n+    \"        SimpleField(\\n\",\n+    \"            name=\\\"id\\\",\\n\",\n+    \"            type=SearchFieldDataType.String,\\n\",\n+    \"            key=True,\\n\",\n+    \"            sortable=True,\\n\",\n+    \"            filterable=True,\\n\",\n+    \"            facetable=True,\\n\",\n+    \"        ),\\n\",\n+    \"        SearchableField(name=\\\"title\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(name=\\\"content\\\", type=SearchFieldDataType.String),\\n\",\n+    \"        SearchableField(\\n\",\n+    \"            name=\\\"arxiv_id\\\", type=SearchFieldDataType.String, filterable=True\\n\",\n+    \"        ),\\n\",\n+    \"        SearchField(\\n\",\n+    \"            name=\\\"embedding\\\",\\n\",\n+    \"            type=SearchFieldDataType.Collection(SearchFieldDataType.Single),\\n\",\n+    \"            searchable=True,\\n\",\n+    \"            vector_search_dimensions=DIMENSIONS,\\n\",\n+    \"            vector_search_profile_name=\\\"myHnswProfile\\\",\\n\",\n+    \"            hidden=False,  # Set to true if you want to retrieve the embeddings in the search results\\n\",\n+    \"        ),\\n\",\n+    \"    ]\\n\",\n+    \"\\n\",\n+    \"    # Configure the vector search configuration\\n\",\n+    \"    vector_search = VectorSearch(\\n\",\n+    \"        algorithms=[\\n\",\n+    \"            HnswAlgorithmConfiguration(name=\\\"myHnsw\\\", parameters=HNSW_PARAMETERS)\\n\",\n+    \"        ],\\n\",\n+    \"        profiles=[\\n\",\n+    \"            VectorSearchProfile(\\n\",\n+    \"                name=\\\"myHnswProfile\\\",\\n\",\n+    \"                algorithm_configuration_name=\\\"myHnsw\\\",\\n\",\n+    \"            )\\n\",\n+    \"        ],\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    semantic_config = SemanticConfiguration(\\n\",\n+    \"        name=\\\"my-semantic-config\\\",\\n\",\n+    \"        prioritized_fields=SemanticPrioritizedFields(\\n\",\n+    \"            title_field=SemanticField(field_name=\\\"title\\\"),\\n\",\n+    \"            keywords_fields=[SemanticField(field_name=\\\"arxiv_id\\\")],\\n\",\n+    \"            content_fields=[SemanticField(field_name=\\\"content\\\")],\\n\",\n+    \"        ),\\n\",\n+    \"    )\\n\",\n+    \"\\n\",\n+    \"    # Create the semantic settings with the configuration\\n\",\n+    \"    semantic_search = SemanticSearch(configurations=[semantic_config])\\n\",\n+    \"\\n\",\n+    \"    # Create the search index with the semantic settings\\n\",\n+    \"    index = SearchIndex(\\n\",\n+    \"        name=INDEX_NAME,\\n\",\n+    \"        fields=fields,\\n\",\n+    \"        vector_search=vector_search,\\n\",\n+    \"        semantic_search=semantic_search,\\n\",\n+    \"    )\\n\",\n+    \"    result = index_client.create_or_update_index(index)\\n\",\n+    \"    print(f\\\" {result.name} created\\\")\\n\",\n+    \"    \\n\",\n+    \"create_index(SEARCH_SERVICE_ENDPOINT, azure_search_credential)\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Estimate Cost for Embedding Generation\\n\",\n+    \"\\n\",\n+    \"As per the information from [Lunary.ai's Mistral Tokenizer](https://lunary.ai/mistral-tokenizer), one token is approximately equivalent to five characters of text. \\n\",\n+    \"\\n\",\n+    \"According to [Mistral's Pricing](https://mistral.ai/technology/#pricing), the cost for using `mistral-embed` is $0.1 per 1M tokens for both inputs and outputs.\\n\",\n+    \"\\n\",\n+    \"In the following code block, we will calculate the estimated cost for generating embeddings based on the size of our dataset and these pricing details.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 54,\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Estimated cost for generating embeddings: $0.19047898000000002\\n\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"def estimate_cost(data, cost_per_million_tokens=0.1):\\n\",\n+    \"    total_characters = sum(len(entry['content']) for entry in data)\\n\",\n+    \"    total_tokens = total_characters / 5  # 1 token is approximately 5 characters\\n\",\n+    \"    total_tokens_in_millions = total_tokens / 1_000_000\\n\",\n+    \"    total_cost = total_tokens_in_millions * cost_per_million_tokens\\n\",\n+    \"    return total_cost\\n\",\n+    \"\\n\",\n+    \"estimated_cost = estimate_cost(data)\\n\",\n+    \"print(f\\\"Estimated cost for generating embeddings: ${estimated_cost}\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Transform Dataset for Azure AI Search Upload\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# Function to transform your dataset into the format required by Azure AI Search\\n\",\n+    \"def transform_to_search_document(record):\\n\",",
        "path": "azure_ai_search_rag.ipynb",
        "commit_id": "ff1e4ab17186d3155be1e91b38389badf89448cc",
        "original_commit_id": "105b8f6b7a6bced076b539c76c10e8b58695271a",
        "user": {
          "login": "pablocastro",
          "id": 3433341,
          "node_id": "MDQ6VXNlcjM0MzMzNDE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3433341?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pablocastro",
          "html_url": "https://github.com/pablocastro",
          "followers_url": "https://api.github.com/users/pablocastro/followers",
          "following_url": "https://api.github.com/users/pablocastro/following{/other_user}",
          "gists_url": "https://api.github.com/users/pablocastro/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pablocastro/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pablocastro/subscriptions",
          "organizations_url": "https://api.github.com/users/pablocastro/orgs",
          "repos_url": "https://api.github.com/users/pablocastro/repos",
          "events_url": "https://api.github.com/users/pablocastro/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pablocastro/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "That's fine, before you were converting the dataset object twice (there was some map operation). If this is the only place and a Dataset is not a list like object then you can leave this as is.",
        "created_at": "2024-06-04T16:07:42Z",
        "updated_at": "2024-06-04T16:09:39Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/38#discussion_r1626277729",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/38",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1626277729"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/38#discussion_r1626277729"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/38"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1626277729/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 456,
        "side": "RIGHT",
        "in_reply_to_id": 1622992428,
        "original_position": 456,
        "position": null,
        "subject_type": "line"
      }
    ]
  },
  "37": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158312613",
        "html_url": "https://github.com/mistralai/cookbook/pull/37#issuecomment-2158312613",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/37",
        "id": 2158312613,
        "node_id": "IC_kwDOLBF5j86ApTyl",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-10T13:07:39Z",
        "updated_at": "2024-06-10T13:07:39Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @sachinsshetty , thanks for the notebook! Could you add this to the Ollama folder https://github.com/mistralai/cookbook/tree/main/third_party/Ollama/? Thank you! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158312613/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160059275",
        "html_url": "https://github.com/mistralai/cookbook/pull/37#issuecomment-2160059275",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/37",
        "id": 2160059275,
        "node_id": "IC_kwDOLBF5j86Av-OL",
        "user": {
          "login": "sachinsshetty",
          "id": 26170834,
          "node_id": "MDQ6VXNlcjI2MTcwODM0",
          "avatar_url": "https://avatars.githubusercontent.com/u/26170834?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sachinsshetty",
          "html_url": "https://github.com/sachinsshetty",
          "followers_url": "https://api.github.com/users/sachinsshetty/followers",
          "following_url": "https://api.github.com/users/sachinsshetty/following{/other_user}",
          "gists_url": "https://api.github.com/users/sachinsshetty/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sachinsshetty/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sachinsshetty/subscriptions",
          "organizations_url": "https://api.github.com/users/sachinsshetty/orgs",
          "repos_url": "https://api.github.com/users/sachinsshetty/repos",
          "events_url": "https://api.github.com/users/sachinsshetty/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sachinsshetty/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-11T08:04:07Z",
        "updated_at": "2024-06-11T08:04:07Z",
        "author_association": "CONTRIBUTOR",
        "body": "@sophiamyang changes are complete.\nAlso squash and merge would make the commit history clean. \nI've updated the Readme to use markdown file paths instead of url. ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160059275/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160065612",
        "html_url": "https://github.com/mistralai/cookbook/pull/37#issuecomment-2160065612",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/37",
        "id": 2160065612,
        "node_id": "IC_kwDOLBF5j86Av_xM",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-11T08:07:15Z",
        "updated_at": "2024-06-11T08:07:15Z",
        "author_association": "COLLABORATOR",
        "body": "Thank you! Merged!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160065612/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160081724",
        "html_url": "https://github.com/mistralai/cookbook/pull/37#issuecomment-2160081724",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/37",
        "id": 2160081724,
        "node_id": "IC_kwDOLBF5j86AwDs8",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-11T08:14:56Z",
        "updated_at": "2024-06-11T08:14:56Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @sachinsshetty, actually this notebook is not runnable on Colab. Would it be possible to make it runnable on colab? ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160081724/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160374956",
        "html_url": "https://github.com/mistralai/cookbook/pull/37#issuecomment-2160374956",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/37",
        "id": 2160374956,
        "node_id": "IC_kwDOLBF5j86AxLSs",
        "user": {
          "login": "sachinsshetty",
          "id": 26170834,
          "node_id": "MDQ6VXNlcjI2MTcwODM0",
          "avatar_url": "https://avatars.githubusercontent.com/u/26170834?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sachinsshetty",
          "html_url": "https://github.com/sachinsshetty",
          "followers_url": "https://api.github.com/users/sachinsshetty/followers",
          "following_url": "https://api.github.com/users/sachinsshetty/following{/other_user}",
          "gists_url": "https://api.github.com/users/sachinsshetty/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sachinsshetty/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sachinsshetty/subscriptions",
          "organizations_url": "https://api.github.com/users/sachinsshetty/orgs",
          "repos_url": "https://api.github.com/users/sachinsshetty/repos",
          "events_url": "https://api.github.com/users/sachinsshetty/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sachinsshetty/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-11T10:19:27Z",
        "updated_at": "2024-06-11T10:19:27Z",
        "author_association": "CONTRIBUTOR",
        "body": "Notebook requires access to Ollama server which is running locally or hosted in a server.\n\nI will try to make it work with Google Colab.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160374956/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "35": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158344660",
        "html_url": "https://github.com/mistralai/cookbook/pull/35#issuecomment-2158344660",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/35",
        "id": 2158344660,
        "node_id": "IC_kwDOLBF5j86ApbnU",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-10T13:11:45Z",
        "updated_at": "2024-06-10T13:12:00Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @sdiazlor, thanks for the PR! Could you add your notebook to the third-party folder https://github.com/mistralai/cookbook/tree/main/third_party? \r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158344660/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158359789",
        "html_url": "https://github.com/mistralai/cookbook/pull/35#issuecomment-2158359789",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/35",
        "id": 2158359789,
        "node_id": "IC_kwDOLBF5j86ApfTt",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-10T13:17:33Z",
        "updated_at": "2024-06-10T13:17:33Z",
        "author_association": "COLLABORATOR",
        "body": "Hi there ! Honnest question, what exactly is the advantage here of using 2 smaller models and judge the answers with Mistral Large? Is it really cheaper or/and better than just generating with mistral large directly a dataset without a Judge? I do understand that for DPO you are required to have two possible answers and get the best one, but will this dataset be better than one generated directly by Large?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158359789/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160908921",
        "html_url": "https://github.com/mistralai/cookbook/pull/35#issuecomment-2160908921",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/35",
        "id": 2160908921,
        "node_id": "IC_kwDOLBF5j86AzNp5",
        "user": {
          "login": "sdiazlor",
          "id": 127759186,
          "node_id": "U_kgDOB51zUg",
          "avatar_url": "https://avatars.githubusercontent.com/u/127759186?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sdiazlor",
          "html_url": "https://github.com/sdiazlor",
          "followers_url": "https://api.github.com/users/sdiazlor/followers",
          "following_url": "https://api.github.com/users/sdiazlor/following{/other_user}",
          "gists_url": "https://api.github.com/users/sdiazlor/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sdiazlor/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sdiazlor/subscriptions",
          "organizations_url": "https://api.github.com/users/sdiazlor/orgs",
          "repos_url": "https://api.github.com/users/sdiazlor/repos",
          "events_url": "https://api.github.com/users/sdiazlor/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sdiazlor/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-11T14:27:13Z",
        "updated_at": "2024-06-11T14:28:22Z",
        "author_association": "CONTRIBUTOR",
        "body": "@pandora-s-git Thanks for your question. The main issue is that DPO highly helps the model to generate answers that are aligned with people's preferences. A basic QA dataset does not provide insights into the model of what's better or worse, and diversity is reduced. That said, using two small models usually is cheaper, sometimes free if they are open source, and their answers usually have a good quality, the larger model here will help not only to create the DPO dataset but also for the annotators (which is highly recommended to obtain a better high-quality dataset) to make their decisions. However, other alignment approaches have also appeared and they require less data as KTO or DOVE. If you want, this [blog](https://argilla.io/blog/mantisnlp-rlhf-part-9) may be interesting for you.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160908921/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 1,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160935466",
        "html_url": "https://github.com/mistralai/cookbook/pull/35#issuecomment-2160935466",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/35",
        "id": 2160935466,
        "node_id": "IC_kwDOLBF5j86AzUIq",
        "user": {
          "login": "sdiazlor",
          "id": 127759186,
          "node_id": "U_kgDOB51zUg",
          "avatar_url": "https://avatars.githubusercontent.com/u/127759186?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sdiazlor",
          "html_url": "https://github.com/sdiazlor",
          "followers_url": "https://api.github.com/users/sdiazlor/followers",
          "following_url": "https://api.github.com/users/sdiazlor/following{/other_user}",
          "gists_url": "https://api.github.com/users/sdiazlor/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sdiazlor/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sdiazlor/subscriptions",
          "organizations_url": "https://api.github.com/users/sdiazlor/orgs",
          "repos_url": "https://api.github.com/users/sdiazlor/repos",
          "events_url": "https://api.github.com/users/sdiazlor/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sdiazlor/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-11T14:38:33Z",
        "updated_at": "2024-06-11T14:38:33Z",
        "author_association": "CONTRIBUTOR",
        "body": "@sophiamyang Notebook moved to the third_party folder.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160935466/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160951444",
        "html_url": "https://github.com/mistralai/cookbook/pull/35#issuecomment-2160951444",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/35",
        "id": 2160951444,
        "node_id": "IC_kwDOLBF5j86AzYCU",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-11T14:45:25Z",
        "updated_at": "2024-06-11T14:45:25Z",
        "author_association": "COLLABORATOR",
        "body": "> @pandora-s-git Thanks for your question. The main issue is that DPO highly helps the model to generate answers that are aligned with people's preferences. A basic QA dataset does not provide insights into the model of what's better or worse, and diversity is reduced. That said, using two small models usually is cheaper, sometimes free if they are open source, and their answers usually have a good quality, the larger model here will help not only to create the DPO dataset but also for the annotators (which is highly recommended to obtain a better high-quality dataset) to make their decisions. However, other alignment approaches have also appeared and they require less data as KTO or DOVE. If you want, this [blog](https://argilla.io/blog/mantisnlp-rlhf-part-9) may be interesting for you.\r\n\r\nYeah after some thinking on my own I figured it actually made sense seeing how DPO usually works, thanks for the blog tho will check it out!!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160951444/reactions",
          "total_count": 1,
          "+1": 0,
          "-1": 0,
          "laugh": 1,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1609430126",
        "pull_request_review_id": 2070346183,
        "id": 1609430126,
        "node_id": "PRRC_kwDOLBF5j85f7fRu",
        "diff_hunk": "",
        "path": "distilabel_synthetic_dpo_dataset.ipynb",
        "commit_id": "e827b5cded40e35784868ec5ebd83d3487c46c80",
        "original_commit_id": "e827b5cded40e35784868ec5ebd83d3487c46c80",
        "user": {
          "login": "gabrielmbmb",
          "id": 29572918,
          "node_id": "MDQ6VXNlcjI5NTcyOTE4",
          "avatar_url": "https://avatars.githubusercontent.com/u/29572918?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/gabrielmbmb",
          "html_url": "https://github.com/gabrielmbmb",
          "followers_url": "https://api.github.com/users/gabrielmbmb/followers",
          "following_url": "https://api.github.com/users/gabrielmbmb/following{/other_user}",
          "gists_url": "https://api.github.com/users/gabrielmbmb/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/gabrielmbmb/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/gabrielmbmb/subscriptions",
          "organizations_url": "https://api.github.com/users/gabrielmbmb/orgs",
          "repos_url": "https://api.github.com/users/gabrielmbmb/repos",
          "events_url": "https://api.github.com/users/gabrielmbmb/events{/privacy}",
          "received_events_url": "https://api.github.com/users/gabrielmbmb/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "There is a small typo in the text before using `pipeline.dry_run` method. It's written `run_dry`.",
        "created_at": "2024-05-22T07:22:08Z",
        "updated_at": "2024-05-22T07:25:41Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/35#discussion_r1609430126",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/35",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1609430126"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/35#discussion_r1609430126"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/35"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1609430126/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": 1,
        "original_line": 1,
        "side": "RIGHT",
        "original_position": 1,
        "position": 1,
        "subject_type": "file"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1609434107",
        "pull_request_review_id": 2070346183,
        "id": 1609434107,
        "node_id": "PRRC_kwDOLBF5j85f7gP7",
        "diff_hunk": "",
        "path": "distilabel_synthetic_dpo_dataset.ipynb",
        "commit_id": "e827b5cded40e35784868ec5ebd83d3487c46c80",
        "original_commit_id": "e827b5cded40e35784868ec5ebd83d3487c46c80",
        "user": {
          "login": "gabrielmbmb",
          "id": 29572918,
          "node_id": "MDQ6VXNlcjI5NTcyOTE4",
          "avatar_url": "https://avatars.githubusercontent.com/u/29572918?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/gabrielmbmb",
          "html_url": "https://github.com/gabrielmbmb",
          "followers_url": "https://api.github.com/users/gabrielmbmb/followers",
          "following_url": "https://api.github.com/users/gabrielmbmb/following{/other_user}",
          "gists_url": "https://api.github.com/users/gabrielmbmb/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/gabrielmbmb/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/gabrielmbmb/subscriptions",
          "organizations_url": "https://api.github.com/users/gabrielmbmb/orgs",
          "repos_url": "https://api.github.com/users/gabrielmbmb/repos",
          "events_url": "https://api.github.com/users/gabrielmbmb/events{/privacy}",
          "received_events_url": "https://api.github.com/users/gabrielmbmb/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Regarding the `PreferenceToArgilla` step, maybe we can mention an Argilla server is required and that one deployed in Hugging Face spaces can be used. Having a cell in which the user is able to configure their ARGILLA_API_URL and ARGILLA_API_KEY clearly could be helpful too.",
        "created_at": "2024-05-22T07:25:12Z",
        "updated_at": "2024-05-22T07:25:41Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/35#discussion_r1609434107",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/35",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1609434107"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/35#discussion_r1609434107"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/35"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1609434107/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": 1,
        "original_line": 1,
        "side": "RIGHT",
        "in_reply_to_id": 1609430126,
        "original_position": 1,
        "position": 1,
        "subject_type": "file"
      }
    ]
  },
  "33": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158349502",
        "html_url": "https://github.com/mistralai/cookbook/pull/33#issuecomment-2158349502",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/33",
        "id": 2158349502,
        "node_id": "IC_kwDOLBF5j86Apcy-",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-10T13:13:37Z",
        "updated_at": "2024-06-10T13:13:37Z",
        "author_association": "COLLABORATOR",
        "body": "Thanks @satvik314 for the PR! Could you move it to the third-party folder? And could you use `mistral-small-latest` or `mistral-large-latest` instead of `mistral-medium`? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158349502/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2233215885",
        "html_url": "https://github.com/mistralai/cookbook/pull/33#issuecomment-2233215885",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/33",
        "id": 2233215885,
        "node_id": "IC_kwDOLBF5j86FHCuN",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-17T12:34:28Z",
        "updated_at": "2024-07-17T12:34:28Z",
        "author_association": "COLLABORATOR",
        "body": "Also, could you rename the notebook to Portkey? Ideally this notebook should focus more on Portkey integrations with Mistral. Thank you! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2233215885/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521098911",
        "html_url": "https://github.com/mistralai/cookbook/pull/33#issuecomment-2521098911",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/33",
        "id": 2521098911,
        "node_id": "IC_kwDOLBF5j86WROqf",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-05T18:15:49Z",
        "updated_at": "2024-12-05T18:15:49Z",
        "author_association": "COLLABORATOR",
        "body": "@satvik314, could you help make the changes? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521098911/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2627033736",
        "html_url": "https://github.com/mistralai/cookbook/pull/33#issuecomment-2627033736",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/33",
        "id": 2627033736,
        "node_id": "IC_kwDOLBF5j86clVqI",
        "user": {
          "login": "siddharthsambharia-portkey",
          "id": 173988098,
          "node_id": "U_kgDOCl7ZAg",
          "avatar_url": "https://avatars.githubusercontent.com/u/173988098?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/siddharthsambharia-portkey",
          "html_url": "https://github.com/siddharthsambharia-portkey",
          "followers_url": "https://api.github.com/users/siddharthsambharia-portkey/followers",
          "following_url": "https://api.github.com/users/siddharthsambharia-portkey/following{/other_user}",
          "gists_url": "https://api.github.com/users/siddharthsambharia-portkey/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/siddharthsambharia-portkey/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/siddharthsambharia-portkey/subscriptions",
          "organizations_url": "https://api.github.com/users/siddharthsambharia-portkey/orgs",
          "repos_url": "https://api.github.com/users/siddharthsambharia-portkey/repos",
          "events_url": "https://api.github.com/users/siddharthsambharia-portkey/events{/privacy}",
          "received_events_url": "https://api.github.com/users/siddharthsambharia-portkey/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-01-31T11:55:58Z",
        "updated_at": "2025-01-31T11:55:58Z",
        "author_association": "NONE",
        "body": "Hey @sophiamyang, looks like this PR from Portkey got stale. I've added a new PR on the Mistral Cookbook repo. Here's the link: [Portkey x Mistral Cookbook](https://github.com/mistralai/cookbook/pull/130\r\n)\r\nFurthermore, I've also created a PR on Mistral docs for adding Portkey as an Observability Platform. [Here's the link](https://github.com/mistralai/platform-docs-public/pull/174) to it\r\n\r\nCan you take a look at them? LGTM?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2627033736/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2674834952",
        "html_url": "https://github.com/mistralai/cookbook/pull/33#issuecomment-2674834952",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/33",
        "id": 2674834952,
        "node_id": "IC_kwDOLBF5j86fbr4I",
        "user": {
          "login": "fracapuano",
          "id": 74058581,
          "node_id": "MDQ6VXNlcjc0MDU4NTgx",
          "avatar_url": "https://avatars.githubusercontent.com/u/74058581?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/fracapuano",
          "html_url": "https://github.com/fracapuano",
          "followers_url": "https://api.github.com/users/fracapuano/followers",
          "following_url": "https://api.github.com/users/fracapuano/following{/other_user}",
          "gists_url": "https://api.github.com/users/fracapuano/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/fracapuano/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/fracapuano/subscriptions",
          "organizations_url": "https://api.github.com/users/fracapuano/orgs",
          "repos_url": "https://api.github.com/users/fracapuano/repos",
          "events_url": "https://api.github.com/users/fracapuano/events{/privacy}",
          "received_events_url": "https://api.github.com/users/fracapuano/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-02-21T15:19:49Z",
        "updated_at": "2025-02-21T15:19:49Z",
        "author_association": "COLLABORATOR",
        "body": "Thank you so much for contributing @siddharthsambharia-portkey \u2b50 \r\n\r\nI am bit confused---would you rather have me review https://github.com/mistralai/cookbook/pull/130 and close this PR? Feel free to close it yourself if so \ud83d\ude0a \r\n\r\nI am reviewing your other PR on `platform-docs-public` though https://github.com/mistralai/platform-docs-public/pull/174",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2674834952/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "31": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158356128",
        "html_url": "https://github.com/mistralai/cookbook/pull/31#issuecomment-2158356128",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/31",
        "id": 2158356128,
        "node_id": "IC_kwDOLBF5j86Apeag",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-10T13:15:57Z",
        "updated_at": "2024-06-10T13:15:57Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @avriiil thanks for the PR! Could you move the notebook to the third-party folder and could you make sure the notebook runs on colab? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158356128/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160227698",
        "html_url": "https://github.com/mistralai/cookbook/pull/31#issuecomment-2160227698",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/31",
        "id": 2160227698,
        "node_id": "IC_kwDOLBF5j86AwnVy",
        "user": {
          "login": "avriiil",
          "id": 68642378,
          "node_id": "MDQ6VXNlcjY4NjQyMzc4",
          "avatar_url": "https://avatars.githubusercontent.com/u/68642378?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/avriiil",
          "html_url": "https://github.com/avriiil",
          "followers_url": "https://api.github.com/users/avriiil/followers",
          "following_url": "https://api.github.com/users/avriiil/following{/other_user}",
          "gists_url": "https://api.github.com/users/avriiil/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/avriiil/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/avriiil/subscriptions",
          "organizations_url": "https://api.github.com/users/avriiil/orgs",
          "repos_url": "https://api.github.com/users/avriiil/repos",
          "events_url": "https://api.github.com/users/avriiil/events{/privacy}",
          "received_events_url": "https://api.github.com/users/avriiil/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-11T09:25:08Z",
        "updated_at": "2024-06-11T09:25:08Z",
        "author_association": "NONE",
        "body": "@sophiamyang -- changes have been made! I will update the Colab link when the PR is merged so it will be generated from the code on `main`.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2160227698/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521108536",
        "html_url": "https://github.com/mistralai/cookbook/pull/31#issuecomment-2521108536",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/31",
        "id": 2521108536,
        "node_id": "IC_kwDOLBF5j86WRRA4",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-05T18:20:25Z",
        "updated_at": "2024-12-05T18:20:25Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @avriiil , we are ready to merge your PR! However, I got none for the results. Could you help check? Additionally, could you move the notebook to the third_party/pathway folder? Thanks! \r\n<img width=\"612\" alt=\"image\" src=\"https://github.com/user-attachments/assets/d74f6eac-a05f-47c8-bae1-272a699bf0f9\">\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521108536/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1633542121",
        "pull_request_review_id": 2108283528,
        "id": 1633542121,
        "node_id": "PRRC_kwDOLBF5j85hXd_p",
        "diff_hunk": "@@ -0,0 +1,378 @@\n+{\n+ \"cells\": [\n+  {\n+   \"attachments\": {},\n+   \"cell_type\": \"markdown\",\n+   \"id\": \"268b24c1-24da-4fc9-a65e-229e8132db59\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# Adaptive RAG with Pathway\\n\",\n+    \"\\n\",\n+    \"This notebook shows how you can **dynamically adapt the number of documents in a RAG prompt** using feedback from the LLM. This can give you significant cost reduction of RAG LLM question answering pipelines while maintaining good accuracy. Mistral makes it easy to run Adaptive RAG locally with `ollama` or remotely using the Mistral API.\\n\",\n+    \"\\n\",\n+    \"Reference paper: https://pathway.com/developers/showcases/adaptive-rag\\n\",\n+    \"\\n\",\n+    \"<img src=\\\"images/pw-adaptive-rag.png\\\" width=\\\"700\\\"/>\\n\",\n+    \"\\n\",\n+    \"Let's jump in! \ud83e\ude82\\n\",\n+    \"\\n\",\n+    \"## Setup\\n\",\n+    \"\\n\",\n+    \"### Using APIs \\n\",\n+    \"\\n\",\n+    \"* You will need [a Mistral subscription](https://auth.mistral.ai/ui/login?flow=2b98deac-f13f-4e18-a7cd-23ba377a6370) to access the Mistral API.\\n\",\n+    \"* Create an account and fetch your API Key\\n\",\n+    \"* Pass the API Key into the prompt in this notebook or set it as environment variable `MISTRAL_API_KEY`\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"id\": \"4a6a2ffd-c3ce-4cb7-a7a5-b32d098807eb\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"### Installing Libraries\\n\",\n+    \"You will need to install `pathway` to run this code. We will also install `litellm` and `sentence-transformers` which are optional dependencies of Pathway.\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"id\": \"860c99fb\",\n+   \"metadata\": {\n+    \"scrolled\": true\n+   },\n+   \"outputs\": [],\n+   \"source\": [\n+    \"# # Uncomment and run if you need to install Pathway and Mistral packages\\n\",\n+    \"# !pip install -U --prefer-binary pathway~= 0.9.0 \\n\",",
        "path": "third_party/pathway-adaptive-rag.ipynb",
        "commit_id": "558c3e35be6c12d30f41dc38bbeebff022e5221e",
        "original_commit_id": "16156abff1e9e0572a706742c0ffaf79d20c9272",
        "user": {
          "login": "pandora-s-git",
          "id": 128635000,
          "node_id": "U_kgDOB6rQeA",
          "avatar_url": "https://avatars.githubusercontent.com/u/128635000?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/pandora-s-git",
          "html_url": "https://github.com/pandora-s-git",
          "followers_url": "https://api.github.com/users/pandora-s-git/followers",
          "following_url": "https://api.github.com/users/pandora-s-git/following{/other_user}",
          "gists_url": "https://api.github.com/users/pandora-s-git/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/pandora-s-git/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/pandora-s-git/subscriptions",
          "organizations_url": "https://api.github.com/users/pandora-s-git/orgs",
          "repos_url": "https://api.github.com/users/pandora-s-git/repos",
          "events_url": "https://api.github.com/users/pandora-s-git/events{/privacy}",
          "received_events_url": "https://api.github.com/users/pandora-s-git/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "I believe \"pathway~=0.9.0\" has to be in between \", also run_local needs to be declared even if It's False.",
        "created_at": "2024-06-10T16:41:16Z",
        "updated_at": "2024-06-10T16:41:16Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/31#discussion_r1633542121",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/31",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1633542121"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/31#discussion_r1633542121"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/31"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1633542121/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 47,
        "side": "RIGHT",
        "original_position": 47,
        "position": null,
        "subject_type": "line"
      }
    ]
  },
  "28": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158364575",
        "html_url": "https://github.com/mistralai/cookbook/pull/28#issuecomment-2158364575",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/28",
        "id": 2158364575,
        "node_id": "IC_kwDOLBF5j86Apgef",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-10T13:19:44Z",
        "updated_at": "2024-06-10T13:19:44Z",
        "author_association": "COLLABORATOR",
        "body": "it's very similar to our embeddings notebook. Sorry I'm going to close this PR. Please consider contributing another notebook! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158364575/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "21": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2033194579",
        "html_url": "https://github.com/mistralai/cookbook/pull/21#issuecomment-2033194579",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/21",
        "id": 2033194579,
        "node_id": "IC_kwDOLBF5j855MBZT",
        "user": {
          "login": "sachinsshetty",
          "id": 26170834,
          "node_id": "MDQ6VXNlcjI2MTcwODM0",
          "avatar_url": "https://avatars.githubusercontent.com/u/26170834?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sachinsshetty",
          "html_url": "https://github.com/sachinsshetty",
          "followers_url": "https://api.github.com/users/sachinsshetty/followers",
          "following_url": "https://api.github.com/users/sachinsshetty/following{/other_user}",
          "gists_url": "https://api.github.com/users/sachinsshetty/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sachinsshetty/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sachinsshetty/subscriptions",
          "organizations_url": "https://api.github.com/users/sachinsshetty/orgs",
          "repos_url": "https://api.github.com/users/sachinsshetty/repos",
          "events_url": "https://api.github.com/users/sachinsshetty/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sachinsshetty/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-04-02T22:15:50Z",
        "updated_at": "2024-04-02T22:15:50Z",
        "author_association": "CONTRIBUTOR",
        "body": "When using mistral endpoint and open-mixtral-8x7b model. \r\nI am getting this error. Will debug the issue and update the PR\r\n\r\nUnprocessableEntityError: Error code: 422 - {'object': 'error', 'message': {'detail': [{'type': 'extra_forbidden', 'loc': ['body', 'functions'], 'msg': 'Extra inputs are not permitted', 'input': [{'name': 'ask_planner', 'description': 'ask planner to: 1. get a plan for finishing a task, 2. verify the execution result of the plan and potentially suggest new plan.', 'parameters': {'type': 'object', 'properties': {'message': {'type': 'string', 'description': 'question to ask planner. Make sure the question include enough context, such as the code and the execution result. The planner does not know the conversation between you and the user, unless you share the conversation with the planner.'}}, 'required': ['message']}}], 'url': 'https://errors.pydantic.dev/2.6/v/extra_forbidden'}]}, 'type': 'invalid_request_error', 'param': None, 'code': None}",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2033194579/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "20": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2028578215",
        "html_url": "https://github.com/mistralai/cookbook/pull/20#issuecomment-2028578215",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/20",
        "id": 2028578215,
        "node_id": "IC_kwDOLBF5j8546aWn",
        "user": {
          "login": "jerryjliu",
          "id": 4858925,
          "node_id": "MDQ6VXNlcjQ4NTg5MjU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4858925?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jerryjliu",
          "html_url": "https://github.com/jerryjliu",
          "followers_url": "https://api.github.com/users/jerryjliu/followers",
          "following_url": "https://api.github.com/users/jerryjliu/following{/other_user}",
          "gists_url": "https://api.github.com/users/jerryjliu/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/jerryjliu/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/jerryjliu/subscriptions",
          "organizations_url": "https://api.github.com/users/jerryjliu/orgs",
          "repos_url": "https://api.github.com/users/jerryjliu/repos",
          "events_url": "https://api.github.com/users/jerryjliu/events{/privacy}",
          "received_events_url": "https://api.github.com/users/jerryjliu/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-03-31T06:52:48Z",
        "updated_at": "2024-03-31T06:52:48Z",
        "author_association": "CONTRIBUTOR",
        "body": "thoughts on the adaptive RAG notebook: \r\n- can we add a function calling agent as a tool too? for general multi-step queries. the sub question query engine can handle queries that can be one-shot parallelized, but using a function calling agent would create a more general reasoning loop\r\n- nit: can we add a colab badge ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2028578215/reactions",
          "total_count": 1,
          "+1": 1,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2028579677",
        "html_url": "https://github.com/mistralai/cookbook/pull/20#issuecomment-2028579677",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/20",
        "id": 2028579677,
        "node_id": "IC_kwDOLBF5j8546atd",
        "user": {
          "login": "ravi03071991",
          "id": 12198101,
          "node_id": "MDQ6VXNlcjEyMTk4MTAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/12198101?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ravi03071991",
          "html_url": "https://github.com/ravi03071991",
          "followers_url": "https://api.github.com/users/ravi03071991/followers",
          "following_url": "https://api.github.com/users/ravi03071991/following{/other_user}",
          "gists_url": "https://api.github.com/users/ravi03071991/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/ravi03071991/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/ravi03071991/subscriptions",
          "organizations_url": "https://api.github.com/users/ravi03071991/orgs",
          "repos_url": "https://api.github.com/users/ravi03071991/repos",
          "events_url": "https://api.github.com/users/ravi03071991/events{/privacy}",
          "received_events_url": "https://api.github.com/users/ravi03071991/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-03-31T07:00:06Z",
        "updated_at": "2024-03-31T07:00:06Z",
        "author_association": "CONTRIBUTOR",
        "body": "> thoughts on the adaptive RAG notebook:\r\n> \r\n> * can we add a function calling agent as a tool too? for general multi-step queries. the sub question query engine can handle queries that can be one-shot parallelized, but using a function calling agent would create a more general reasoning loop\r\n> * nit: can we add a colab badge\r\n\r\nSure.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2028579677/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "16": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158363242",
        "html_url": "https://github.com/mistralai/cookbook/pull/16#issuecomment-2158363242",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/16",
        "id": 2158363242,
        "node_id": "IC_kwDOLBF5j86ApgJq",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-10T13:19:08Z",
        "updated_at": "2024-06-10T13:19:08Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @shrjain1312 thanks for the PR! Could you move the notebook to the third-party folder and could you make sure the notebook runs on colab? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158363242/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521109990",
        "html_url": "https://github.com/mistralai/cookbook/pull/16#issuecomment-2521109990",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/16",
        "id": 2521109990,
        "node_id": "IC_kwDOLBF5j86WRRXm",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-05T18:21:10Z",
        "updated_at": "2024-12-05T18:21:10Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @shrjain1312 , could you help make the changes I mentioned I above? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521109990/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "15": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158357850",
        "html_url": "https://github.com/mistralai/cookbook/pull/15#issuecomment-2158357850",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/15",
        "id": 2158357850,
        "node_id": "IC_kwDOLBF5j86Ape1a",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-06-10T13:16:42Z",
        "updated_at": "2024-06-10T13:16:42Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @cozypet thanks for the PR! Could you move the notebook to the third-party folder and could you make sure the notebook runs on colab? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2158357850/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2205423251",
        "html_url": "https://github.com/mistralai/cookbook/pull/15#issuecomment-2205423251",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/15",
        "id": 2205423251,
        "node_id": "IC_kwDOLBF5j86DdBaT",
        "user": {
          "login": "cozypet",
          "id": 7107896,
          "node_id": "MDQ6VXNlcjcxMDc4OTY=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7107896?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cozypet",
          "html_url": "https://github.com/cozypet",
          "followers_url": "https://api.github.com/users/cozypet/followers",
          "following_url": "https://api.github.com/users/cozypet/following{/other_user}",
          "gists_url": "https://api.github.com/users/cozypet/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cozypet/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cozypet/subscriptions",
          "organizations_url": "https://api.github.com/users/cozypet/orgs",
          "repos_url": "https://api.github.com/users/cozypet/repos",
          "events_url": "https://api.github.com/users/cozypet/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cozypet/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-03T08:35:49Z",
        "updated_at": "2024-07-03T08:36:04Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hello @sophiamyang , just updated the notebook as requested.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2205423251/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2205425424",
        "html_url": "https://github.com/mistralai/cookbook/pull/15#issuecomment-2205425424",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/15",
        "id": 2205425424,
        "node_id": "IC_kwDOLBF5j86DdB8Q",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-03T08:36:58Z",
        "updated_at": "2024-07-03T08:36:58Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @cozypet thanks so much for the updates! Did you make changes to the function_calling.ipynb file? I don't think the changes are needed? ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2205425424/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2205428953",
        "html_url": "https://github.com/mistralai/cookbook/pull/15#issuecomment-2205428953",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/15",
        "id": 2205428953,
        "node_id": "IC_kwDOLBF5j86DdCzZ",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-03T08:38:28Z",
        "updated_at": "2024-07-03T08:38:28Z",
        "author_association": "COLLABORATOR",
        "body": "Also, could you add `!pip install xxx` to make sure the notebook is runnable on colab? ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2205428953/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2205433440",
        "html_url": "https://github.com/mistralai/cookbook/pull/15#issuecomment-2205433440",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/15",
        "id": 2205433440,
        "node_id": "IC_kwDOLBF5j86DdD5g",
        "user": {
          "login": "cozypet",
          "id": 7107896,
          "node_id": "MDQ6VXNlcjcxMDc4OTY=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7107896?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cozypet",
          "html_url": "https://github.com/cozypet",
          "followers_url": "https://api.github.com/users/cozypet/followers",
          "following_url": "https://api.github.com/users/cozypet/following{/other_user}",
          "gists_url": "https://api.github.com/users/cozypet/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cozypet/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cozypet/subscriptions",
          "organizations_url": "https://api.github.com/users/cozypet/orgs",
          "repos_url": "https://api.github.com/users/cozypet/repos",
          "events_url": "https://api.github.com/users/cozypet/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cozypet/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-03T08:40:27Z",
        "updated_at": "2024-07-03T08:40:27Z",
        "author_association": "CONTRIBUTOR",
        "body": "Sorry Nothing changed in function_calling.ipynb ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2205433440/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2205460846",
        "html_url": "https://github.com/mistralai/cookbook/pull/15#issuecomment-2205460846",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/15",
        "id": 2205460846,
        "node_id": "IC_kwDOLBF5j86DdKlu",
        "user": {
          "login": "cozypet",
          "id": 7107896,
          "node_id": "MDQ6VXNlcjcxMDc4OTY=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7107896?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/cozypet",
          "html_url": "https://github.com/cozypet",
          "followers_url": "https://api.github.com/users/cozypet/followers",
          "following_url": "https://api.github.com/users/cozypet/following{/other_user}",
          "gists_url": "https://api.github.com/users/cozypet/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/cozypet/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/cozypet/subscriptions",
          "organizations_url": "https://api.github.com/users/cozypet/orgs",
          "repos_url": "https://api.github.com/users/cozypet/repos",
          "events_url": "https://api.github.com/users/cozypet/events{/privacy}",
          "received_events_url": "https://api.github.com/users/cozypet/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-03T08:54:07Z",
        "updated_at": "2024-07-03T08:54:07Z",
        "author_association": "CONTRIBUTOR",
        "body": "Hello @sophiamyang just commit a new version",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2205460846/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2205469669",
        "html_url": "https://github.com/mistralai/cookbook/pull/15#issuecomment-2205469669",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/15",
        "id": 2205469669,
        "node_id": "IC_kwDOLBF5j86DdMvl",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-03T08:58:28Z",
        "updated_at": "2024-07-03T08:58:28Z",
        "author_association": "COLLABORATOR",
        "body": "Thanks so much @cozypet! Looks amazing. Just one small thing. Could you also help remove the changes to the .DS_Store file? Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2205469669/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2208182961",
        "html_url": "https://github.com/mistralai/cookbook/pull/15#issuecomment-2208182961",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/15",
        "id": 2208182961,
        "node_id": "IC_kwDOLBF5j86DnjKx",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-07-04T06:06:46Z",
        "updated_at": "2024-07-04T06:06:46Z",
        "author_association": "COLLABORATOR",
        "body": "Hey @cozypet sorry I can't seem to reopen this PR. Could you make a new PR please? thank you! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2208182961/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "13": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/1967333151",
        "html_url": "https://github.com/mistralai/cookbook/pull/13#issuecomment-1967333151",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/13",
        "id": 1967333151,
        "node_id": "IC_kwDOLBF5j851Qx8f",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-02-27T18:16:41Z",
        "updated_at": "2024-02-27T18:16:41Z",
        "author_association": "COLLABORATOR",
        "body": "thanks for the PR! I just saw this after I updated the code. Please feel free to submit another PR if it needs more updates. Thanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/1967333151/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/1969332968",
        "html_url": "https://github.com/mistralai/cookbook/pull/13#issuecomment-1969332968",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/13",
        "id": 1969332968,
        "node_id": "IC_kwDOLBF5j851YaLo",
        "user": {
          "login": "JacobGoldenArt",
          "id": 126922704,
          "node_id": "U_kgDOB5Cv0A",
          "avatar_url": "https://avatars.githubusercontent.com/u/126922704?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/JacobGoldenArt",
          "html_url": "https://github.com/JacobGoldenArt",
          "followers_url": "https://api.github.com/users/JacobGoldenArt/followers",
          "following_url": "https://api.github.com/users/JacobGoldenArt/following{/other_user}",
          "gists_url": "https://api.github.com/users/JacobGoldenArt/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/JacobGoldenArt/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/JacobGoldenArt/subscriptions",
          "organizations_url": "https://api.github.com/users/JacobGoldenArt/orgs",
          "repos_url": "https://api.github.com/users/JacobGoldenArt/repos",
          "events_url": "https://api.github.com/users/JacobGoldenArt/events{/privacy}",
          "received_events_url": "https://api.github.com/users/JacobGoldenArt/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-02-28T16:15:46Z",
        "updated_at": "2024-02-28T16:15:46Z",
        "author_association": "NONE",
        "body": "No worries! Thanks Sophia.\r\n\r\n\r\n\r\nOn Tue, Feb 27, 2024 at 10:16\u202fAM Sophia Yang ***@***.***>\r\nwrote:\r\n\r\n> thanks for the PR! I just saw this after I updated the code. Please feel\r\n> free to submit another PR if it needs more updates. Thanks!\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/mistralai/cookbook/pull/13#issuecomment-1967333151>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/A6IK7UHNSJNH4P35RD5PBETYVYPJNAVCNFSM6AAAAABD4R5SQSVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTSNRXGMZTGMJVGE>\r\n> .\r\n> You are receiving this because you authored the thread.Message ID:\r\n> ***@***.***>\r\n>\r\n",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/1969332968/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "11": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/1959027497",
        "html_url": "https://github.com/mistralai/cookbook/pull/11#issuecomment-1959027497",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/11",
        "id": 1959027497,
        "node_id": "IC_kwDOLBF5j850xGMp",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-02-22T09:23:40Z",
        "updated_at": "2024-02-22T09:23:40Z",
        "author_association": "COLLABORATOR",
        "body": "Hi @ytang07, thanks so much for the PR! Could you help update the following:\r\n- Add title, headers, and more descriptions to the notebook, so that people can read the text and follow along. Right now, it is not clear what this notebook is about.\r\n- Could you download the Wikipedia pages via code instead of saving all the text in the data folder?  \r\n- Could you use the Mistral API endpoints?\r\n- Finally, could you make sure it's runnable on Colab?\r\n\r\nThanks! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/1959027497/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521112342",
        "html_url": "https://github.com/mistralai/cookbook/pull/11#issuecomment-2521112342",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/11",
        "id": 2521112342,
        "node_id": "IC_kwDOLBF5j86WRR8W",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-12-05T18:22:23Z",
        "updated_at": "2024-12-05T18:22:23Z",
        "author_association": "COLLABORATOR",
        "body": "closing the PR since I'm not sure if the author is going to update. ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/2521112342/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "6": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/1941757485",
        "html_url": "https://github.com/mistralai/cookbook/pull/6#issuecomment-1941757485",
        "issue_url": "https://api.github.com/repos/mistralai/cookbook/issues/6",
        "id": 1941757485,
        "node_id": "IC_kwDOLBF5j85zvN4t",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-02-13T15:15:24Z",
        "updated_at": "2024-02-13T15:15:24Z",
        "author_association": "COLLABORATOR",
        "body": "Thank you! ",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/issues/comments/1941757485/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "2": {
    "issue_comments": [],
    "review_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482625217",
        "pull_request_review_id": 1869592545,
        "id": 1482625217,
        "node_id": "PRRC_kwDOLBF5j85YXxDB",
        "diff_hunk": "@@ -0,0 +1,693 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 2,\n+   \"id\": \"19969669-b47f-47f3-b6d4-f7b155434840\",\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"\\u001b[33mWARNING: There was an error checking the latest version of pip.\\u001b[0m\\u001b[33m\\n\",\n+      \"\\u001b[0m\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"! pip install --quiet langchain_community tiktoken langchain-openai langchainhub chromadb langchain langgraph tavily-python langchain-mistralai\"\n+   ]\n+  },\n+  {\n+   \"attachments\": {\n+    \"9db7f9db-55aa-48cb-95d5-bcde3f937589.png\": {\n+     \"image/png\": \"\"\n+    }\n+   },\n+   \"cell_type\": \"markdown\",\n+   \"id\": \"92ddc4f4-f7bf-4e0e-b5a5-5abd8a008b21\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# Corrective RAG\\n\",\n+    \"\\n\",\n+    \"Self-reflection can enhance RAG, enabling correction of poor quality retrieval or generations.\\n\",\n+    \"\\n\",\n+    \"Several recent papers focus on this theme, but implementing the ideas can be tricky.\\n\",\n+    \"\\n\",\n+    \"Here we show how to implement self-reflective RAG using `Mistral` and `LangGraph`.\\n\",\n+    \"\\n\",\n+    \"We'll focus on ideas from one paper, `Corrective RAG (CRAG)` [here](https://arxiv.org/pdf/2401.15884.pdf).\\n\",\n+    \"\\n\",\n+    \"![Screenshot 2024-02-07 at 1.21.51 PM.png](attachment:9db7f9db-55aa-48cb-95d5-bcde3f937589.png)\\n\",",
        "path": "langgraph_crag_mistral.ipynb",
        "commit_id": "71cf0e81ad913d30065ed6c3e3f9fda68d271602",
        "original_commit_id": "ab347e043abc8514c00d4b4850d32e756bb245df",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "This image doesn't show in colab somehow ",
        "created_at": "2024-02-08T09:01:22Z",
        "updated_at": "2024-02-08T09:22:10Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/2#discussion_r1482625217",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/2",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482625217"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/2#discussion_r1482625217"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/2"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482625217/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 42,
        "side": "RIGHT",
        "original_position": 42,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482631014",
        "pull_request_review_id": 1869592545,
        "id": 1482631014,
        "node_id": "PRRC_kwDOLBF5j85YXydm",
        "diff_hunk": "@@ -0,0 +1,693 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 2,\n+   \"id\": \"19969669-b47f-47f3-b6d4-f7b155434840\",\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"\\u001b[33mWARNING: There was an error checking the latest version of pip.\\u001b[0m\\u001b[33m\\n\",\n+      \"\\u001b[0m\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"! pip install --quiet langchain_community tiktoken langchain-openai langchainhub chromadb langchain langgraph tavily-python langchain-mistralai\"\n+   ]\n+  },\n+  {\n+   \"attachments\": {\n+    \"9db7f9db-55aa-48cb-95d5-bcde3f937589.png\": {\n+     \"image/png\": \"\"\n+    }\n+   },\n+   \"cell_type\": \"markdown\",\n+   \"id\": \"92ddc4f4-f7bf-4e0e-b5a5-5abd8a008b21\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# Corrective RAG\\n\",\n+    \"\\n\",\n+    \"Self-reflection can enhance RAG, enabling correction of poor quality retrieval or generations.\\n\",\n+    \"\\n\",\n+    \"Several recent papers focus on this theme, but implementing the ideas can be tricky.\\n\",\n+    \"\\n\",\n+    \"Here we show how to implement self-reflective RAG using `Mistral` and `LangGraph`.\\n\",\n+    \"\\n\",\n+    \"We'll focus on ideas from one paper, `Corrective RAG (CRAG)` [here](https://arxiv.org/pdf/2401.15884.pdf).\\n\",\n+    \"\\n\",\n+    \"![Screenshot 2024-02-07 at 1.21.51 PM.png](attachment:9db7f9db-55aa-48cb-95d5-bcde3f937589.png)\\n\",\n+    \"\\n\",\n+    \"## Dependencies\\n\",\n+    \"\\n\",\n+    \"Set `MISTRAL_API_KEY` and set up Subscription to activate it.\\n\",\n+    \"\\n\",\n+    \"Set `TAVILY_API_KEY` to enable web search [here](https://app.tavily.com/sign-in).\\n\",\n+    \"\\n\",\n+    \"If you want to run this locally, use [Ollama](https://ollama.ai/library/mistral/tags):\\n\",\n+    \"\\n\",\n+    \"* Download [Ollama app](https://ollama.ai/)\\n\",\n+    \"* Download Mistral e.g., `ollama pull mistral:7b-instruct`\\n\",\n+    \"\\n\",\n+    \"Optionally, use [LangSmith](https://docs.smith.langchain.com/) for tracing (shown at bottom).\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 2,\n+   \"id\": \"abc064ab-7de1-4d03-a987-cd3078438d61\",\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.environ.get(\\\"MISTRAL_API_KEY\\\")\\n\",\n+    \"tavily_api_key = os.environ.get(\\\"TAVILY_API_KEY\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"id\": \"6e2b6eed-3b3f-44b5-a34a-4ade1e94caf0\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Indexing\\n\",\n+    \"\\n\",\n+    \"First, let's index a popular blog post on agents using [Mistral embeddings](https://python.langchain.com/docs/integrations/text_embedding/mistralai).\\n\",\n+    \"\\n\",\n+    \"We'll use a local vectorstore, [Chroma](https://python.langchain.com/docs/integrations/vectorstores/chroma).\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"id\": \"254ae533-79e0-42f4-b200-1ec9160e1d3d\",\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from langchain.text_splitter import RecursiveCharacterTextSplitter\\n\",\n+    \"from langchain_community.document_loaders import WebBaseLoader\\n\",\n+    \"from langchain_community.vectorstores import Chroma\\n\",\n+    \"from langchain_mistralai import MistralAIEmbeddings\\n\",\n+    \"\\n\",\n+    \"# Load\\n\",\n+    \"url = \\\"https://lilianweng.github.io/posts/2023-06-23-agent/\\\"\\n\",\n+    \"loader = WebBaseLoader(url)\\n\",\n+    \"docs = loader.load()\\n\",\n+    \"\\n\",\n+    \"# Split\\n\",\n+    \"text_splitter = RecursiveCharacterTextSplitter.from_tiktoken_encoder(\\n\",\n+    \"    chunk_size=500, chunk_overlap=100\\n\",\n+    \")\\n\",\n+    \"all_splits = text_splitter.split_documents(docs)\\n\",\n+    \"\\n\",\n+    \"# Embed and index\\n\",\n+    \"embedding = MistralAIEmbeddings(mistral_api_key=mistral_api_key)\\n\",\n+    \"vectorstore = Chroma.from_documents(\\n\",\n+    \"    documents=all_splits,\\n\",\n+    \"    collection_name=\\\"rag-chroma\\\",\\n\",\n+    \"    embedding=embedding,\\n\",\n+    \")\\n\",\n+    \"retriever = vectorstore.as_retriever()\"\n+   ]\n+  },\n+  {\n+   \"attachments\": {\n+    \"a2fac558-b18e-4610-bfa7-0d40c92e0ede.png\": {\n+     \"image/png\": \"",
        "path": "langgraph_crag_mistral.ipynb",
        "commit_id": "71cf0e81ad913d30065ed6c3e3f9fda68d271602",
        "original_commit_id": "ab347e043abc8514c00d4b4850d32e756bb245df",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "this image doesn't show neither ",
        "created_at": "2024-02-08T09:06:20Z",
        "updated_at": "2024-02-08T09:22:10Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/2#discussion_r1482631014",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/2",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482631014"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/2#discussion_r1482631014"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/2"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482631014/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": 149,
        "original_line": 137,
        "side": "RIGHT",
        "original_position": 137,
        "position": 149,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482632347",
        "pull_request_review_id": 1869592545,
        "id": 1482632347,
        "node_id": "PRRC_kwDOLBF5j85YXyyb",
        "diff_hunk": "@@ -0,0 +1,693 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 2,\n+   \"id\": \"19969669-b47f-47f3-b6d4-f7b155434840\",\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"\\u001b[33mWARNING: There was an error checking the latest version of pip.\\u001b[0m\\u001b[33m\\n\",\n+      \"\\u001b[0m\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"! pip install --quiet langchain_community tiktoken langchain-openai langchainhub chromadb langchain langgraph tavily-python langchain-mistralai\"",
        "path": "langgraph_crag_mistral.ipynb",
        "commit_id": "71cf0e81ad913d30065ed6c3e3f9fda68d271602",
        "original_commit_id": "ab347e043abc8514c00d4b4850d32e756bb245df",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "maybe tag package versions in case future versions break things?",
        "created_at": "2024-02-08T09:07:30Z",
        "updated_at": "2024-02-08T09:22:10Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/2#discussion_r1482632347",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/2",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482632347"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/2#discussion_r1482632347"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/2"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482632347/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": 19,
        "original_line": 19,
        "side": "RIGHT",
        "original_position": 19,
        "position": 19,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482640292",
        "pull_request_review_id": 1869592545,
        "id": 1482640292,
        "node_id": "PRRC_kwDOLBF5j85YX0uk",
        "diff_hunk": "@@ -0,0 +1,693 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 2,\n+   \"id\": \"19969669-b47f-47f3-b6d4-f7b155434840\",\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"\\u001b[33mWARNING: There was an error checking the latest version of pip.\\u001b[0m\\u001b[33m\\n\",\n+      \"\\u001b[0m\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"! pip install --quiet langchain_community tiktoken langchain-openai langchainhub chromadb langchain langgraph tavily-python langchain-mistralai\"\n+   ]\n+  },\n+  {\n+   \"attachments\": {\n+    \"9db7f9db-55aa-48cb-95d5-bcde3f937589.png\": {\n+     \"image/png\": \"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9WPuJCABCUhAAn1NAAXeaqutVv41U0r2ohAogb///e8XF198cbHmmmtWXoI4Sy21VIHf8JGWZorqNC9vv/12sdtuuw2UwYMy5lxHpWXP7U855ZS54K6HhZkbuYTTBafjkfZDLVdseGC9k1ia5SWOl26naz2kx0d7v2qGRqt8BUMA8VJWrc5Nj4+F/iLNc6v9SSaZpBYlHT1fO/DuBn1LLPF5cXi6PVQldppOP+wPpQ2mTNP9TsoV9x2dnJebOdHq/NiI0CpuN4/HC653km6/91+dlMW4EpCABCQgAQn0DwFnevRPXZgTCUhAAhKQgASGQIAZJvx95zvfKV2G3HHHHeWCsbj9iAV/53fffXeli5w47nCUW3E6U001VbzbdPvaa6+tc9fFotb4bGctA9JBMcTIYxZzTsvWNOHk4EgrmHDLFAsjnOeee+44KLudnpeN1OPA2CUNMyjitSHmnXfegsWJEdy3pAuQV2UtdsWUjs5nBHh8vCqNNBy3Z0FGaoZMuF4vf1kHhDUokGYj3jvJQy/6i06u38243COBT+wiKL1Guth4M5du8bm4bRvPkt6fL7300pBxpH0eC5m3YySI13BKL447wB122CENLk455ZRyHSDWAhoLMqj911hgbx4lIAEJSEACg0xAo8cg165lk4AEJCABCYwjAiiQWDScv+2226549tlnCxaLvf/++0sKKIMxGuTWNUhH0zZTIPYK6X333VdLGmXvOeec06AUQwmXrhFRO6liI50xgT//kZRYocV1MR5sv/32I5mFIV0LheIVV1xROzf15x8vzM2MhC996UvFNNNMU4vfzkbqioqF6auMHulo/Tj9OB3aOG64cqP0hztbIr7mSGyzTkJQ6j/wwAOVl+z0niCh4fQXlRkZ4QPxOhL0b6ztgJE0lXSWW65tpOe4XzTcQxg511lnnSyaN998MxseAlMj7ic/+cly7alwfCi/hx9+eHY9D9Laeeedi1/84hd1i6IP5Rojcc6g9l8jwc5rSEACEpCABCRQTUD3VtVsPCIBCUhAAhKQwBgmgD96ZkvEUjVSFwVorCxEWTQURWp8rU63H3vssdopKM9zo4BZ4PzWW2+txWtnI13IHcX6SApuXRZaaKHaJU844YTilltuqe3368ZZZ51VW0yYPLKQdizpouPM9Gil+IzPZzsdcY8rtpwwO+fee+/NHSrD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kD8WK//Upz5VzD///MW8885bMBukXaVpQ2IGSEACo06g6v5dZJFFio997GPlfb7CCisUH/nIR0Y9r2ZAAhKQgAQkIIGxQWCi/7wrYyOr5lICEpCABCQgAQlIQAISGE8EXnjhheKdd94ppphiimKyySbTj/94qnzLOm4IsJ4H6/Zwj08++eTlr7M5xk31W1AJSEACEpBATwho9OgJVhOVgAQkIAEJSEACEpCABCQgAQlIQAISkIAEJCABCUhgpAlMPNIX9HoSkIAEJCABCUhAAhKQgAQkIAEJSEACEpCABCQgAQlIoBcENHr0gqppSkACEpCABCQgAQlIQAISkIAEJCABCUhAAhKQgAQkMOIENHqMOHIvKAEJSEACEpCABCQgAQlIQAISkIAEJCABCUhAAhKQQC8IaPToBVXTlMAYIPDmm2+OgVyaRQlIQAISkED3CAzis+/tt98u/v3vf3cPkimNGwK2nXFT1QNf0LfeequvyjiIz5q+AmxmxiUBn1njstottASGReA9wzrbkyUggTFH4Nlnny0OPfTQ4sorryyWW2654uCDDy7mmmuuMVeOfsjwYYcdVjzzzDOVWdltt92K+eabr/J4Px/42te+VrzwwgtlFldZZZVi3XXX7efs9k3eXnrppeL8888vHnnkkeKxxx4rfvvb3xbve9/7iplmmqmYeeaZi+OOO67c7psMD3BG7r333uK0006rLOG8885b7L777pXH2z1gnTcndcsttxTXXntt8fjjjxcPP/xw8fe//734wAc+UMw666zFmmuuWWy77bbFK6+8Uuyzzz7FO++8k01s4oknLo4//vjiPe8Z+mvr3XffXdBn0y422mij8tnHvTnW5cILLyyOOeaY4uWXXy6++tWvFttvv/1YL5L575DA6aefXtC+kbnnnrvYc88920rBttMWJiP1OQGUoEceeWRxxhlnFPPMM0+x3377FSuuuOKo5drvrFFD74UHnIDPrAGvYIsngR4RmOg/70qP0jZZCUhgCAT4cL3tttvqzvzc5z5XLLDAArUwRnSizItv32mmmabYbLPNanGqNiZMmFCcdNJJtcPrrLNOqYitBbjRNoEVVlihePLJJyvjo/xeZpllKo+PxAEUsijeUcA/+uijpTIe5TvtKfzNMsssDVlZcMEFi3/+859l+DbbbFMccMABDXEMqCdw/fXXl8omlLpV8uCDDxZTTz111WHDu0gAw+4OO+xQmeJiiy1WXHLJJZXH2zlgnVdTou/ByHDRRRdVRkJBv++++xYoiRZffPHKeBzAkPje9763aZxmB9dee+3i/vvvr0XhWYjxYyzLP/7xj2KRRRapK8INN9xQfPSjH60Lc2ewCWA4vPrqq8tC0h4uu+yylgW27bREZIQxQuDGG28stthii1puMarfeeedwzKS1xIbwobfWUOA5ikSaEHAZ1YLQB6WgAQqCQx9yFxlkh6QgASGQ+DWW28tjj766Loknn/++eKQQw6phaHE5qU6Fl7y2zF6hNGA4dx0P4T38nfLLbesKZ/WWGONUjHWy+uN17QvvfTSYtddd80W/4orrqiFb7rppuXIuLEw6rlf2w4f3eStmcBXg0czQmPrmHVeXV8Y5HkexUaGXOycwTUXb7hhr7/+ekNeHnjggRE1erz22mt1RvADDzywYNDBcOR3v/tdw+kPPfSQRo8GKgakBGw7KRH3xyoBBpPEwsCTv/3tb0U7z5eTTz65nCHC+dNPP305KzFOayjb6XdVuj+UND1HAmOJgO87Y6m2zKsEBp+ARo/Br2NLOAAErrvuujqjRzoTpJMirr/++sXtt99eO2WDDTaobY/UBh8jYTQ8IzfGqpx66qkFL3ZBmE2x9957h91R+2WENTMzfvrTn7aVh+9///vFX//61wIXGbiR6Wfpx7bDzKvDDz+8DtsnP/nJUumLq5HJJpusoE7eeOONujju9JbAZz/72YYRz7j2w73RcMU6b07wZz/7WYORYccddyyYXfOhD32ovBeee+652gzGGWaYoaGuMNqee+65zS/U5lFmiPDsu/jii2tnrLXWWrXtkdjABUt47nG9MJNuONdedNFFS55/+ctfasmMpluXWibc6HsCtp2+ryIz2CYB+vJ4sNiSSy7ZlsGD5HELGPrlbr2j9cN3VpvojCaBnhDwfacnWE1UAhIYIgGNHkME52kSGEkCf/zjH4s///nPtZf4m2++eciXZ2TptNNOWzBKGXciq6666pDTGu8nput1oNzuB9luu+0KZgzFgrKR+mYdg6effrqgDTH9Xxk+ARS88ahZZi+xdke/tIfhl3BspsCsmtT1z4wzztiVwljnzTF+85vfrIuAu520LuIIk0wyScPxVrNE4vPb2cbgRR4wTq+++urFEkss0c5pfR2H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mzx8X2t72gQ7v28fG/74XwNr7ljyoP7A8MdtwCX9bOcr77DHLuxjYz+fZSPHPG8PPfSQ9e7dOxCfEQQQQAABBBBAoJgC6hvCDyrIeOqpp6xv377+5MjD1Uqa9FTBxeTJk5PzDB482Jo2bZocL+ZARabP78si6jaPGTMmEPWOO+6wE088MTDNjahT8I8++siNlvkZ7rRe+1oFKLVq1SpzXj9Cu3btAgUz6sj+qKOO8qMwjAACCOQsUNJeAgEBBBBAAAEEEECgUALHH3+83VtS4NFx200SBR5az+u37mjffzvdHrp/WKnVttl6a7vrnj/b8lVr7JwH/mpjXn7F9ABLgUcpKiYggAACCCCAQJEFVNPj5JNPDqRi2LBhNmvWrMC0bEa23377QPS7777bwh2WByJU8Eic06eCDD/07NnTHw0M//3vfw+MRxlRgYUfvv76a3800vB2XvOumuHee++1pUuXRpqXSAgggEBUAQo9okoRDwEEEEAAAQQQyFJg33272gsvPG/dOtW3d+7pkpy7XasG1r9nI3vy8eH2yMMPJKdr4JOJE6zv2WeUdFxZw2qVVPV/6aWX7OCDDw7EYQQBBBBAAAEEEIiLwEUXXRRIijqbVpNUb731VmB61JFevXoFoqrJrBtvvNFWrFgRmF6skTinL9xfxi+//JKS6bHHHrMZM/6//7iUMVJPbN++feCLW2+91dauXRuYVtbIgQceGGj+bOrUqYk+7+bNm1fWrHyPAAIIRBaocW1JiBybiAgggAACCCCAAAKRBHbcob19WtI0w2mHbG6PDdyt1Dx77dDEJkydY8+++J59M/0bO+Sww+3xR4fbbTffYNWrVzO9OammHbbZZptS8zIBAQQQQAABBBCIi0CjRo1syZIlNmnSpGSS1qxZY2PHjrWvvvrKfvzxx8T36mRbNUAmTJhQ8lLIC8m4HTt2TBSSuAmtW7e22bNn2xdffOEm2SeffGKPPvpoojmlX3/9NVEzQIUr3377bWJ5L7/8csn9U3ULd6yuBahGg7+sE044wbSOVOG5555LpNd997//+78W7lsjX+lT01Affvhhon+LH374IWHl175Qvye6D9R3+lOhQLgPFZdO96nt9JsG07B8t9hii0ShkcaHDx9ud911l5sl+al99vPPP5tcFT9VPxval++9915yHnVcr30pe82nP9X+ULNZb775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Y61Pnz6Bzb/xxhvtsMMOs6233jownREEEECgGALVi7FS1okAAggggAACCBRTQG+pNWrUwNasXmGTH94rcoHH+E8XWPdLJ9uCX9cl3vqjwKOYe5F1I4AAAggggMDGLqDaBY8++mhgM1W747HHHotU4BGY0RvhHs7DKMfgIYccYqNGjSrVTJgKPggIIIBAHAQo9IjDXiANCCCAAAIIIFBhAur8cs8997DqG9bYrNH7W/PN60Ra9+C/fm0nXz/Vlq9ab9dcc40NGTIk0nxEQgABBBBAAAEEECifwMiRIwMzqkmre++912rXrh2Ynu2ImmeaP39+trMR3xPYa6+97Pbbb/emmL3++uv2008/BaYxggACCBRDgEKPYqizTgQQQAABBBAoisDQoUPtoIO625aNzGaOPiByGu4cNcPuGjXb1m+oZvfff79deeWVkeclIgIIIIAAAggggED2AqtWrbLRo0cHZjznnHOsZs38tNQ+ZsyYwLIZyV5AzVmpLw8/vPTSS/4owwgggEBRBCj0KAo7K0UAAQQQQACBiha4+OKL7eKLL7Ltmte0KY/vF3n1f3zwS7vlqZlWt179RKeNetgmIIAAAggggAACCBRWYMKECYEOyLW24447Lm8rfeSRR2zdunV5Wd6KFSvs888/T9wrjh8/3mbNmmUbNmwo17KXLl2a6HNEhTJaVrg/k/IsVH2VfP311/bqq6/aK6+8Yl999ZWtXr26PIsKzKO+Ps4666zAtHHjxgXGGUEAAQSKIZCf4vFipJx1IoAAAggggAACEQV69uxpL7zwgu21Yx177bbSnVamW8yRf/zIPvl6jW266eb2xhtvJDpwTBeX6QgggAACCCCAAAL5E5gyZUpgYepAu3HjxoFp2Y60a9cukfmv+WbPnm3vv/++HXBA9Nq/4fVNmjTJrrjiClPfI+FQv359O+mkk2zgwIFWp07Zzal+9tlndumllybT5y9PNSruvPNOf1KkYRV0DBo0KFGIkmqGAw880AYPHmytWrVK9XWkadrGO+64IxlXhT9r1qwxFYgQEEAAgWIJUNOjWPKsFwEEEEAAAQQqRGC77bYreevuBTu6S6OsCjx6XfOpTZq+1pq3aJl4G26XXXapkPSyEgQQQAABBBBAAAFL1JzwHfbZZx9/tFzDWkaHDh2S8/71r39NDmczsH79envggQcSNU9SFXhoWcuWLUt0wn700Ufb9OnTMy7+xRdftGOOOSZlgYdmVF8ZAwYMyLgM/0vVMlFn7epw/KOPPvK/Cgyrr7t999038XJQ4IssRpo2bWoqTPJDWdvrx2UYAQQQKIQAhR6FUGWZCCCAAAIIIBALgR122MG+/XaGHdu1iT05qFPkNHW79BP74IsV1mbrbey7774rqemxaeR5iYgAAggggAACCCCQu8C0adMCC9lqq60C4+UZqVatmp155pnJWV977bVEU1TJCREH1NeIakhECaptodoQK1euTBn9iy++sAsvvDDld/7EbDoJVxNTquERNagZ2G+//TZq9FLxWrZsGZj2/fffB8YZQQABBCpagEKPihZnfQgggAACCCBQIQItWzQveVtumt1+Xlt7bOCukdY5b9Eq63TuBPvyh1V24IHdLPywHWkhREIAAQQQQAABBBDIWWDRokWBZWy55ZaB8fKO9OjRw9T0lAujRo1yg5E+VXhxyy23lIqrZq6eeeYZGzZsmHXr1i3w/YIFC+ypp54KTHMj9913nxtMft5666324Ycf2sSJExPzudopUfr3UF8dt912W3JZGlBn45qmwhD9adg3UByts7yhefPmgVmXLFkSGGcEAQQQqGgBCj0qWpz1IYAAAggggEDBBTZt0th+/nmuvXJzR+tzVJtI6/v4q8W2T79JNmvBWuvZs5fpzT8CAggggAACCCCAQHEEfv3118CK81HTQwtUZv8pp5ySXPbjjz9u6ug7alDhhQox/KC+48477zxT81lHHXWUDR8+3Hr16uVHSfR7oSav/KDaFeGOv9UsldLXokULU0GPmp8aO3asde3a1Z817fDTTz8d6PxcTU+99dZbdvLJJ1vHjh0TfxpW01YqDHFBnZyrVkp5QrjQI7yd5Vkm8yCAAAK5CFDokYse8yKAAAIIIIBArATmzZtn9erVsZUrltiUx/exvXeK1izVix/MtWOv/NyWLF9v5557ro0cOTJW20ViEEAAAQQQQACBqiSgPinCGef16tXLG4Ey/V1QAYYKBaKG8ePHB6KquaxOnYLNqNasWTPRwbkfUdvz73//259k7733XmBcBRv77bdfYJpGtDx1iB4lvPnmm4FoqsHRpEmTwDSNqEBFtVP8UN6+OMK1cKjp4asyjAACxRCg0KMY6qwTAQQQQAABBPIuMGnSJGvZsoVV27DGZj93gG3ZuFakdTz40vd29m3TbNWaDXbVVVfZ0KFDI81HJAQQQAABBBBAAIHCCKjvjUKG7bff3vbYY4/kKrLp0Dzc/Kn660gVVDNFTWn5YebMmf6ozZ49OzCeblmKtOuu0ZprnTFjRnKZ2267rXXu3Dk5Hh7o3r17YNKPP/4YGI86Eq4pU6NGjaizEg8BBBAoiEDNgiyVhSKAAAIIIIAAAhUo8Oijj1rfc86xzRtVs6+e3D/ymq9/fJoNfWGu1ahR0wYMGJAo9Ig8MxERQAABBBBAAAEECiagZqj82h6LFy+2xo0b5219qqGhPjMU1NTTd999Zw0bNsy4fGXuhwsq2rZtm3ae9u3b28svv5z8Plyo8NNPPyW/04AKKTKFHXfc0aZOnZo2itLn9/uxYsUKe+mll9LGV40aP/jz+tPLGp4zZ04gSoMGDQLjjCCAAAIVLUChR0WLsz4EEEAAAQQQyKuAqvqrM8a2zWrYxw/uG3nZF977uT07frHVrVs/0UHk0UcfHXleIiKAAAIIIIAAAggUVkD9TfiFHj///HNeCz0OP/zwRP8ebh3qhPyckpdoMoVw5r7ihjsE9+cPN/sULvQI1/zYYost/NlLDW+6aeamW8PpUwFNv379Si0n3YSFCxem+yrj9Llz5wa+p9AjwMEIAggUQYDmrYqAzioRQAABBBBAID8C6uRR7RR3alcrqwKP026abKPf/dWabLqZvfvuu0aBR372B0tBAAEEEEAAAQTyJRDO4FffbfkMtWvXNtX2cEEdmq9cudKNpvysXj27bLRwTYpws13h9YW/T5mIDBM32WSTDN+W/VXdunXLjpQixqxZswJTU/UhEojACAIIIFBgAWp6FBiYxSOAAAIIIIBAYQQOPPDARIHF4Xs2sqevDnYemWmNRw2aZJO+XmWtWm9t//rXv2yzzTbLFJ3vEEAAAQQQQAABBIogsPPOO9vkyZOTaw7XJkh+kcOAOjS/7777EktQjY9XX30149LUT0c4qNPudM1ihdPcpk2bwOytW7e2zz//PDlNTXi1aNEiOZ7tQKr0HXLIIZEXE7XfkPACs22mKzw/4wgggEC+BSj0yLcoy0MAAQQQQACBggt06NDBpkz5ws46Yku76/c7RVrf6rXrrfuln9q3s1fbLrvsmijwiDQjkRBAAAEEEEAAAQQqXED9V/jh73//u/Xs2dOflPPwNttsY3qRRn16KKi2R6ZQs2ZNU8GF3/fF9OnTrVOn1C/gTJkyJbA4FXL4oVWrVv6oqbmr8HYHIpQxopoiKrjwC4sGDx5sTZs2LWPO8n/9zTffBDy0pHDhTvmXzpwIIIBA+QSyq5dXvnUwFwIIIIAAAgggkDeB5s2bl3TgOMWuP3vryAUe02cus059J9qM2Wtsv/0PoMAjb3uDBSGAAAIIIIAAAoUR6NixY2DB6hA83GdFIEI5R04//fTknH5hhiaGm6fStHBn4yNGjNDkUkEFGG+88UZgeriQIzw+ZsyYQPzwyLfffhueVGp8++23D0y7++67U25HIFIOI0899VRg7q5du1q2zYAFFsAIAgggkAcBCj3ygMgiEEAAAQQQQKBiBLbYfDObP2+uPXhpO+t33DaRVjp+0nw7eMBnNv/Xdfbb3/7WXn/99UjzEQkBBBBAAAEEEECgeAKqsaDOzP2gzsbzHQ466KBS68m0jiOPPDLw9ahRo2z8+PGBaeqr4+qrrw5M07aEC3L22GOPQBwV7Hz66aeBaW7kvffeM3VMXlbo1atXIMrIkSPtxhtvtBUrVgSm52NETYJp+X445phj/FGGEUAAgaIIUOhRFHZWigACCCCAAALZCtStW8eWLl1k00d0seMPbB5p9ptHTLf/ufFLW7F6gx133HH29NNPR5qPSAgggAACCCCAAALFFVBtgVNPPTWQCDU/le/MezVZ5XdoHlhhipETTjihVPNNml8FC6qp8eSTT9opp5xSqpbHH//4R6tTp05giWqyVYUuftBLOk888URJzeapieauJk2aZLfccouddtppfrS0w126dDH1VeKHhx9+2Dp37myq9fHaa68lCla++OKLRO3n559/3u644w775z//6c8SafiFF14wFXz44YgjjvBHGUYAAQSKIlCtpKrehqKsmZUigAACCCCAAAIRBNRO8E477Wi1aqy3H5/dL8Ic/4ly16gZNnjEzJKRanbllVfatddeG3leIiKAAAIIIIAAAggUX0BNRKm5JD8ce+yxdu+995r6r4gStt5662S0M844w2644YbkuBuYNWuWqbAgHAYOHGjnn39+eLKpRsYFF1xQanq6Cerj4u233zYVsITDxx9/bOHaGeE4bly1RRYsWOBGEzVM2rZtmxx3A4sWLUq4hQsk3PepPvv162eXXXZZqq9STlOhTLiA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gAACCCCAAAIIIIAAAggggAACEqCmB8cBAggggAACCORVYM6cOVa3bh1bs2qpfTOia+QCj4EPfmkj3lhoVq26/eEPf6DAI697hYUhgAACCCCAAAIIIIAAAgggUDUEKPSoGvuZrUQAAQQQQKBCBEaPHm2tW7eyOjVW26zR+1vDetEqlZ5z+2f2xN8X2oaS9zHuvvtuu+GGGyokvawEAQQQQAABBBBAAAEEEEAAAQQ2LoFqG0rCxrVJbA0CCCCAAAIIFEug1iY1bf36dTZ/7IGRk9Drmk9twlerrXqNTeyRRx6x448/PvK8REQAAQQQQAABBBBAAAEEEEAAAQR8AWp6+BoMI4AAAggggEC5BX7++eeSlqmqWb26tazn1RMjLefgyybZxK/XWsNGTey1116jwCOSGpEQQAABBBBAAAEEEEAAAQQQQCCdAIUe6WSYjgACCCCAAAJZCZx37lm2605tbMjNZ9nn36238+76d9r55y1ebXv//hObPmuDNWvWwiZMmGD77LNP2vh8gQACCCCAAAIIIIAAAggggAACCEQRoNAjihJxEEAAAQQQQCCjwLx58+xvr79pp/bqaod128X++sDFNv7zVaa+OsLhk68XW7f+k23OIrPf/KadTZs2zVq2bBmOxjgCCCCAAAIIIIAAAggggAACCCCQtQCFHlmTMQMCCCCAAAIIhAUuvvA827bNlnbicV0SX3XYobU9/VB/e/ffq+zUGyclo7/4wVzredUUW7KyhnXuvId9/PHHye8YQAABBBBAAAEEEEAAAQQQQAABBHIVoCPzXAWZHwEEEEAAgSousHTpUtu6TUu77epT7IiDdw1ofPbF99bn4vus83Y1bf9dNrWrH/nBataqY4cffrg999xzgbiMIIAAAggggAACCCCAAAIIIIAAArkKUOiRqyDzI4AAAgggUMUFDjm4m82f+529PPLylBKz5iy0I08ebL8sWmG1a9e23r1724MPPpgyLhMRQAABBBBAAAEEEEAAAQQQQACBXARo3ioXPeZFAAEEEECgigts2LChpBPyidarx55pJKrZ8Gc+s9p1m9imm25qu+++OwUeaaSYjAACCCCAAAIIIIAAAggggAACuQvUzH0RLAEBBBBAAAEEqqpA375nW9OtGluf07uXIrj8xnH25jsfW4MGDe2oo46yhx56qFQcJiCAAAIIIIAAAggggAACCCCAAAL5FKB5q3xqsiwEEEAAAQSqmECTJg2t3fa72G1X9rD22zSxxb8ut5uHvmkvv/5P22yzze3444+3W2+9tYqpsLkIIIAAAggggAACCCCAAAIIIFAsAWp6FEue9SKAAAIIIFDJBU499VSrVbOGbdWild3x8Ee2Zuls+3zq99aqVRu7//4H7KSTTqrkW0jyEUAAAQQQQAABBBBAAAEEEECgsglQ06Oy7THSiwACCCCAQEwENtussbX7zba2bu0q+2LqDNt7733s3HPPNRWGEBBAAAEEEEAAAQQQQAABBBBAAIFiCFDToxjqrBMBBBBAAIFKLtCzZ09btbKksOOLr+zAbt3t4Ueest12262SbxXJRwABBBBAAAEEEEAAAQQQQACByi5AoUdl34OkHwEEEEAAgSIIdO60s82cOdOee+45a926dRFSwCoRQAABBBBAAAEEEEAAAQQQQACB0gI0b1XahCkIIIAAAggggAACCCCAAAIIIIAAAggggAACCCBQCQWqV8I0k2QEEEAAAQQQQAABBBBAAAEEEEAAAQQQQAABBBBAoJQAhR6lSJiAAAIIIIAAAggggAACCCCAAAIIIIAAAggggAAClVGAQo/KuNdIMwIIIIAAAggggAACCCCAAAIIIIAAAggggAACCJQSoCPzUiRMQAABBBBAAAEEEEAAAQQQQAABBBBAIHeBJYvW2oR3F9rPs1bbsiXrbdniNbZunVmzNrWtWava1rTlfz4326pW7itjCQgggAACCQE6MudAQAABBBBAAAEEEEAAAQQQQAABBBBAIE8CKuh4Y8wv9u20pfb5xKWRllqvfg3bsVN967RvI+uwRyNrtCnvKUeCIxICCCCQQoBCjxQoTEIAAQQQQOD/2DsP+CiKL44/SkIJvffeewdBBAERpVuxUFSwIBbEBlZUFEHEiv7tDQVBmhRBujRBlI703kMPvf3zmzjL7ObucpfcJVd+7/NZdnZ2Znbmuxtud96890iABEiABEiABEiABEiABEiABHwhcDrukvz40T5Z/scxOXfussRki1dk1MopJcpml+jo9BKdKUP8ll6i4rdTJy5K3MkL8dYfF+O3C7Lg94O2S5Uqn1Uq1oyRGg1zKGWI7SQPSIAESIAEPBKg0sMjHp4kARIgARIgARIgARIgARIgARIgARIgARIgAc8EZk88Kr9+v1+O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CZAACZAACZAACZBAahCg0iM1KPMaJEACJEACJEACJEACJEACbgmUKVNGLl26pM5v3rxZoqKi3JblCRIgARIgARIgARIgARIgARLwRIBKD090eI4ESIAESIAESIAESIAESCBgBK5cuSKlS5cW7CFbtmyRjBn5iRIw4GyYBEiABEiABEiABEiABCKAAL8oIuAmc4gkQAIkQAIkQAIkQAIkEGwELl++LOXKlbMUHtu3b5d06dIFWzfZHxIgARIgARIgARIgARIggRAjkD7E+svukgAJkAAJkAAJkAAJkAAJhDiBixcvCmJ4wKVV+vTpZdu2bVR4hPg9ZfdJgARIgARIgARIgARIIFgIUOkRLHeC/SABEiABEiABEiABEiCBCCAAhUflypUF+wwZMsimTZuU4iMChs4hkgAJkAAJkAAJkAAJkAAJpAIBKj1SATIvQQIkQAIkQAIkQAIkQAIkIHLhwgWpWrWqnD9/XsXu2LBhA2N48MEgARIgARIgARIgARIgARLwKwEqPfyKk42RAAmQAAmQAAmQAAmQAAm4InDu3DmpUaOGnD17VqKiomTdunVq76os80iABEiABEiABEiABEiABEgguQSo9EguOdYjARIgARIgARIgARIgARLwigAUHXXq1JHTp09LdHS0rF69WjJlyuRVXRYiARIgARIgARIgARIgARIgAV8IUOnhCy2WJQESIAESIAESIAESIAES8InAmTNnpF69ehIXFyeZM2eWFStWSJYsWXxqg4VJgARIgARIgARIgARIgARIwFsCVHp4S4rlSIAESIAESIAESIAESIAEfCJw6tQpadiwoZw8eVIpOpYvXy4xMTE+tcHCJEACJEACJEACJEACJEACJOALASo9fKHFsiRAAiRAAiRAAiRAAiRAAl4RgMKjSZMmcvz4ccmaNassXbpUsmXL5lVdFiIBEiABEiABEiABEiABEiCB5BKg0iO55FiPBEiABEiABEiABEiABEjAJQG4smratKkcPXpUWXYsXrxYcuTI4bIsM0mABEiABEiABEiABEiABEjAnwSo9PAnTbZFAiRAAiRAAiRAAiRAAhFO4MSJE9KsWTM5fPiwsuxYsGCB5MqVK8KpcPgkQAIkQAKRRgCK/5IlS0rFihUjbegcLwmQAAmkOQEqPdL8FrADJEACJEACJEACJEACJBAeBODKqmXLlhIb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gNUGrDngvqpXr15K6EAlP/74o7Lw0FYgoRY8dMfnz58v1atX16dC4cNGwQMSIAESIAESSJYARY9k8fAmCZAACYSMAEWPkKFlxSRAAiRAAiRAAiRAAiSQOgIQPsaOHSs9evRQBSF01KtXT4kdEEAghiBo+SeffCIIfB6uNGnSpESBWCl8hIs82yEBEiABEnAjgfPnz6tu072VG58e+0wCJOAFAhQ9vPAUOQYSIAESIAESIAESIAFPEXj55ZeV+KGDiWvrjhYtWsiMGTOkZcuWYR/v6NGjpWPHjna7FD5sFDwgARIgARIggUQELly4oM5p6ZEIC09IgARIIGwEMoetJTZEAiRAAiRAAiRAAiRAAiQQMAG4uYLAgTgesABB0vuAKwlyxiFDhsjll18un3/+uaoZwgfSE088ofb8QwIkQAIkQAIkIELRg68CEiABEogsAYoekeXP1kmABEiABEiABEiABEggWQIlSpRI9n64b7766quSL18+GTRokGqawke4nwDbIwESIAESiHYCFD2i/QmxfyRAAl4nQPdWXn/CHB8JkAAJkAAJkAAJkAAJBJlAnz59ZMCAAXatdHVlo+ABCZAACZAACdiWHozpwRcDCZAACUSGAEWPyHBnqyRAAiRAAiRAAiRAAiTgagL33HOPvPfee/YYKHzYKHhAAiRAAiQQ4wRo6RHjLwAOnwRIIOIEKHpE/BGwAyRAAiRAAiRAAiRAAiTgTgIdOnQQBDjXicKHJsE9CZAACZBALBOg6BHLT59jJwESiAYCFD2i4SmwDyRAAiRAAiRAAiRAAiTgUgKNGjWSyZMn272n8GGj4AEJkAAJkECMEjh//rwaOd1bxegLgMMmARKIOAGKHhF/BOwACZAACZAACZAACZAACbibQLVq1eSXX36xB0Hhw0bBAxIgARIggRgkQEuPGHzoHDIJkEBUEaDoEVWPg50hARIgARIgARIgARIgAXcSKFWqlKxZs8buPIUPGwUPSIAESIAEYowARY8Ye+AcLgmQQNQRoOgRdY+EHSIBEiABEiABEiABEiABdxLInTu3bNu2TS677DI1AAof7nyO7DUJkAAJkED6CGjRg+6t0seRpUmABEggrQQoeqSVHMuRAAmQAAmQAAmQAAmQAAn4JLBu3TopXry4ukfhwyciXiQBEiABEvAwAcb08PDD5dBIgARcQYCihyseEztJAiRAAiRAAiRAAiRAAu4isHDhQqlatarqNIUPdz079pYESIAESCB9BLSlR3x8fPoqYmkSIAESIIE0EaDokSZsLEQCJEACJEACJEACJEACJJASgalTp0r9+vVVNgofKdHifRIgARIgAa8Q0G6t9N4r4+I4SIAESMAtBCh6uOVJsZ8kQAIkQAIkQAIkQAIk4EICX331ldx8882q5xQ+XPgA2WUSIAESIIFUE6B7q1QjYwESIAESCCoBih5BxcnKSIAESIAESIAESIAESIAEnATef/996datm7pM4cNJh+ckQAIkQAJeI0D3Vl57ohwPCZCA2whQ9HDbE2N/SYAESIAESIAESIAESMCFBF577TXp3bu36jmFDxc+QHaZBEiABEggYAJa9KB7q4CRMSMJkAAJBJUARY+g4mRlJEACJEACJEACJEACJEAC/gg89dRT8uKLL6rbFD78UeJ1EiABEiABtxPQokdcXJzbh8L+kwAJkIArCVD0cOVjY6dJgARIgARIgARIgARIwJ0EevbsKQMHDlSdp/DhzmfIXpMACZAACSRPQMf0oOiRPCfeJQESIG9pDswAAEAASURBVIFQEaDoESqyrJcESIAESIAESIAESIAESMAngc6dO8tnn32m7lH48ImIF0mABEiABFxMQFt60L2Vix8iu04CJOBqAhQ9XP342HkSIAESIAESIAESIAEScCeBpk2bypQpU1TnKXy48xmy1yRAAiRAAr4JaNGDlh6++fAqCZAACYSaAEWPUBNm/SRAAiRAAiRAAiRAAiRAAj4JXHPNNbJgwQJ1j8KHT0S8SAIkQAIk4EICFD1c+NDYZRIgAU8RoOjhqcfJwZAACZAACZAACZAACZCAuwiUKFFCli5dKqVKlRIIH6+//rq7BsDekgAJkAAJkICDgBY96N7KAYanJEACJBAmAhQ9wgSazZAACZAACZAACZAACZAACfgmUKhQIeXqqn79+vLJJ5/IM8884zsjr5IACZAACZCACwho0YPurVzwsNhFEiABTxKg6OHJx8pBkQAJkAAJkAAJkAAJkIC7COTNm1dGjBghLVq0kDFjxsjDDz8s586dc9cg2FsSIAESIAESsAhQ9ODLgARIgAQiS4CiR2T5s3USIAESIAESIAESIAESIIFLBLJnzy4ff/yxtGnTRqZOnSo9e/aUw4cPkw8JkAAJkAAJuIrA+fPnVX/p3spVj42dJQES8BABih4eepgcCgmQAAmQAAmQAAmQAAm4nUDGjBll2LBh0rJlS5k3b54SPrZv3x7QsCCU3H777QHlZSYSIAESIAESCBUBWnqEiizrJQESIIHACFD0CIwTc5EACZAACZAACZAACZAACYSRAGJ7wNXV8uXLlfCxbt26FFvfsGGD/Pbbb/Ldd9+lmJcZSIAESIAESCBUBLToQUuPUBFmvSRAAiSQPAGKHsnz4V0SIAESIAESIAESIAESIIEIEfj000+lWbNm8tdffynhY8mSJcn25O6771b3v//++2Tz8SYJkAAJkAAJhJKAFj0YyDyUlFk3CZAACfgnQNHDPxveIQESIAESIAESIAESIAESiDCBkSNHSuPGjWXXrl1K+Pjpp5/89uiKK64QCB/z58+XuXPn+s3HGyRAAiRAAiQQSgI6pgdFj1BSZt0kQAIk4J8ARQ//bHiHBEiABEiABEiABEiABEggCgiMGjVKGjZsKMeOHVPCx+TJk/32qlOnTurehAkT/ObhDRIgARIgARIIJQFt6UH3VqGkzLpJgARIwD8Bih7+2fAOCZAACZAACZAACZAACZBAlBD44osvpF69eoIJpN69e8vXX3/ts2c1atSQ9u3bC4SRFStW+MzDiyRAAiRAAiQQSgJa7IiPjw9lM6ybBEiABEjADwGKHn7A8DIJkAAJkAAJkAAJkAAJkEB0EYDQceONN6pOPffcc4Jg575S586d1eVx48b5us1rJEACJEACJBBSAtq9lRY/QtoYKycBEiABEkhCgKJHEiS8QAIkQAIkQAIkQAIkQAIkEK0ExowZI7Vr11bde/3112XgwIFJuooYIPXr1/drDZKkAC+QAAmQAAmQQBAJ0L1VEGGyKhIgARJIAwGKHmmAxiIkQAIkQAIkQAIkQAIkQAKRIwALjuuvv151YMiQITJgwIAknenYsaO6NmjQoCT3eIEESIAESIAEQklAix50bxVKyqybBEiABPwToOjhnw3vkAAJkAAJkAAJkAAJkAAJRCkBBCpH/A6kESNGSL9+/RL1FKJHuXLllLXHvn37Et3jCQmQAAmQAAmEkoAWPejeKpSUWTcJkAAJ+CdA0cM/G94hARIgARIgARIgARIgARKIYgITJ06UatWqqR6OHTtWHn74Ybu3WbJkEQgf+/fvp5srmwoPSIAESIAEwkGAMT3CQZltkAAJkIB/AhQ9/LPhHRIgARIgARIgARIgARIggSgnMHnyZLn22mtVL6dOnSp333233WOIHjlz5qS1h02EByRAAiRAAuEgoC096N4qHLTZBgmQAAkkJUDRIykTXiEBEiABEiABEiABEiABEogCAhAx5s+fn2JPfvjhB9vV1bx586RTp06qTKlSpWjtkSI9ZiABEiABEgg2AS160L1VsMmyPhIgARIIjABFj8A4MRcJkAAJkAAJkAAJkAAJkECYCYwePVq6desmXbp0SdFFFVxd1apVS/Vw+fLl0qJFC3WsA5p//fXXsnfv3jCPgM2RAAmQAAnEIgGKHrH41DlmEiCBaCKQ6RUrRVOH2BcSIAESIAESIAESIAESIAESAAHE6zh79qzMmjVL5syZozZcv/rqqyVDhgw4TJRuvfVWWbx4sezcuVMOHTok48ePlxdeeEFWr14ta9eulezZs0u9evUSleEJCZAACZAACQSbQOHChVVMqaxZsyrhPtj1sz4SIAESIIHkCWSw/AvGJ5+Fd0mABEiABEiABEiABEiABEggcgQWLVoko0aNkmnTpqlOVKlSRW677Ta1IWaHM91///0yc+ZMdTlv3rzSr18/JX7kzp1bEAPkyiuvdBbhOQmQAAmQAAkEncCJEyckV65cQa+XFZIACZAACSRPgJYeyfPhXRIgARIgARIgARIgARIggQgTKFGihLRr104FLD958qQsWbJE5s6dK9OnT5fTp09LuXLlJEeOHHYv27dvL9u3b5f169crSxHE+ahcubLs2rVLMmbMKI0bN7bz8oAESIAESIAEQkUAlh5MJEACJEAC4SdAS4/wM2eLJEACJEACJEACJEACJEAC6SAAV1eI0TF79mxVS7FixQSurTp37iwIXq7Tiy++KIgLYqZMmTIpa4+qVaual3lMAiRAAiRAAiRAAiRAAiTgEQK09PDIg+QwSIAESIAESIAESIAESCBWCMA9VYcOHWzLj5UrVwpcYI0bN04FK8+XL58ULVpUmjZtKufPn5elS5faaODdFwFmdaBz+wYPSIAESIAESIAESIAESIAEPEGAlh6eeIwcBAmQAAmQAAmQAAmQAAnELoHly5eroOUTJ05U7q5AAu6wYPkB4ePNN9+Ujz76KBGgb775RurWrZvoGk9IgARIgARIgARIgARIgATcT4Cih/ufIUdAAiRAAiRAAiRAAiRAAiRwiQBcX40dO1Z+/PFHdaVmzZrKKuT3338XiCI6wb3V1KlT9Sn3JEACJEACJEACJEACJEACHiFA0cMjD5LDIAESIAESIAESIAESIAES+JfA4sWL5fvvv1dCB4KdFypUSHLmzClbt261M3Xv3l1effVV+5wHJEACJEACJEACJEACJEAC7idA0cP9z5AjIAESIAESIAESIAESIAES8EPgyJEj8vnnnyvxwxQ8dPY+ffrIE088oU+5JwESIAESIAESIAESIAEScDmBjC7vP7tPAiRAAiRAAiRAAiRAAiRAAn4JIKg5RI158+bJiBEjpEGDBony+hJCEmXgCQmQAAmQAAmQAAmQAAmQgKsI0NLDVY+LnSUBEiABEiABEiABEiABEkgvgd27d8t//vMfOXDggPz999/prY7lSYAESIAESIAESIAESIAEoogARY8oehjsCgmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQQNoJ0L1V2tmxJAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQQBQRoOgRRQ+DXSEBEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEkg7AYoeaWfHkiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAlFEgKJHFD0MdoUESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESCDtBCh6pJ0dS5IACZAACZAACZAACZAACZAACZAACZAACZAACZAACZAACUQRAYoeUfQw2BUSIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIIG0E6DokXZ2LEkCJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJBBFBDJHUV/YFRIgARIgARIgARIgARIgARJwNYELFy7Ixo0b1RiyZs0q5cqV8zueixcvyoYNG9T9XLlyScmSJf3m5Q0SIAESIAESIAESIAESIIHACGSIt1JgWZmLBEiABEiABEiABEiABEiABEggOQIQPZo3by5///23yjZv3jwpU6aMzyIzZsyQBx54QN3r1KmTDBo0yGc+XiQBEiABEiABEiABEiABEgicAN1bBc6KOUmABEiABEiABEiABEiABEggWQKZM2eWfv362Xk+/PBD+9g8iIuLk8GDB9uXHnvsMfuYByRAAiRAAiRAAiRAAiRAAmknQNEj7exYkgRIgARIgARIgARIgARIgASSEGjZsqVUqVJFXR87dqzs3LkzSZ6ff/5Z1q9fr6537dpVypYtmyQPL5AACZAACZAACZAACZAACaSeAEWP1DNjCRIgARIgARIgARIgARIgARLwSyBjxoyJrD0++eSTRHnhYXjIkCH2td69e9vHvg7OnDkje/fuFViHpDadPn1ald2zZ4+cPHkytcWZnwRIgARIgARIgARIgARcR4Cih+seGTtMAiRAAiRAAiRAAiRAAiQQ7QSaNGkiNWrUUN0cNWqUEh50n3/55RdZuXKlOr333nulePHi+pa9R2yQoUOHCuqpVKmS1K5dW1mDdO7cWVasWGHncx4cOXJERowYIe3bt5fSpUtL5cqVVdk6derIVVddpa599dVXzmI8JwESIAESIAESIAESIAHPEKDo4ZlHyYGQAAmQAAmQAAmQAAmQAAlEC4EMGTIksvb49NNP7a6ZVh4PPfSQfV0fnDhxQm677TZ599137YDo+t6yZcukY8eOMm7cOH3J3qMcXGUNGDDAFlXsm8ZBvnz5jDMekgAJkAAJkAAJkAAJkIC3CGT21nA4GhIgARIgARIgARIgARIgARKIDgJ169YVbAsXLpThw4fLgw8+KJs3bxYIF0gQPAoXLpyksxBIdJ7LLrtMlcufP7/88ccfMn78eJX/lVdekRYtWsjll19ul0dgdB0nBBdvueUWZemRO3dugcstuMmCJUjVqlXtMjwgARIgARIgARIgARIgAa8RyGD5k4332qA4HhIgARIgARIgARIgARIgARKIBgLLly+XTp06qa48/PDDSriACIIEN1UQM8wEUaJ69er2pSVLliQSRkaPHi0vvviiuo99z5497bxwfaXFEgRQh0srJhIgARIgARIgARIgARKINQJ0bxVrT5zjJQESIAESIAESIAESIAESCBuBmjVrStOmTVV7H374obL6wEnfvn2TCB64vnHjRuxU6tKlSyLBAxfvuOMOgfUH0pYtW9Re/8maNas+lO+++y7JffsmD0iABEiABEiABEiABEjAwwTo3srDD5dDIwESiE0CMOCDH/FoTtrIMNr7Gc0M2TcSIAESIAH3EHjqqafkp59+sjsM0QIBzH2lHTt22JfxOandWdkXrYPs2bPLyZMnk8T7aN26tS2qwNIDW9GiRaVBgwbSuHFjadSokeTKlcusisckQAIkQAIkQAIkQAIk4DkCFD0890g5IBIggVgngAkSLSqYLPwJDOkRSQJpx1ce9Ev3R9/X52afU3Os6zHr9lU+0Hy+yvIaCZAACZAACaSFwNVXXy1t27aVqVOnquKPP/645MmTx2dV+/fvt69D8PAleugMED7MdNddd0mWLFnknXfekUOHDqlbe/bsUUHPdeDz559/Xnr16mV/DpvleUwCJEACJEACJEACJEACXiBA0cMLT5FjIAESIIFkCKRXTEim6jRPmOg+aQFC73Vb+r4+D+Y+0Lp1nwLNH8w+si4SIAESIAHvEahfv74teiQXawOWGTrhuFChQvo0yd6M/YGbCFbetWtXQWyPpUuXyoIFC+TXX3+VlStX2mXfeOMNyZcvn9x66632NR6QAAmQAAmQAAmQAAmQgJcIUPTw0tPkWEiABEjAIoDJ+kAm6vWkPvb6GOWcZfU9wHXeCwQ4yut6dV1676wzpfp1OZ1Pnzv7ges6j/Neas+DWVdq22Z+EiABEiCB2CNQtmxZe9Bt2rSRl156yT4P9ACxPerVq6e2fv36ydGjR2Xo0KEyfPhwVcX06dMpegQKk/lIgARIgARIgARIgARcR4Cih+seGTtMAiRAAskTSMtkf1xcnC1MmLX7ExXMPCkd++uPeR3HgbRllkkpP8WKlJ4M75MACZAACUQjgfLly6tA5XBdNWLECKlbt67cdNNN6erq5ZdfLjfffLMtehw5ciRd9YW68NlT8bJ0+SIZ+v5ggWuwypUry5VXXqm2/Pnzh7p51k8CJEACKRLYt2+frF69Wm2IlZQzZ0713q33BQsWlCJFivh1ZZhiA8xAAiRAAiSQLgIUPdKFj4VJgARIwD0E/IkEcIWBBEHBn/hgig3JjRhtYNN1mnn9iRD++mWWNY9Tm98sm5rjQMecmjqZlwRIgARIgARSIoAg57DueOaZZ1TW++67T4keLVu2lLx580q2bNkEcT/27t0rjz32WKLqhgwZIufOnZPixYvbeU+dOiWbNm2SL7/80s4LISGa0oXzIufPxsuFCyJxFxOsVjdt3CGLFi1Sm9nXJg1bSpt2reTm9q0lR44c5i0ekwAJkEBICfz5558yadIkmTNnjvz1118BtQURBOKH3uC2EMfY586dW9WRnMvDgBphJhIgARIggSQEMliTR/FJrvICCZAACZCAZwgk9zavJ/b95dH3A4Gh68DeFD30dV2HWad5z7yu82Jv5jGvp3Tsrz6znFl3IPnNsjwmARIgARIggdQQ+Prrr+W5555TRSZPnizVqlXzWxwWmE8++aR89913fvPgBibgzIl/TJwhcHly6YorrpCZM2dKgQIFkssWknvWsOSfI/Hyz9E4OXksXs6dtcSOc/GycfNK+X3VPPnnxFE5cfKotT8mp06fkD83Lvfbj8IFi0uTxi2lrSWANGxc228+3iABEiCB9BL46aefZOLEiUrwSG9d/spv27bN3y1eJwESIAESSAMBWnqkARqLkAAJkIBbCJiT+s4+m5P8ODbzmvec5VI691XW1zWzvZTqNO+bfXUem/lSc6z74qufqamHeUmABEiABEggGASweGDQoEEqIPnbb7+dKBC5WT/cq5QpU0Zdunjxohw/fty8negYFiRdunSR7t27h13wOLQ3To4egNgRL3Fx8bJv/05Zs36RrF630BI75ss/ltDhTLkvu1wqXFlNzl84J//8c1iOHT8sFy5aJiGX0r4Du2TM+JFqu65aHalbr47kL5BHucPiqmlNiXsSIIH0EIDQASu5pUuXpqeaFMv26dNHWbUhplPhwoVTzM8MJEACJEACKROgpUfKjJiDBEiABFxLQE/mYwC+JvT1fb1HHl/5ggVAt+OvP77aMcvgPs51P817aem3v1gmvvrBayRAAt4loN9XvDtCjsztBPB5BXdWiMUBQQRurgoVKiSZMyddw3bw4EE5fPiwnD9/XiCE5MmTR/Lly6fcqJiWmOFgcu5MvOzZGifLl6yTRctnyo7dG2XLtnWyZ1/CiuZclrBRpHApKV6kjBQtXEaKFCojxYqUtq6Vkdy58ibp4pGjB2TfgR2WaGJtB3bKfhxb25o/FyfKO3bsWKHwkQgJT0iABFJJ4L333pP//e9/iUrBdWD16tWlVKlSUqJECbVlz549UR59AlEa79vYO4/hhtBf+vDDD6Vt27b+bvM6CZAACZBAgAQoegQIitlIgARIwC0ETCHA7LNTFND5sNcTflpMMMsF61i3p+vT/dHX9Tnu62s6r7lHPud9s6yZ19exWTY15XzVxWskQALeIID3Bb4feONZchTRQ2DTnwdl4oQZsnDxLFm+cq7dsRrXNJSrKtWS6lXrSfkr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8bnXbj1XYZvN2FWuxtnIKHQbNQChH4yzlMeaCQvcR33pvHKZW9h7wX2vKD93jG452ut4NF/H5bZx3ai5+blea58qR1kgX6+1LCzOpJ6295nF6SdOHZXPmARIoLQIXHvttfL1118HBtWvXz/BE8NLL710ID8s4SrnUY7Dz99++23ZbLPN6lWvrq4O5HHtSOAABxiL8Bo0aJAceuihMmTIEPnuu++SvF555RV55plnZI899kjm8YIESECEa1jDvwu4hjX8PeAISIAE8k+gRf5FUiIJkAAJkAAJJM4piKPYh1LXr9fU+S1evDjpfqgpKYz0XiJGwNxymV9YW5XtvkfcPPca7f10rmNy+83mGuPBK2xurjyt5+ZFXbt108mNksF8EiCBxkng448/lrvuuisweOzugCulOAaPQEMncf/99zspXmZKAMaPp556StZcc81A0wsvvDCwqyZQyAQJNEMCXMNK86ZzDSvN+8JRkQAJZEaARo/MeLE2CZAACZBADAKqhEWMEKWIhbFD66aqZ4U0kX90RwGexlcFfBSfxjRl915jPjq/TOeQion2obEr230fab6+v5AOkxvWRtvmGuciW9siThVQrgZDnV+q+iwjARJoegQefPDBwKTg0ur666+X1q1bB/IzTUBh//PPP2fajPUdAnAndu+99zo5Yl2QvfTSS4E8JkigORPgGla6d59rWOneG46MBEggHgEaPeJxYi0SIAESIIEYBFQJixhK2PLy8noGD5RpPYgMq6d1EDeFoPPVHR5qEMDcm0Jw7xPmpvPL19yUH2Lty2Xn5vt9ho3Flaf1w+ppWSZx2FgwVv+lMrW+G6NM62s9N3bHr+N2ebh1eU0CJNB0CSxcuFAeffTRwAQPP/xwqajIjwfjxx9/PCCbicwJ4HDg3XbbLdDwiSeeCKSZIIHmSoBrWOnfea5hpX+POEISIIFoAvn5izhaPktIgARIgASaAQFfYQtFrBtQrkHrplLqhtVFXmNS7OIJfHDQ3QYYuyqodX5NJc7kvuh7IU4brav3Hmlt55ehjuZpnVTvQ62jshE3VHDnpWNwx4c8nZvW9eem7RiTAAk0HwLvvPNOPVdJOEw7X+HOO++Uww47zD7AkKtMnAWCc0c+/fRTu56ttdZasvrqq2dloFm0aJH897//tbLatWsnq666qqy77rrJ74dsxoq19dtvv7Vy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buYMET9A0QjDCuJ0AU9au66krrrqKtl3333rNcNP4OHDhyfPKqlXISQDBqGnn346pCQ8CwYp3ItZs2YlK8DYgbNXcG4AAwmQgJTsGgZD6jHHHBP7FsE134QJE0I/2++99574uzOiBPtrGHaYVFZW1qv+v//9T7D2x1kXtfFxxx0np59+uibTxlzD0iJiBRIggRInQPdWJX6DODwSIAESIAESIAESIAESIAESCCOw6qqr2h0ObhkU8yeeeKJ92tfNz+UaZ2vsuOOOsUXgaeKnnnpK/IPIwwSgDvzchxk8UB+uqPBkdDpZKI+r0INB6JZbbpGTTz45bEihedjpETd8+eWXMnTo0IDBA21hUKLBIy5F1msOBEp1Ddt1113lmmuuiXULNt10U4ELrKjPdp8+fQTnbqQLAwYMiG0cWXbZZeXVV1+1htV0crXc3W2ieVEx17AoMswnARJoTARo9GhMd4tjJQESIAESIAESIAESIAESIAGHwBFHHCHYheAGGBygQBs1apRMnTrVupuqrq52q4Ret23bNjQfme6B5loJrqKiAty84IyNAw44IPRMEDzRvM8++wjcTEEpmCr06tXLumfZbbfdAudxoA2MIvDBjwPTM3E/hbmedNJJdrfHnnvumdaogr6inqpeuHChfPXVVwKf/P/85z8F54bALZYb4LoL7sAYSIAEggRKdQ3be++9BYd4Yy11zwHS0WN3B9zq4UyNlVdeWbNDY+z0eP7558U/4wOVIWfIkCGCc45gYI4bYOjFeUnof6uttgodoysLLq+iAtewKDLMJwESaMwE6N6qMd89jp0ESIAESIAESIAESIAESKDZE4Crk7///e/23IwoGDhDwz+vI6puIfJ//fXXpF977OqA0SObANdU33zzjfVp36lTJ3s+hrrygmEHrrigoIRBpk2bNrHdfGEsOLsErrngtx/XaL/MMstYRSTiqAA3WjfccENUsX0aG096Rz0JHtmQBSTQTAiU+hqGdQdrC144a2jNNddMa2SIunVYp7BzDGeGYC1caaWVklXhUgpncmD9wqt169bJsjgXaIuziBCjH6xhWGthTEll1OYaFocu65AACTQ2AnQm2tjuGMdLAiRAAiRAAiRAAiRAAiRAAg4BuDp57LHH7KHZDz/8sFNSd4mDbxsy4IBzvHINMHDgyWi8/ACjQli+Xy8qDQVhjx497CuqTlg+FKFRAeee4El2GjyiCDGfBERKfQ3DugNXXHjlGrAW4LD0sNC+fXvBK9vQoUMHWX/99TNuzjUsY2RsQAIk0AgI0L1VI7hJHCIJkAAJkAAJkAAJkAAJkAAJpCKAnQhXXnmlPR9jv/32q/cU8vfff5+qOctyIIDdIW6A2xkc8I7D2RHT4OHS4TUJhBPgGhbOpRi5XMOKQZl9kAAJFJsA3VsVmzj7IwESIAESIAESIAESIAESIIECE1BXT7/88ovMnz/fPqEMVyoM+SeAc1PgqgY7WeByC0YPdbmV/94okQSaBwGuYcW7z1zDiseaPZEACRSPAI0exWPNnkiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABApIgO6tCgiXokmABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABIpHgEaP4rFmTyRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAgUkQKNHAeFSNAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQQPEI0OhRPNbsiQRIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIoIAEaPQoIFyKJgESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESKB4BGj2Kx5o9kQAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJFJAAjR4FhEvRJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACxSNAo0fxWLMnEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiCBAhKg0aOAcCmaBEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEigeARo9Cgea/ZEAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRQQAI0ehQQLkWTAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAkUjwCNHsVjzZ5IgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgAQKSIBGjwLCpWgSIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIIHiEaDRo3is2RMJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkEABCdDoUUC4FE0CJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJFA8AjR6FI81eyIBEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiggARo9CgiXokmABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABIpHgEaP4rFmTyRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAgUkQKNHAeFSNAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQQPEI0OhRPNbsiQRIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIoIAEaPQoIFyKJgESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESKB4BGj2Kx5o9kQAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJFJAAjR4FhEvRJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACxSNAo0fxWLMnEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiCBAhKg0aOAcCmaBEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEigeARo9Cgea/ZEAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRQQAI0ehQQLkWTAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAkUjwCNHsVjzZ5IgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgAQKSIBGjwLCpWgSIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIIHiEaDRo3is2RMJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkEABCdDoUUC4FE0CJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJFA8AjR6FI81eyIBEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiggARo9CgiXokmABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABIpHgEaP4rFmTyRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAgUkQKNHAeFSNAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQQPEI0OhRPNbsiQRIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIoIAEaPQoIFyKJgESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESKB4BGj2Kx5o9kQAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJFJAAjR4FhEvRJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACxSNAo0fxWLMnEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiCBAhKg0aOAcCmaBEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEigeARo9Cgea/ZEAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRQQAI0ehQQLkWTAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAkUjwCNHsVjzZ5IgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIgAQKSIBGjwLCpWgSIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESIIHiEaDRo3is2RMJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkEABCdDoUUC4FE0CJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJFA8AjR6FI81eyIBEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiggARo9CgiXokmABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABIpHgEaP4rFmTyRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAgUkQKNHAeFSNAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQAAmQQPEI0OhRPNbsiQRIgARIgARIgARIgARIgARIgARIgARIgARIgARIgARIoIAEaPQoIFyKJgESIAESIAESIAESIAESIAESIAESIAESIAESIAESIAESKB4BGj2Kx5o9kQAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJkAAJFJAAjR4FhEvRJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACJEACxSNAo0fxWLMnEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEiCBAhKg0aOAcCmaBEiABEiABEiABEiABEiABEiABEiABEiABEiABEiABEigeARo9Cgea/ZEAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRAAiRQQAL/D2QsXoszqvK7AAAAAElFTkSuQmCC\"\n+    }\n+   },\n+   \"cell_type\": \"markdown\",\n+   \"id\": \"92ddc4f4-f7bf-4e0e-b5a5-5abd8a008b21\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# Corrective RAG\\n\",\n+    \"\\n\",\n+    \"Self-reflection can enhance RAG, enabling correction of poor quality retrieval or generations.\\n\",\n+    \"\\n\",\n+    \"Several recent papers focus on this theme, but implementing the ideas can be tricky.\\n\",\n+    \"\\n\",\n+    \"Here we show how to implement self-reflective RAG using `Mistral` and `LangGraph`.\\n\",\n+    \"\\n\",\n+    \"We'll focus on ideas from one paper, `Corrective RAG (CRAG)` [here](https://arxiv.org/pdf/2401.15884.pdf).\\n\",\n+    \"\\n\",\n+    \"![Screenshot 2024-02-07 at 1.21.51 PM.png](attachment:9db7f9db-55aa-48cb-95d5-bcde3f937589.png)\\n\",\n+    \"\\n\",\n+    \"## Dependencies\\n\",\n+    \"\\n\",\n+    \"Set `MISTRAL_API_KEY` and set up Subscription to activate it.\\n\",\n+    \"\\n\",\n+    \"Set `TAVILY_API_KEY` to enable web search [here](https://app.tavily.com/sign-in).\\n\",\n+    \"\\n\",\n+    \"If you want to run this locally, use [Ollama](https://ollama.ai/library/mistral/tags):\\n\",\n+    \"\\n\",\n+    \"* Download [Ollama app](https://ollama.ai/)\\n\",\n+    \"* Download Mistral e.g., `ollama pull mistral:7b-instruct`\\n\",\n+    \"\\n\",\n+    \"Optionally, use [LangSmith](https://docs.smith.langchain.com/) for tracing (shown at bottom).\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 2,\n+   \"id\": \"abc064ab-7de1-4d03-a987-cd3078438d61\",\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.environ.get(\\\"MISTRAL_API_KEY\\\")\\n\",",
        "path": "langgraph_crag_mistral.ipynb",
        "commit_id": "71cf0e81ad913d30065ed6c3e3f9fda68d271602",
        "original_commit_id": "ab347e043abc8514c00d4b4850d32e756bb245df",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "maybe add\r\n\r\n```\r\nos.environ[\"MISTRAL_API_KEY\"] = \"TYPE YOUR API KEY\"\r\nos.environ[\"TAVILY_API_KEY\"] = \"TYPE YOUR API KEY\"\r\n```\r\n\r\nbecause when I just do `tavily_api_key = \"xxx\"` it doesn't work. So I guess we have to set it in an enviornment variable? ",
        "created_at": "2024-02-08T09:13:55Z",
        "updated_at": "2024-02-08T09:22:11Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/2#discussion_r1482640292",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/2",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482640292"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/2#discussion_r1482640292"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/2"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482640292/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": 79,
        "original_line": 67,
        "side": "RIGHT",
        "original_position": 67,
        "position": 79,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482654418",
        "pull_request_review_id": 1869592545,
        "id": 1482654418,
        "node_id": "PRRC_kwDOLBF5j85YX4LS",
        "diff_hunk": "@@ -0,0 +1,693 @@\n+{\n+ \"cells\": [\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 2,\n+   \"id\": \"19969669-b47f-47f3-b6d4-f7b155434840\",\n+   \"metadata\": {},\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"\\u001b[33mWARNING: There was an error checking the latest version of pip.\\u001b[0m\\u001b[33m\\n\",\n+      \"\\u001b[0m\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"! pip install --quiet langchain_community tiktoken langchain-openai langchainhub chromadb langchain langgraph tavily-python langchain-mistralai\"\n+   ]\n+  },\n+  {\n+   \"attachments\": {\n+    \"9db7f9db-55aa-48cb-95d5-bcde3f937589.png\": {\n+     \"image/png\": \"\"\n+    }\n+   },\n+   \"cell_type\": \"markdown\",\n+   \"id\": \"92ddc4f4-f7bf-4e0e-b5a5-5abd8a008b21\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# Corrective RAG\\n\",\n+    \"\\n\",\n+    \"Self-reflection can enhance RAG, enabling correction of poor quality retrieval or generations.\\n\",\n+    \"\\n\",\n+    \"Several recent papers focus on this theme, but implementing the ideas can be tricky.\\n\",\n+    \"\\n\",\n+    \"Here we show how to implement self-reflective RAG using `Mistral` and `LangGraph`.\\n\",\n+    \"\\n\",\n+    \"We'll focus on ideas from one paper, `Corrective RAG (CRAG)` [here](https://arxiv.org/pdf/2401.15884.pdf).\\n\",\n+    \"\\n\",\n+    \"![Screenshot 2024-02-07 at 1.21.51 PM.png](attachment:9db7f9db-55aa-48cb-95d5-bcde3f937589.png)\\n\",\n+    \"\\n\",\n+    \"## Dependencies\\n\",\n+    \"\\n\",\n+    \"Set `MISTRAL_API_KEY` and set up Subscription to activate it.\\n\",\n+    \"\\n\",\n+    \"Set `TAVILY_API_KEY` to enable web search [here](https://app.tavily.com/sign-in).\\n\",\n+    \"\\n\",\n+    \"If you want to run this locally, use [Ollama](https://ollama.ai/library/mistral/tags):\\n\",\n+    \"\\n\",\n+    \"* Download [Ollama app](https://ollama.ai/)\\n\",\n+    \"* Download Mistral e.g., `ollama pull mistral:7b-instruct`\\n\",\n+    \"\\n\",\n+    \"Optionally, use [LangSmith](https://docs.smith.langchain.com/) for tracing (shown at bottom).\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 2,\n+   \"id\": \"abc064ab-7de1-4d03-a987-cd3078438d61\",\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"import os\\n\",\n+    \"\\n\",\n+    \"mistral_api_key = os.environ.get(\\\"MISTRAL_API_KEY\\\")\\n\",\n+    \"tavily_api_key = os.environ.get(\\\"TAVILY_API_KEY\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"id\": \"6e2b6eed-3b3f-44b5-a34a-4ade1e94caf0\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"## Indexing\\n\",\n+    \"\\n\",\n+    \"First, let's index a popular blog post on agents using [Mistral embeddings](https://python.langchain.com/docs/integrations/text_embedding/mistralai).\\n\",\n+    \"\\n\",\n+    \"We'll use a local vectorstore, [Chroma](https://python.langchain.com/docs/integrations/vectorstores/chroma).\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": 3,\n+   \"id\": \"254ae533-79e0-42f4-b200-1ec9160e1d3d\",\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"from langchain.text_splitter import RecursiveCharacterTextSplitter\\n\",\n+    \"from langchain_community.document_loaders import WebBaseLoader\\n\",\n+    \"from langchain_community.vectorstores import Chroma\\n\",\n+    \"from langchain_mistralai import MistralAIEmbeddings\\n\",\n+    \"\\n\",\n+    \"# Load\\n\",\n+    \"url = \\\"https://lilianweng.github.io/posts/2023-06-23-agent/\\\"\\n\",\n+    \"loader = WebBaseLoader(url)\\n\",\n+    \"docs = loader.load()\\n\",\n+    \"\\n\",\n+    \"# Split\\n\",\n+    \"text_splitter = RecursiveCharacterTextSplitter.from_tiktoken_encoder(\\n\",\n+    \"    chunk_size=500, chunk_overlap=100\\n\",\n+    \")\\n\",\n+    \"all_splits = text_splitter.split_documents(docs)\\n\",\n+    \"\\n\",\n+    \"# Embed and index\\n\",\n+    \"embedding = MistralAIEmbeddings(mistral_api_key=mistral_api_key)\\n\",\n+    \"vectorstore = Chroma.from_documents(\\n\",\n+    \"    documents=all_splits,\\n\",\n+    \"    collection_name=\\\"rag-chroma\\\",\\n\",\n+    \"    embedding=embedding,\\n\",\n+    \")\\n\",\n+    \"retriever = vectorstore.as_retriever()\"\n+   ]\n+  },\n+  {\n+   \"attachments\": {\n+    \"a2fac558-b18e-4610-bfa7-0d40c92e0ede.png\": {\n+     \"image/png\": \"",
        "path": "langgraph_crag_mistral.ipynb",
        "commit_id": "71cf0e81ad913d30065ed6c3e3f9fda68d271602",
        "original_commit_id": "ab347e043abc8514c00d4b4850d32e756bb245df",
        "user": {
          "login": "sophiamyang",
          "id": 39501859,
          "node_id": "MDQ6VXNlcjM5NTAxODU5",
          "avatar_url": "https://avatars.githubusercontent.com/u/39501859?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sophiamyang",
          "html_url": "https://github.com/sophiamyang",
          "followers_url": "https://api.github.com/users/sophiamyang/followers",
          "following_url": "https://api.github.com/users/sophiamyang/following{/other_user}",
          "gists_url": "https://api.github.com/users/sophiamyang/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sophiamyang/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sophiamyang/subscriptions",
          "organizations_url": "https://api.github.com/users/sophiamyang/orgs",
          "repos_url": "https://api.github.com/users/sophiamyang/repos",
          "events_url": "https://api.github.com/users/sophiamyang/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sophiamyang/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "The Ollama section doesn't run somehow. I got the following error message: \r\n```ConnectionError: HTTPConnectionPool(host='localhost', port=11434): Max retries exceeded with url: /api/chat/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7b4510b55930>: Failed to establish a new connection: [Errno 111] Connection refused'))```",
        "created_at": "2024-02-08T09:21:56Z",
        "updated_at": "2024-02-08T09:22:11Z",
        "html_url": "https://github.com/mistralai/cookbook/pull/2#discussion_r1482654418",
        "pull_request_url": "https://api.github.com/repos/mistralai/cookbook/pulls/2",
        "author_association": "COLLABORATOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482654418"
          },
          "html": {
            "href": "https://github.com/mistralai/cookbook/pull/2#discussion_r1482654418"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/cookbook/pulls/2"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/cookbook/pulls/comments/1482654418/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": 574,
        "original_line": 562,
        "side": "RIGHT",
        "original_position": 562,
        "position": 574,
        "subject_type": "line"
      }
    ]
  }
}