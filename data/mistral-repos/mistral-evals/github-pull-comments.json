{
  "10": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/issues/comments/2822901704",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/10#issuecomment-2822901704",
        "issue_url": "https://api.github.com/repos/mistralai/mistral-evals/issues/10",
        "id": 2822901704,
        "node_id": "IC_kwDOMxW0Oc6oQg_I",
        "user": {
          "login": "dependabot[bot]",
          "id": 49699333,
          "node_id": "MDM6Qm90NDk2OTkzMzM=",
          "avatar_url": "https://avatars.githubusercontent.com/in/29110?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dependabot%5Bbot%5D",
          "html_url": "https://github.com/apps/dependabot",
          "followers_url": "https://api.github.com/users/dependabot%5Bbot%5D/followers",
          "following_url": "https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}",
          "gists_url": "https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/dependabot%5Bbot%5D/subscriptions",
          "organizations_url": "https://api.github.com/users/dependabot%5Bbot%5D/orgs",
          "repos_url": "https://api.github.com/users/dependabot%5Bbot%5D/repos",
          "events_url": "https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}",
          "received_events_url": "https://api.github.com/users/dependabot%5Bbot%5D/received_events",
          "type": "Bot",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-04-23T02:27:50Z",
        "updated_at": "2025-04-23T02:27:50Z",
        "author_association": "NONE",
        "body": "Superseded by #12.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/issues/comments/2822901704/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": {
          "id": 29110,
          "client_id": "Iv1.4f9a6346434f815e",
          "slug": "dependabot",
          "node_id": "MDM6QXBwMjkxMTA=",
          "owner": {
            "login": "github",
            "id": 9919,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjk5MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/github",
            "html_url": "https://github.com/github",
            "followers_url": "https://api.github.com/users/github/followers",
            "following_url": "https://api.github.com/users/github/following{/other_user}",
            "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/github/subscriptions",
            "organizations_url": "https://api.github.com/users/github/orgs",
            "repos_url": "https://api.github.com/users/github/repos",
            "events_url": "https://api.github.com/users/github/events{/privacy}",
            "received_events_url": "https://api.github.com/users/github/received_events",
            "type": "Organization",
            "user_view_type": "public",
            "site_admin": false
          },
          "name": "Dependabot",
          "description": "GitHub Dependabot",
          "external_url": "https://dependabot-api.githubapp.com",
          "html_url": "https://github.com/apps/dependabot",
          "created_at": "2019-04-16T22:34:25Z",
          "updated_at": "2025-06-11T21:07:45Z",
          "permissions": {
            "actions": "write",
            "checks": "write",
            "contents": "write",
            "issues": "write",
            "members": "read",
            "metadata": "read",
            "pull_requests": "write",
            "statuses": "read",
            "vulnerability_alerts": "read",
            "workflows": "write"
          },
          "events": [
            "check_suite",
            "issues",
            "issue_comment",
            "label",
            "pull_request",
            "pull_request_review",
            "pull_request_review_comment",
            "repository"
          ]
        }
      }
    ],
    "review_comments": []
  },
  "7": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/issues/comments/2737172486",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/7#issuecomment-2737172486",
        "issue_url": "https://api.github.com/repos/mistralai/mistral-evals/issues/7",
        "id": 2737172486,
        "node_id": "IC_kwDOMxW0Oc6jJfAG",
        "user": {
          "login": "dependabot[bot]",
          "id": 49699333,
          "node_id": "MDM6Qm90NDk2OTkzMzM=",
          "avatar_url": "https://avatars.githubusercontent.com/in/29110?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dependabot%5Bbot%5D",
          "html_url": "https://github.com/apps/dependabot",
          "followers_url": "https://api.github.com/users/dependabot%5Bbot%5D/followers",
          "following_url": "https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}",
          "gists_url": "https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/dependabot%5Bbot%5D/subscriptions",
          "organizations_url": "https://api.github.com/users/dependabot%5Bbot%5D/orgs",
          "repos_url": "https://api.github.com/users/dependabot%5Bbot%5D/repos",
          "events_url": "https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}",
          "received_events_url": "https://api.github.com/users/dependabot%5Bbot%5D/received_events",
          "type": "Bot",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-03-19T15:54:24Z",
        "updated_at": "2025-03-19T15:54:24Z",
        "author_association": "NONE",
        "body": "Superseded by #10.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/issues/comments/2737172486/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": {
          "id": 29110,
          "client_id": "Iv1.4f9a6346434f815e",
          "slug": "dependabot",
          "node_id": "MDM6QXBwMjkxMTA=",
          "owner": {
            "login": "github",
            "id": 9919,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjk5MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/github",
            "html_url": "https://github.com/github",
            "followers_url": "https://api.github.com/users/github/followers",
            "following_url": "https://api.github.com/users/github/following{/other_user}",
            "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/github/subscriptions",
            "organizations_url": "https://api.github.com/users/github/orgs",
            "repos_url": "https://api.github.com/users/github/repos",
            "events_url": "https://api.github.com/users/github/events{/privacy}",
            "received_events_url": "https://api.github.com/users/github/received_events",
            "type": "Organization",
            "user_view_type": "public",
            "site_admin": false
          },
          "name": "Dependabot",
          "description": "GitHub Dependabot",
          "external_url": "https://dependabot-api.githubapp.com",
          "html_url": "https://github.com/apps/dependabot",
          "created_at": "2019-04-16T22:34:25Z",
          "updated_at": "2025-06-11T21:07:45Z",
          "permissions": {
            "actions": "write",
            "checks": "write",
            "contents": "write",
            "issues": "write",
            "members": "read",
            "metadata": "read",
            "pull_requests": "write",
            "statuses": "read",
            "vulnerability_alerts": "read",
            "workflows": "write"
          },
          "events": [
            "check_suite",
            "issues",
            "issue_comment",
            "label",
            "pull_request",
            "pull_request_review",
            "pull_request_review_comment",
            "repository"
          ]
        }
      }
    ],
    "review_comments": []
  },
  "6": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/issues/comments/2640875129",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/6#issuecomment-2640875129",
        "issue_url": "https://api.github.com/repos/mistralai/mistral-evals/issues/6",
        "id": 2640875129,
        "node_id": "IC_kwDOMxW0Oc6daI55",
        "user": {
          "login": "dependabot[bot]",
          "id": 49699333,
          "node_id": "MDM6Qm90NDk2OTkzMzM=",
          "avatar_url": "https://avatars.githubusercontent.com/in/29110?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dependabot%5Bbot%5D",
          "html_url": "https://github.com/apps/dependabot",
          "followers_url": "https://api.github.com/users/dependabot%5Bbot%5D/followers",
          "following_url": "https://api.github.com/users/dependabot%5Bbot%5D/following{/other_user}",
          "gists_url": "https://api.github.com/users/dependabot%5Bbot%5D/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/dependabot%5Bbot%5D/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/dependabot%5Bbot%5D/subscriptions",
          "organizations_url": "https://api.github.com/users/dependabot%5Bbot%5D/orgs",
          "repos_url": "https://api.github.com/users/dependabot%5Bbot%5D/repos",
          "events_url": "https://api.github.com/users/dependabot%5Bbot%5D/events{/privacy}",
          "received_events_url": "https://api.github.com/users/dependabot%5Bbot%5D/received_events",
          "type": "Bot",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2025-02-06T20:01:45Z",
        "updated_at": "2025-02-06T20:01:45Z",
        "author_association": "NONE",
        "body": "Superseded by #7.",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/issues/comments/2640875129/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": {
          "id": 29110,
          "client_id": "Iv1.4f9a6346434f815e",
          "slug": "dependabot",
          "node_id": "MDM6QXBwMjkxMTA=",
          "owner": {
            "login": "github",
            "id": 9919,
            "node_id": "MDEyOk9yZ2FuaXphdGlvbjk5MTk=",
            "avatar_url": "https://avatars.githubusercontent.com/u/9919?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/github",
            "html_url": "https://github.com/github",
            "followers_url": "https://api.github.com/users/github/followers",
            "following_url": "https://api.github.com/users/github/following{/other_user}",
            "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/github/subscriptions",
            "organizations_url": "https://api.github.com/users/github/orgs",
            "repos_url": "https://api.github.com/users/github/repos",
            "events_url": "https://api.github.com/users/github/events{/privacy}",
            "received_events_url": "https://api.github.com/users/github/received_events",
            "type": "Organization",
            "user_view_type": "public",
            "site_admin": false
          },
          "name": "Dependabot",
          "description": "GitHub Dependabot",
          "external_url": "https://dependabot-api.githubapp.com",
          "html_url": "https://github.com/apps/dependabot",
          "created_at": "2019-04-16T22:34:25Z",
          "updated_at": "2025-06-11T21:07:45Z",
          "permissions": {
            "actions": "write",
            "checks": "write",
            "contents": "write",
            "issues": "write",
            "members": "read",
            "metadata": "read",
            "pull_requests": "write",
            "statuses": "read",
            "vulnerability_alerts": "read",
            "workflows": "write"
          },
          "events": [
            "check_suite",
            "issues",
            "issue_comment",
            "label",
            "pull_request",
            "pull_request_review",
            "pull_request_review_comment",
            "repository"
          ]
        }
      }
    ],
    "review_comments": []
  },
  "4": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/issues/comments/2408277493",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/4#issuecomment-2408277493",
        "issue_url": "https://api.github.com/repos/mistralai/mistral-evals/issues/4",
        "id": 2408277493,
        "node_id": "IC_kwDOMxW0Oc6Pi2X1",
        "user": {
          "login": "sohamghosh121",
          "id": 2398819,
          "node_id": "MDQ6VXNlcjIzOTg4MTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2398819?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sohamghosh121",
          "html_url": "https://github.com/sohamghosh121",
          "followers_url": "https://api.github.com/users/sohamghosh121/followers",
          "following_url": "https://api.github.com/users/sohamghosh121/following{/other_user}",
          "gists_url": "https://api.github.com/users/sohamghosh121/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sohamghosh121/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sohamghosh121/subscriptions",
          "organizations_url": "https://api.github.com/users/sohamghosh121/orgs",
          "repos_url": "https://api.github.com/users/sohamghosh121/repos",
          "events_url": "https://api.github.com/users/sohamghosh121/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sohamghosh121/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-10-12T00:57:05Z",
        "updated_at": "2024-10-12T00:57:05Z",
        "author_association": "CONTRIBUTOR",
        "body": "Thank you!",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/issues/comments/2408277493/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": []
  },
  "3": {
    "issue_comments": [],
    "review_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1780691542",
        "pull_request_review_id": 2336805565,
        "id": 1780691542,
        "node_id": "PRRC_kwDOMxW0Oc5qIzJW",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+import json\n+from pathlib import Path\n+from typing import Any, Callable\n+\n+import fire\n+from eval.models import get_vllm_model_fn\n+from eval.tasks import get_task\n+\n+\n+def evaluate(\n+    model_fn: Callable[[dict[str, Any]], str],",
        "path": "eval/run.py",
        "commit_id": "e3ba8c41a5a7790ab6ff25d098c10cd47090a05f",
        "original_commit_id": "c26a89f4ee719b79c2da28c326d041296c3298e2",
        "user": {
          "login": "patrickvonplaten",
          "id": 23423619,
          "node_id": "MDQ6VXNlcjIzNDIzNjE5",
          "avatar_url": "https://avatars.githubusercontent.com/u/23423619?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/patrickvonplaten",
          "html_url": "https://github.com/patrickvonplaten",
          "followers_url": "https://api.github.com/users/patrickvonplaten/followers",
          "following_url": "https://api.github.com/users/patrickvonplaten/following{/other_user}",
          "gists_url": "https://api.github.com/users/patrickvonplaten/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/patrickvonplaten/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/patrickvonplaten/subscriptions",
          "organizations_url": "https://api.github.com/users/patrickvonplaten/orgs",
          "repos_url": "https://api.github.com/users/patrickvonplaten/repos",
          "events_url": "https://api.github.com/users/patrickvonplaten/events{/privacy}",
          "received_events_url": "https://api.github.com/users/patrickvonplaten/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Think it would be a bit cleaner to make this a model class that has a `__call__` function, *e.g.*:\r\n\r\n```py\r\nclass EvalModel:\r\n\r\n    def __init__(self, model_name: str, url: str):\r\n        self.model_name = model_name\r\n        self.url = url\r\n        \r\n        _wait_till_healthy(url)\r\n\r\n     def __call__(request: ChatCompletionRequest):\r\n         # copy functionality from model_fn\r\n```",
        "created_at": "2024-09-30T08:53:21Z",
        "updated_at": "2024-09-30T08:53:21Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1780691542",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1780691542"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1780691542"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1780691542/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 11,
        "side": "RIGHT",
        "original_position": 11,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1780692436",
        "pull_request_review_id": 2336807026,
        "id": 1780692436,
        "node_id": "PRRC_kwDOMxW0Oc5qIzXU",
        "diff_hunk": "@@ -0,0 +1,116 @@\n+import base64\n+import copy\n+import json\n+import io\n+import re\n+import time\n+from typing import Any, Callable\n+\n+import requests\n+\n+\n+def _wait_till_healthy(url) -> bool:\n+    base_url = url\n+    # wait for server to be ready\n+    assert base_url is not None\n+    match = re.match(r\"^http.*:\\d+$\", base_url)\n+    assert match is not None, base_url\n+\n+    health_endpoint = f\"{base_url}/health\"\n+    timeout = 120\n+    t0 = time.time()\n+    print(f\"Waiting for VLLM server to come online at {health_endpoint} ...\")\n+    print(f\"Timeout is {timeout}s\")\n+    while time.time() - t0 < timeout:\n+        print(f\"Waiting for server ({int(time.time() - t0)}s) ...\")\n+\n+        # Query the endpoint\n+        try:\n+            req = requests.get(health_endpoint)\n+            print(\"Server is up!\")\n+        except Exception:\n+            # Ignore exception\n+            pass\n+        else:\n+            if (\n+                req.status_code == 200\n+                and req.content == b\"\"\n+                or req.json() == {\"status\": \"OK\"}\n+            ):\n+                return True\n+\n+        # Backoff\n+        time.sleep(5)\n+\n+    raise RuntimeError(\n+        f\"Server not up in {int(timeout / 60)} minutes, something is wrong\"\n+    )\n+\n+\n+def _emplace_image(ccr: dict[str, Any]):\n+    \"\"\"Replaces image message with base64 encoded image.\"\"\"\n+    ccr = copy.deepcopy(ccr)\n+    for m in ccr[\"messages\"]:\n+        if isinstance(m[\"content\"], list):\n+            for c in m[\"content\"]:\n+                if c[\"type\"] == \"image\":\n+                    c[\"type\"] = \"image_url\"\n+                    image = c.pop(\"image\")\n+                    stream = io.BytesIO()\n+                    im_format = image.format or \"PNG\"\n+                    image.save(stream, format=im_format)\n+                    im_b64 = base64.b64encode(stream.getvalue()).decode(\"ascii\")\n+                    c[\"image_url\"] = {\n+                        \"url\": f\"data:image/{im_format.lower()};base64,{im_b64}\"\n+                    }\n+    return ccr\n+\n+\n+def get_vllm_model_fn(model_name: str, url: str) -> Callable[[dict[str, Any]], str]:\n+    _wait_till_healthy(url)\n+\n+    def model_fn(request_dict: dict[str, Any]) -> str:\n+        headers = {\n+            \"Content-Type\": \"application/json\",\n+            \"Accept\": \"application/json\",",
        "path": "eval/models.py",
        "commit_id": "e3ba8c41a5a7790ab6ff25d098c10cd47090a05f",
        "original_commit_id": "c26a89f4ee719b79c2da28c326d041296c3298e2",
        "user": {
          "login": "patrickvonplaten",
          "id": 23423619,
          "node_id": "MDQ6VXNlcjIzNDIzNjE5",
          "avatar_url": "https://avatars.githubusercontent.com/u/23423619?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/patrickvonplaten",
          "html_url": "https://github.com/patrickvonplaten",
          "followers_url": "https://api.github.com/users/patrickvonplaten/followers",
          "following_url": "https://api.github.com/users/patrickvonplaten/following{/other_user}",
          "gists_url": "https://api.github.com/users/patrickvonplaten/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/patrickvonplaten/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/patrickvonplaten/subscriptions",
          "organizations_url": "https://api.github.com/users/patrickvonplaten/orgs",
          "repos_url": "https://api.github.com/users/patrickvonplaten/repos",
          "events_url": "https://api.github.com/users/patrickvonplaten/events{/privacy}",
          "received_events_url": "https://api.github.com/users/patrickvonplaten/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "```suggestion\r\ndef get_vllm_model_fn(model_name: str, url: str) -> Callable[[dict[str, Any]], str]:\r\n    _wait_till_healthy(url)\r\n\r\n    def model_fn(request_dict: dict[str, Any]) -> str:\r\n        headers = {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Accept\": \"application/json\",\r\n```\r\n\r\nwould put all of this in a `EvalModel` class: https://github.com/mistralai/mistral-evals/pull/3/files#r1780691542",
        "created_at": "2024-09-30T08:53:56Z",
        "updated_at": "2024-09-30T08:53:56Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1780692436",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1780692436"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1780692436"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1780692436/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": 69,
        "start_side": "RIGHT",
        "line": null,
        "original_line": 75,
        "side": "RIGHT",
        "original_position": 75,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1781530807",
        "pull_request_review_id": 2338233189,
        "id": 1781530807,
        "node_id": "PRRC_kwDOMxW0Oc5qMAC3",
        "diff_hunk": "@@ -0,0 +1,116 @@\n+import base64\n+import copy\n+import json\n+import io\n+import re\n+import time\n+from typing import Any, Callable\n+\n+import requests\n+\n+\n+def _wait_till_healthy(url) -> bool:\n+    base_url = url\n+    # wait for server to be ready\n+    assert base_url is not None\n+    match = re.match(r\"^http.*:\\d+$\", base_url)\n+    assert match is not None, base_url\n+\n+    health_endpoint = f\"{base_url}/health\"\n+    timeout = 120\n+    t0 = time.time()\n+    print(f\"Waiting for VLLM server to come online at {health_endpoint} ...\")\n+    print(f\"Timeout is {timeout}s\")\n+    while time.time() - t0 < timeout:\n+        print(f\"Waiting for server ({int(time.time() - t0)}s) ...\")\n+\n+        # Query the endpoint\n+        try:\n+            req = requests.get(health_endpoint)\n+            print(\"Server is up!\")\n+        except Exception:\n+            # Ignore exception\n+            pass\n+        else:\n+            if (\n+                req.status_code == 200\n+                and req.content == b\"\"\n+                or req.json() == {\"status\": \"OK\"}\n+            ):\n+                return True\n+\n+        # Backoff\n+        time.sleep(5)\n+\n+    raise RuntimeError(\n+        f\"Server not up in {int(timeout / 60)} minutes, something is wrong\"\n+    )\n+\n+\n+def _emplace_image(ccr: dict[str, Any]):\n+    \"\"\"Replaces image message with base64 encoded image.\"\"\"\n+    ccr = copy.deepcopy(ccr)\n+    for m in ccr[\"messages\"]:\n+        if isinstance(m[\"content\"], list):\n+            for c in m[\"content\"]:\n+                if c[\"type\"] == \"image\":\n+                    c[\"type\"] = \"image_url\"\n+                    image = c.pop(\"image\")\n+                    stream = io.BytesIO()\n+                    im_format = image.format or \"PNG\"\n+                    image.save(stream, format=im_format)\n+                    im_b64 = base64.b64encode(stream.getvalue()).decode(\"ascii\")\n+                    c[\"image_url\"] = {\n+                        \"url\": f\"data:image/{im_format.lower()};base64,{im_b64}\"\n+                    }\n+    return ccr\n+\n+\n+def get_vllm_model_fn(model_name: str, url: str) -> Callable[[dict[str, Any]], str]:\n+    _wait_till_healthy(url)\n+\n+    def model_fn(request_dict: dict[str, Any]) -> str:\n+        headers = {\n+            \"Content-Type\": \"application/json\",\n+            \"Accept\": \"application/json\",",
        "path": "eval/models.py",
        "commit_id": "e3ba8c41a5a7790ab6ff25d098c10cd47090a05f",
        "original_commit_id": "c26a89f4ee719b79c2da28c326d041296c3298e2",
        "user": {
          "login": "sohamghosh121",
          "id": 2398819,
          "node_id": "MDQ6VXNlcjIzOTg4MTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2398819?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sohamghosh121",
          "html_url": "https://github.com/sohamghosh121",
          "followers_url": "https://api.github.com/users/sohamghosh121/followers",
          "following_url": "https://api.github.com/users/sohamghosh121/following{/other_user}",
          "gists_url": "https://api.github.com/users/sohamghosh121/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sohamghosh121/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sohamghosh121/subscriptions",
          "organizations_url": "https://api.github.com/users/sohamghosh121/orgs",
          "repos_url": "https://api.github.com/users/sohamghosh121/repos",
          "events_url": "https://api.github.com/users/sohamghosh121/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sohamghosh121/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "done!",
        "created_at": "2024-09-30T17:43:42Z",
        "updated_at": "2024-09-30T17:43:43Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1781530807",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1781530807"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1781530807"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1781530807/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": 69,
        "start_side": "RIGHT",
        "line": null,
        "original_line": 75,
        "side": "RIGHT",
        "in_reply_to_id": 1780692436,
        "original_position": 75,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1781531256",
        "pull_request_review_id": 2338235130,
        "id": 1781531256,
        "node_id": "PRRC_kwDOMxW0Oc5qMAJ4",
        "diff_hunk": "@@ -0,0 +1,67 @@\n+import json\n+from pathlib import Path\n+from typing import Any, Callable\n+\n+import fire\n+from eval.models import get_vllm_model_fn\n+from eval.tasks import get_task\n+\n+\n+def evaluate(\n+    model_fn: Callable[[dict[str, Any]], str],",
        "path": "eval/run.py",
        "commit_id": "e3ba8c41a5a7790ab6ff25d098c10cd47090a05f",
        "original_commit_id": "c26a89f4ee719b79c2da28c326d041296c3298e2",
        "user": {
          "login": "sohamghosh121",
          "id": 2398819,
          "node_id": "MDQ6VXNlcjIzOTg4MTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2398819?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sohamghosh121",
          "html_url": "https://github.com/sohamghosh121",
          "followers_url": "https://api.github.com/users/sohamghosh121/followers",
          "following_url": "https://api.github.com/users/sohamghosh121/following{/other_user}",
          "gists_url": "https://api.github.com/users/sohamghosh121/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sohamghosh121/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sohamghosh121/subscriptions",
          "organizations_url": "https://api.github.com/users/sohamghosh121/orgs",
          "repos_url": "https://api.github.com/users/sohamghosh121/repos",
          "events_url": "https://api.github.com/users/sohamghosh121/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sohamghosh121/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "done!",
        "created_at": "2024-09-30T17:44:03Z",
        "updated_at": "2024-09-30T17:44:03Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1781531256",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1781531256"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1781531256"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1781531256/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 11,
        "side": "RIGHT",
        "in_reply_to_id": 1780691542,
        "original_position": 11,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1781963947",
        "pull_request_review_id": 2338895046,
        "id": 1781963947,
        "node_id": "PRRC_kwDOMxW0Oc5qNpyr",
        "diff_hunk": "@@ -1,6 +1,6 @@\n # Mistral Evals\n \n-This repository contains code to run evals released by Mistral AI.\n+This repository contains code to run evals released by Mistral AI as well as standardized prompts, parsing and metrics computation for popular academic benchmarks.\n \n ## Installation",
        "path": "README.md",
        "commit_id": "e3ba8c41a5a7790ab6ff25d098c10cd47090a05f",
        "original_commit_id": "c26a89f4ee719b79c2da28c326d041296c3298e2",
        "user": {
          "login": "devendrachaplot",
          "id": 1102621,
          "node_id": "MDQ6VXNlcjExMDI2MjE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1102621?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/devendrachaplot",
          "html_url": "https://github.com/devendrachaplot",
          "followers_url": "https://api.github.com/users/devendrachaplot/followers",
          "following_url": "https://api.github.com/users/devendrachaplot/following{/other_user}",
          "gists_url": "https://api.github.com/users/devendrachaplot/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/devendrachaplot/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/devendrachaplot/subscriptions",
          "organizations_url": "https://api.github.com/users/devendrachaplot/orgs",
          "repos_url": "https://api.github.com/users/devendrachaplot/repos",
          "events_url": "https://api.github.com/users/devendrachaplot/events{/privacy}",
          "received_events_url": "https://api.github.com/users/devendrachaplot/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Can we add a pointer on how to install vllm?",
        "created_at": "2024-09-30T23:57:21Z",
        "updated_at": "2024-09-30T23:57:21Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1781963947",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1781963947"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1781963947"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1781963947/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": 5,
        "original_line": 5,
        "side": "RIGHT",
        "original_position": 6,
        "position": 6,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1781964328",
        "pull_request_review_id": 2338895567,
        "id": 1781964328,
        "node_id": "PRRC_kwDOMxW0Oc5qNp4o",
        "diff_hunk": "",
        "path": "README.md",
        "commit_id": "71ae8a113704f74c9258b9835807a7264b80f991",
        "original_commit_id": "c26a89f4ee719b79c2da28c326d041296c3298e2",
        "user": {
          "login": "devendrachaplot",
          "id": 1102621,
          "node_id": "MDQ6VXNlcjExMDI2MjE=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1102621?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/devendrachaplot",
          "html_url": "https://github.com/devendrachaplot",
          "followers_url": "https://api.github.com/users/devendrachaplot/followers",
          "following_url": "https://api.github.com/users/devendrachaplot/following{/other_user}",
          "gists_url": "https://api.github.com/users/devendrachaplot/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/devendrachaplot/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/devendrachaplot/subscriptions",
          "organizations_url": "https://api.github.com/users/devendrachaplot/orgs",
          "repos_url": "https://api.github.com/users/devendrachaplot/repos",
          "events_url": "https://api.github.com/users/devendrachaplot/events{/privacy}",
          "received_events_url": "https://api.github.com/users/devendrachaplot/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Need to update README to include instructions on running all evals.",
        "created_at": "2024-09-30T23:58:09Z",
        "updated_at": "2024-09-30T23:58:09Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1781964328",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1781964328"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1781964328"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1781964328/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": 1,
        "original_line": 1,
        "side": "RIGHT",
        "original_position": 1,
        "position": 1,
        "subject_type": "file"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1782019709",
        "pull_request_review_id": 2338977624,
        "id": 1782019709,
        "node_id": "PRRC_kwDOMxW0Oc5qN3Z9",
        "diff_hunk": "@@ -0,0 +1,39 @@\n+from typing import Any\n+\n+from datasets import load_dataset\n+from eval.metrics import ANLS, Metric\n+from eval.task import HuggingFaceEval, Interaction\n+\n+PROMPT = \"Answer the question using a single word or phrase.\"\n+\n+\n+class DocVQA(HuggingFaceEval):\n+    dataset_name = \"lmms-lab/DocVQA\"\n+    dataset_split = \"validation\"\n+    # DocVQA needs an extra config name.",
        "path": "eval/tasks/docvqa.py",
        "commit_id": "e3ba8c41a5a7790ab6ff25d098c10cd47090a05f",
        "original_commit_id": "94160a0c05030a3f60be2612c20e7078b695403b",
        "user": {
          "login": "william-mistral",
          "id": 165010401,
          "node_id": "U_kgDOCdXb4Q",
          "avatar_url": "https://avatars.githubusercontent.com/u/165010401?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/william-mistral",
          "html_url": "https://github.com/william-mistral",
          "followers_url": "https://api.github.com/users/william-mistral/followers",
          "following_url": "https://api.github.com/users/william-mistral/following{/other_user}",
          "gists_url": "https://api.github.com/users/william-mistral/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/william-mistral/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/william-mistral/subscriptions",
          "organizations_url": "https://api.github.com/users/william-mistral/orgs",
          "repos_url": "https://api.github.com/users/william-mistral/repos",
          "events_url": "https://api.github.com/users/william-mistral/events{/privacy}",
          "received_events_url": "https://api.github.com/users/william-mistral/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "why does it need this extra name?",
        "created_at": "2024-10-01T01:55:17Z",
        "updated_at": "2024-10-01T01:59:32Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1782019709",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1782019709"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1782019709"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1782019709/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": 13,
        "original_line": 13,
        "side": "RIGHT",
        "original_position": 13,
        "position": 13,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1783250650",
        "pull_request_review_id": 2341004188,
        "id": 1783250650,
        "node_id": "PRRC_kwDOMxW0Oc5qSj7a",
        "diff_hunk": "@@ -0,0 +1,39 @@\n+from typing import Any\n+\n+from datasets import load_dataset\n+from eval.metrics import ANLS, Metric\n+from eval.task import HuggingFaceEval, Interaction\n+\n+PROMPT = \"Answer the question using a single word or phrase.\"\n+\n+\n+class DocVQA(HuggingFaceEval):\n+    dataset_name = \"lmms-lab/DocVQA\"\n+    dataset_split = \"validation\"\n+    # DocVQA needs an extra config name.",
        "path": "eval/tasks/docvqa.py",
        "commit_id": "e3ba8c41a5a7790ab6ff25d098c10cd47090a05f",
        "original_commit_id": "94160a0c05030a3f60be2612c20e7078b695403b",
        "user": {
          "login": "sohamghosh121",
          "id": 2398819,
          "node_id": "MDQ6VXNlcjIzOTg4MTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2398819?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sohamghosh121",
          "html_url": "https://github.com/sohamghosh121",
          "followers_url": "https://api.github.com/users/sohamghosh121/followers",
          "following_url": "https://api.github.com/users/sohamghosh121/following{/other_user}",
          "gists_url": "https://api.github.com/users/sohamghosh121/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sohamghosh121/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sohamghosh121/subscriptions",
          "organizations_url": "https://api.github.com/users/sohamghosh121/orgs",
          "repos_url": "https://api.github.com/users/sohamghosh121/repos",
          "events_url": "https://api.github.com/users/sohamghosh121/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sohamghosh121/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "I think because DocVQA on HF has subsets (DocVQA and InfoVQA). Attached a screenshot of error message if we don't include this extra arg\r\n<img width=\"610\" alt=\"Screenshot 2024-10-01 at 10 38 56\u202fAM\" src=\"https://github.com/user-attachments/assets/75b71a42-d060-45ad-b888-de8e152d33ff\">\r\n<img width=\"516\" alt=\"Screenshot 2024-10-01 at 10 39 04\u202fAM\" src=\"https://github.com/user-attachments/assets/b5489232-2de3-417b-9aa9-5c972665f333\">\r\n",
        "created_at": "2024-10-01T17:39:59Z",
        "updated_at": "2024-10-01T17:39:59Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1783250650",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1783250650"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1783250650"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1783250650/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": 13,
        "original_line": 13,
        "side": "RIGHT",
        "in_reply_to_id": 1782019709,
        "original_position": 13,
        "position": 13,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1783256984",
        "pull_request_review_id": 2341014865,
        "id": 1783256984,
        "node_id": "PRRC_kwDOMxW0Oc5qSleY",
        "diff_hunk": "@@ -1,6 +1,6 @@\n # Mistral Evals\n \n-This repository contains code to run evals released by Mistral AI.\n+This repository contains code to run evals released by Mistral AI as well as standardized prompts, parsing and metrics computation for popular academic benchmarks.\n \n ## Installation",
        "path": "README.md",
        "commit_id": "e3ba8c41a5a7790ab6ff25d098c10cd47090a05f",
        "original_commit_id": "c26a89f4ee719b79c2da28c326d041296c3298e2",
        "user": {
          "login": "sohamghosh121",
          "id": 2398819,
          "node_id": "MDQ6VXNlcjIzOTg4MTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2398819?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sohamghosh121",
          "html_url": "https://github.com/sohamghosh121",
          "followers_url": "https://api.github.com/users/sohamghosh121/followers",
          "following_url": "https://api.github.com/users/sohamghosh121/following{/other_user}",
          "gists_url": "https://api.github.com/users/sohamghosh121/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sohamghosh121/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sohamghosh121/subscriptions",
          "organizations_url": "https://api.github.com/users/sohamghosh121/orgs",
          "repos_url": "https://api.github.com/users/sohamghosh121/repos",
          "events_url": "https://api.github.com/users/sohamghosh121/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sohamghosh121/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Added a link to vLLM website. Is that enough?\r\n\r\nAlso a qn from William: do we want to give container instructions? In our [HF page](https://huggingface.co/mistralai/Pixtral-12B-2409) we simply ask for vllm upgrade to the correct version.",
        "created_at": "2024-10-01T17:45:36Z",
        "updated_at": "2024-10-01T17:45:36Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1783256984",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1783256984"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1783256984"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1783256984/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": 5,
        "original_line": 5,
        "side": "RIGHT",
        "in_reply_to_id": 1781963947,
        "original_position": 6,
        "position": 6,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1783273577",
        "pull_request_review_id": 2341042020,
        "id": 1783273577,
        "node_id": "PRRC_kwDOMxW0Oc5qSphp",
        "diff_hunk": "",
        "path": "README.md",
        "commit_id": "71ae8a113704f74c9258b9835807a7264b80f991",
        "original_commit_id": "c26a89f4ee719b79c2da28c326d041296c3298e2",
        "user": {
          "login": "sohamghosh121",
          "id": 2398819,
          "node_id": "MDQ6VXNlcjIzOTg4MTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2398819?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sohamghosh121",
          "html_url": "https://github.com/sohamghosh121",
          "followers_url": "https://api.github.com/users/sohamghosh121/followers",
          "following_url": "https://api.github.com/users/sohamghosh121/following{/other_user}",
          "gists_url": "https://api.github.com/users/sohamghosh121/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sohamghosh121/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sohamghosh121/subscriptions",
          "organizations_url": "https://api.github.com/users/sohamghosh121/orgs",
          "repos_url": "https://api.github.com/users/sohamghosh121/repos",
          "events_url": "https://api.github.com/users/sohamghosh121/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sohamghosh121/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Updated.",
        "created_at": "2024-10-01T17:59:11Z",
        "updated_at": "2024-10-01T17:59:11Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1783273577",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1783273577"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1783273577"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1783273577/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": 1,
        "original_line": 1,
        "side": "RIGHT",
        "in_reply_to_id": 1781964328,
        "original_position": 1,
        "position": 1,
        "subject_type": "file"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1786549736",
        "pull_request_review_id": 2346146629,
        "id": 1786549736,
        "node_id": "PRRC_kwDOMxW0Oc5qfJXo",
        "diff_hunk": "@@ -0,0 +1,312 @@\n+import re\n+import string\n+\n+\n+def _normalize_string(s):\n+    if (s.startswith('\"') and s.endswith('\"')) or (\n+        s.startswith(\"'\") and s.endswith(\"'\")\n+    ):\n+        return s[1:-1]\n+    return s\n+\n+\n+def _remove_end_punctuation(unnormalized_string: str) -> str:\n+    while (\n+        unnormalized_string\n+        and (\n+            unnormalized_string[-1] in string.punctuation\n+            or unnormalized_string[-1].isspace()\n+        )\n+        and unnormalized_string[-1] != \"%\"\n+    ):\n+        unnormalized_string = unnormalized_string[:-1]\n+    return unnormalized_string\n+\n+\n+class Metric:\n+    \"\"\"Base class for metrics.\"\"\"\n+\n+    @property\n+    def name(self) -> str:\n+        raise NotImplementedError\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        raise NotImplementedError\n+\n+\n+class VQAMatch(Metric):\n+    \"\"\"VQA match metric which gives partial score if less than 3 answers are matched.\"\"\"\n+\n+    @property\n+    def name(self) -> str:\n+        return \"vqa_match\"\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        if not isinstance(reference_answer, list):\n+            reference_answer = [reference_answer]\n+        normalize_response_text: str = _normalize_string(model_answer)\n+        matching_answers = [\n+            answer\n+            for answer in reference_answer\n+            if _normalize_string(answer) == normalize_response_text\n+        ]\n+        return min(1.0, float(len(matching_answers)) / 3)\n+\n+\n+class ANLS(Metric):\n+    @property\n+    def name(self) -> str:\n+        return \"anls\"\n+\n+    def _edit_distance_helper(self, s1: str, s2: str) -> float:\n+        if len(s1) > len(s2):\n+            s1, s2 = s2, s1\n+        distances = list(range(len(s1) + 1))\n+        for i2, c2 in enumerate(s2):\n+            distance_list = [i2 + 1]\n+            for i1, c1 in enumerate(s1):\n+                if c1 == c2:\n+                    distance_list.append(distances[i1])\n+                else:\n+                    distance_list.append(\n+                        1 + min((distances[i1], distances[i1 + 1], distance_list[-1]))\n+                    )\n+            distances = distance_list\n+        return distances[-1]\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        if not isinstance(reference_answer, list):\n+            reference_answer = [reference_answer]\n+\n+        model_answer = \" \".join(model_answer.strip().lower().split())\n+        model_answer = _remove_end_punctuation(model_answer)\n+\n+        min_value = float(\"inf\")\n+        for ref in reference_answer:\n+            # Post-processing: Normalize spaces and remove punctuations.\n+            ref = \" \".join(ref.strip().lower().split())\n+            ref = _remove_end_punctuation(ref)\n+\n+            # Compute edit distance\n+            dist = self._edit_distance_helper(ref, model_answer)\n+            length = max(len(ref), len(model_answer))\n+            value = 0.0 if length == 0 else float(dist) / float(length)\n+            if value < min_value:\n+                min_value = value\n+\n+        anls_threshold = 0.0\n+        output = 0.0 if 1 - min_value < anls_threshold else 1 - min_value\n+        return output\n+\n+\n+class RelaxedCorrectness(Metric):\n+    \"\"\"Relaxed correctness metrics.\n+\n+    The correctness tolerates certain error ratio defined by max_relative_change.\n+    See https://arxiv.org/pdf/2203.10244.pdf, end of section 5.1:\n+    \"Following Methani et al. (2020), we use a relaxed accuracy measure for the\n+    numeric answers to allow a minor inaccuracy that may result from the automatic\n+    data extraction process. We consider an answer to be correct if it is within\n+    5% of the gold answer. For non-numeric answers, we still need an exact match\n+    to consider an answer to be correct.\"\n+    \"\"\"\n+\n+    def _relaxed_correctness(\n+        self, prediction: str, targets: list[str], max_relative_change: float = 0.05\n+    ) -> float:\n+        def _to_float(text: str) -> tuple[float | None, bool]:\n+            text = text.strip()\n+            is_percent = text.endswith(\"%\")\n+            try:\n+                value = float(text.rstrip(\"%\"))\n+                return value, is_percent\n+            except ValueError:\n+                return None, False\n+\n+        def _is_letter(text: str) -> bool:\n+            return text.isalpha() and len(text) == 1\n+\n+        def _preprocess_text(text: str) -> str:\n+            if not any(char.isdigit() for char in text):\n+                return _normalize_string(text)\n+            else:\n+                return _remove_end_punctuation(text).replace(\",\", \"\").replace(\"$\", \"\")\n+\n+        def calculate_relative_change(prediction: float, target: float) -> float:\n+            return abs(prediction - target) / max(abs(target), 1e-10)\n+\n+        def _compare_numeric_values(\n+            prediction: float, target: float, max_relative_change: float\n+        ) -> float:\n+            relative_change = calculate_relative_change(prediction, target)\n+            return 1.0 if relative_change <= max_relative_change else 0.0\n+\n+        def _compare_text_values(prediction: str, target: str) -> float:\n+            return 1.0 if prediction.lower() == target.lower() else 0.0\n+\n+        def _to_decimal(value: float, is_percent: bool) -> float:\n+            return value / 100 if is_percent else value\n+\n+        def _compare_numeric_with_percent(\n+            prediction: float,\n+            prediction_is_percent: bool,\n+            target: float,\n+            target_is_percent: bool,\n+            max_relative_change: float,\n+        ) -> float:\n+            # Compare as-is\n+            value = _compare_numeric_values(prediction, target, max_relative_change)\n+\n+            # If not equal and one is percent, try other comparisons\n+            if value != 1.0 and (prediction_is_percent or target_is_percent):\n+                value = max(\n+                    value,\n+                    _compare_numeric_values(\n+                        _to_decimal(prediction, prediction_is_percent),\n+                        target,\n+                        max_relative_change,\n+                    ),\n+                    _compare_numeric_values(\n+                        prediction,\n+                        _to_decimal(target, target_is_percent),\n+                        max_relative_change,\n+                    ),\n+                )\n+            return value\n+\n+        prediction = _preprocess_text(prediction)\n+        prediction_float, prediction_is_percent = _to_float(prediction)\n+\n+        value_list = []\n+        for target in targets:\n+            target = _preprocess_text(target)\n+            target_float, target_is_percent = _to_float(target)\n+\n+            if prediction_float is not None and target_float is not None:\n+                # Compare as numeric values\n+                value = _compare_numeric_with_percent(\n+                    prediction_float,\n+                    prediction_is_percent,\n+                    target_float,\n+                    target_is_percent,\n+                    max_relative_change,\n+                )\n+            elif _is_letter(target) and len(prediction) > 0:\n+                # Compare as multiple choice options: take first letter from prediction\n+                value = 1.0 if prediction[0].lower() == target.lower() else 0.0\n+            else:\n+                # Compare as text values\n+                value = _compare_text_values(prediction, target)\n+\n+            value_list.append(value)\n+\n+        return max(value_list)\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        reference_answer = (\n+            reference_answer\n+            if isinstance(reference_answer, list)\n+            else [reference_answer]\n+        )\n+        return self._relaxed_correctness(model_answer, reference_answer)\n+\n+\n+class CoTRelaxedCorrectness(RelaxedCorrectness):",
        "path": "eval/metrics.py",
        "commit_id": "e3ba8c41a5a7790ab6ff25d098c10cd47090a05f",
        "original_commit_id": "12d30be764e59fea560ecc0d3c6b363b6e840009",
        "user": {
          "login": "sgvaze",
          "id": 33980832,
          "node_id": "MDQ6VXNlcjMzOTgwODMy",
          "avatar_url": "https://avatars.githubusercontent.com/u/33980832?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sgvaze",
          "html_url": "https://github.com/sgvaze",
          "followers_url": "https://api.github.com/users/sgvaze/followers",
          "following_url": "https://api.github.com/users/sgvaze/following{/other_user}",
          "gists_url": "https://api.github.com/users/sgvaze/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sgvaze/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sgvaze/subscriptions",
          "organizations_url": "https://api.github.com/users/sgvaze/orgs",
          "repos_url": "https://api.github.com/users/sgvaze/repos",
          "events_url": "https://api.github.com/users/sgvaze/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sgvaze/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Can we rename this \"ExplicitPromptCorrectness\" or something similar for clarity and consistency?",
        "created_at": "2024-10-03T16:55:49Z",
        "updated_at": "2024-10-03T16:56:24Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1786549736",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1786549736"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1786549736"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1786549736/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 214,
        "side": "RIGHT",
        "original_position": 214,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1786550250",
        "pull_request_review_id": 2346146629,
        "id": 1786550250,
        "node_id": "PRRC_kwDOMxW0Oc5qfJfq",
        "diff_hunk": "@@ -0,0 +1,312 @@\n+import re\n+import string\n+\n+\n+def _normalize_string(s):\n+    if (s.startswith('\"') and s.endswith('\"')) or (\n+        s.startswith(\"'\") and s.endswith(\"'\")\n+    ):\n+        return s[1:-1]\n+    return s\n+\n+\n+def _remove_end_punctuation(unnormalized_string: str) -> str:\n+    while (\n+        unnormalized_string\n+        and (\n+            unnormalized_string[-1] in string.punctuation\n+            or unnormalized_string[-1].isspace()\n+        )\n+        and unnormalized_string[-1] != \"%\"\n+    ):\n+        unnormalized_string = unnormalized_string[:-1]\n+    return unnormalized_string\n+\n+\n+class Metric:\n+    \"\"\"Base class for metrics.\"\"\"\n+\n+    @property\n+    def name(self) -> str:\n+        raise NotImplementedError\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        raise NotImplementedError\n+\n+\n+class VQAMatch(Metric):\n+    \"\"\"VQA match metric which gives partial score if less than 3 answers are matched.\"\"\"\n+\n+    @property\n+    def name(self) -> str:\n+        return \"vqa_match\"\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        if not isinstance(reference_answer, list):\n+            reference_answer = [reference_answer]\n+        normalize_response_text: str = _normalize_string(model_answer)\n+        matching_answers = [\n+            answer\n+            for answer in reference_answer\n+            if _normalize_string(answer) == normalize_response_text\n+        ]\n+        return min(1.0, float(len(matching_answers)) / 3)\n+\n+\n+class ANLS(Metric):\n+    @property\n+    def name(self) -> str:\n+        return \"anls\"\n+\n+    def _edit_distance_helper(self, s1: str, s2: str) -> float:\n+        if len(s1) > len(s2):\n+            s1, s2 = s2, s1\n+        distances = list(range(len(s1) + 1))\n+        for i2, c2 in enumerate(s2):\n+            distance_list = [i2 + 1]\n+            for i1, c1 in enumerate(s1):\n+                if c1 == c2:\n+                    distance_list.append(distances[i1])\n+                else:\n+                    distance_list.append(\n+                        1 + min((distances[i1], distances[i1 + 1], distance_list[-1]))\n+                    )\n+            distances = distance_list\n+        return distances[-1]\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        if not isinstance(reference_answer, list):\n+            reference_answer = [reference_answer]\n+\n+        model_answer = \" \".join(model_answer.strip().lower().split())\n+        model_answer = _remove_end_punctuation(model_answer)\n+\n+        min_value = float(\"inf\")\n+        for ref in reference_answer:\n+            # Post-processing: Normalize spaces and remove punctuations.\n+            ref = \" \".join(ref.strip().lower().split())\n+            ref = _remove_end_punctuation(ref)\n+\n+            # Compute edit distance\n+            dist = self._edit_distance_helper(ref, model_answer)\n+            length = max(len(ref), len(model_answer))\n+            value = 0.0 if length == 0 else float(dist) / float(length)\n+            if value < min_value:\n+                min_value = value\n+\n+        anls_threshold = 0.0\n+        output = 0.0 if 1 - min_value < anls_threshold else 1 - min_value\n+        return output\n+\n+\n+class RelaxedCorrectness(Metric):\n+    \"\"\"Relaxed correctness metrics.\n+\n+    The correctness tolerates certain error ratio defined by max_relative_change.\n+    See https://arxiv.org/pdf/2203.10244.pdf, end of section 5.1:\n+    \"Following Methani et al. (2020), we use a relaxed accuracy measure for the\n+    numeric answers to allow a minor inaccuracy that may result from the automatic\n+    data extraction process. We consider an answer to be correct if it is within\n+    5% of the gold answer. For non-numeric answers, we still need an exact match\n+    to consider an answer to be correct.\"\n+    \"\"\"\n+\n+    def _relaxed_correctness(\n+        self, prediction: str, targets: list[str], max_relative_change: float = 0.05\n+    ) -> float:\n+        def _to_float(text: str) -> tuple[float | None, bool]:\n+            text = text.strip()\n+            is_percent = text.endswith(\"%\")\n+            try:\n+                value = float(text.rstrip(\"%\"))\n+                return value, is_percent\n+            except ValueError:\n+                return None, False\n+\n+        def _is_letter(text: str) -> bool:\n+            return text.isalpha() and len(text) == 1\n+\n+        def _preprocess_text(text: str) -> str:\n+            if not any(char.isdigit() for char in text):\n+                return _normalize_string(text)\n+            else:\n+                return _remove_end_punctuation(text).replace(\",\", \"\").replace(\"$\", \"\")\n+\n+        def calculate_relative_change(prediction: float, target: float) -> float:\n+            return abs(prediction - target) / max(abs(target), 1e-10)\n+\n+        def _compare_numeric_values(\n+            prediction: float, target: float, max_relative_change: float\n+        ) -> float:\n+            relative_change = calculate_relative_change(prediction, target)\n+            return 1.0 if relative_change <= max_relative_change else 0.0\n+\n+        def _compare_text_values(prediction: str, target: str) -> float:\n+            return 1.0 if prediction.lower() == target.lower() else 0.0\n+\n+        def _to_decimal(value: float, is_percent: bool) -> float:\n+            return value / 100 if is_percent else value\n+\n+        def _compare_numeric_with_percent(\n+            prediction: float,\n+            prediction_is_percent: bool,\n+            target: float,\n+            target_is_percent: bool,\n+            max_relative_change: float,\n+        ) -> float:\n+            # Compare as-is\n+            value = _compare_numeric_values(prediction, target, max_relative_change)\n+\n+            # If not equal and one is percent, try other comparisons\n+            if value != 1.0 and (prediction_is_percent or target_is_percent):\n+                value = max(\n+                    value,\n+                    _compare_numeric_values(\n+                        _to_decimal(prediction, prediction_is_percent),\n+                        target,\n+                        max_relative_change,\n+                    ),\n+                    _compare_numeric_values(\n+                        prediction,\n+                        _to_decimal(target, target_is_percent),\n+                        max_relative_change,\n+                    ),\n+                )\n+            return value\n+\n+        prediction = _preprocess_text(prediction)\n+        prediction_float, prediction_is_percent = _to_float(prediction)\n+\n+        value_list = []\n+        for target in targets:\n+            target = _preprocess_text(target)\n+            target_float, target_is_percent = _to_float(target)\n+\n+            if prediction_float is not None and target_float is not None:\n+                # Compare as numeric values\n+                value = _compare_numeric_with_percent(\n+                    prediction_float,\n+                    prediction_is_percent,\n+                    target_float,\n+                    target_is_percent,\n+                    max_relative_change,\n+                )\n+            elif _is_letter(target) and len(prediction) > 0:\n+                # Compare as multiple choice options: take first letter from prediction\n+                value = 1.0 if prediction[0].lower() == target.lower() else 0.0\n+            else:\n+                # Compare as text values\n+                value = _compare_text_values(prediction, target)\n+\n+            value_list.append(value)\n+\n+        return max(value_list)\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        reference_answer = (\n+            reference_answer\n+            if isinstance(reference_answer, list)\n+            else [reference_answer]\n+        )\n+        return self._relaxed_correctness(model_answer, reference_answer)\n+\n+\n+class CoTRelaxedCorrectness(RelaxedCorrectness):\n+    \"\"\"Relaxed correctness for CoT-style outputs.\"\"\"\n+\n+    @property\n+    def name(self) -> str:\n+        return \"cot_relaxed_correctness\"",
        "path": "eval/metrics.py",
        "commit_id": "e3ba8c41a5a7790ab6ff25d098c10cd47090a05f",
        "original_commit_id": "12d30be764e59fea560ecc0d3c6b363b6e840009",
        "user": {
          "login": "sgvaze",
          "id": 33980832,
          "node_id": "MDQ6VXNlcjMzOTgwODMy",
          "avatar_url": "https://avatars.githubusercontent.com/u/33980832?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sgvaze",
          "html_url": "https://github.com/sgvaze",
          "followers_url": "https://api.github.com/users/sgvaze/followers",
          "following_url": "https://api.github.com/users/sgvaze/following{/other_user}",
          "gists_url": "https://api.github.com/users/sgvaze/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sgvaze/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sgvaze/subscriptions",
          "organizations_url": "https://api.github.com/users/sgvaze/orgs",
          "repos_url": "https://api.github.com/users/sgvaze/repos",
          "events_url": "https://api.github.com/users/sgvaze/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sgvaze/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "As above",
        "created_at": "2024-10-03T16:56:17Z",
        "updated_at": "2024-10-03T16:56:24Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1786550250",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1786550250"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1786550250"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1786550250/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 219,
        "side": "RIGHT",
        "original_position": 219,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1786569013",
        "pull_request_review_id": 2346181273,
        "id": 1786569013,
        "node_id": "PRRC_kwDOMxW0Oc5qfOE1",
        "diff_hunk": "@@ -0,0 +1,312 @@\n+import re\n+import string\n+\n+\n+def _normalize_string(s):\n+    if (s.startswith('\"') and s.endswith('\"')) or (\n+        s.startswith(\"'\") and s.endswith(\"'\")\n+    ):\n+        return s[1:-1]\n+    return s\n+\n+\n+def _remove_end_punctuation(unnormalized_string: str) -> str:\n+    while (\n+        unnormalized_string\n+        and (\n+            unnormalized_string[-1] in string.punctuation\n+            or unnormalized_string[-1].isspace()\n+        )\n+        and unnormalized_string[-1] != \"%\"\n+    ):\n+        unnormalized_string = unnormalized_string[:-1]\n+    return unnormalized_string\n+\n+\n+class Metric:\n+    \"\"\"Base class for metrics.\"\"\"\n+\n+    @property\n+    def name(self) -> str:\n+        raise NotImplementedError\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        raise NotImplementedError\n+\n+\n+class VQAMatch(Metric):\n+    \"\"\"VQA match metric which gives partial score if less than 3 answers are matched.\"\"\"\n+\n+    @property\n+    def name(self) -> str:\n+        return \"vqa_match\"\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        if not isinstance(reference_answer, list):\n+            reference_answer = [reference_answer]\n+        normalize_response_text: str = _normalize_string(model_answer)\n+        matching_answers = [\n+            answer\n+            for answer in reference_answer\n+            if _normalize_string(answer) == normalize_response_text\n+        ]\n+        return min(1.0, float(len(matching_answers)) / 3)\n+\n+\n+class ANLS(Metric):\n+    @property\n+    def name(self) -> str:\n+        return \"anls\"\n+\n+    def _edit_distance_helper(self, s1: str, s2: str) -> float:\n+        if len(s1) > len(s2):\n+            s1, s2 = s2, s1\n+        distances = list(range(len(s1) + 1))\n+        for i2, c2 in enumerate(s2):\n+            distance_list = [i2 + 1]\n+            for i1, c1 in enumerate(s1):\n+                if c1 == c2:\n+                    distance_list.append(distances[i1])\n+                else:\n+                    distance_list.append(\n+                        1 + min((distances[i1], distances[i1 + 1], distance_list[-1]))\n+                    )\n+            distances = distance_list\n+        return distances[-1]\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        if not isinstance(reference_answer, list):\n+            reference_answer = [reference_answer]\n+\n+        model_answer = \" \".join(model_answer.strip().lower().split())\n+        model_answer = _remove_end_punctuation(model_answer)\n+\n+        min_value = float(\"inf\")\n+        for ref in reference_answer:\n+            # Post-processing: Normalize spaces and remove punctuations.\n+            ref = \" \".join(ref.strip().lower().split())\n+            ref = _remove_end_punctuation(ref)\n+\n+            # Compute edit distance\n+            dist = self._edit_distance_helper(ref, model_answer)\n+            length = max(len(ref), len(model_answer))\n+            value = 0.0 if length == 0 else float(dist) / float(length)\n+            if value < min_value:\n+                min_value = value\n+\n+        anls_threshold = 0.0\n+        output = 0.0 if 1 - min_value < anls_threshold else 1 - min_value\n+        return output\n+\n+\n+class RelaxedCorrectness(Metric):\n+    \"\"\"Relaxed correctness metrics.\n+\n+    The correctness tolerates certain error ratio defined by max_relative_change.\n+    See https://arxiv.org/pdf/2203.10244.pdf, end of section 5.1:\n+    \"Following Methani et al. (2020), we use a relaxed accuracy measure for the\n+    numeric answers to allow a minor inaccuracy that may result from the automatic\n+    data extraction process. We consider an answer to be correct if it is within\n+    5% of the gold answer. For non-numeric answers, we still need an exact match\n+    to consider an answer to be correct.\"\n+    \"\"\"\n+\n+    def _relaxed_correctness(\n+        self, prediction: str, targets: list[str], max_relative_change: float = 0.05\n+    ) -> float:\n+        def _to_float(text: str) -> tuple[float | None, bool]:\n+            text = text.strip()\n+            is_percent = text.endswith(\"%\")\n+            try:\n+                value = float(text.rstrip(\"%\"))\n+                return value, is_percent\n+            except ValueError:\n+                return None, False\n+\n+        def _is_letter(text: str) -> bool:\n+            return text.isalpha() and len(text) == 1\n+\n+        def _preprocess_text(text: str) -> str:\n+            if not any(char.isdigit() for char in text):\n+                return _normalize_string(text)\n+            else:\n+                return _remove_end_punctuation(text).replace(\",\", \"\").replace(\"$\", \"\")\n+\n+        def calculate_relative_change(prediction: float, target: float) -> float:\n+            return abs(prediction - target) / max(abs(target), 1e-10)\n+\n+        def _compare_numeric_values(\n+            prediction: float, target: float, max_relative_change: float\n+        ) -> float:\n+            relative_change = calculate_relative_change(prediction, target)\n+            return 1.0 if relative_change <= max_relative_change else 0.0\n+\n+        def _compare_text_values(prediction: str, target: str) -> float:\n+            return 1.0 if prediction.lower() == target.lower() else 0.0\n+\n+        def _to_decimal(value: float, is_percent: bool) -> float:\n+            return value / 100 if is_percent else value\n+\n+        def _compare_numeric_with_percent(\n+            prediction: float,\n+            prediction_is_percent: bool,\n+            target: float,\n+            target_is_percent: bool,\n+            max_relative_change: float,\n+        ) -> float:\n+            # Compare as-is\n+            value = _compare_numeric_values(prediction, target, max_relative_change)\n+\n+            # If not equal and one is percent, try other comparisons\n+            if value != 1.0 and (prediction_is_percent or target_is_percent):\n+                value = max(\n+                    value,\n+                    _compare_numeric_values(\n+                        _to_decimal(prediction, prediction_is_percent),\n+                        target,\n+                        max_relative_change,\n+                    ),\n+                    _compare_numeric_values(\n+                        prediction,\n+                        _to_decimal(target, target_is_percent),\n+                        max_relative_change,\n+                    ),\n+                )\n+            return value\n+\n+        prediction = _preprocess_text(prediction)\n+        prediction_float, prediction_is_percent = _to_float(prediction)\n+\n+        value_list = []\n+        for target in targets:\n+            target = _preprocess_text(target)\n+            target_float, target_is_percent = _to_float(target)\n+\n+            if prediction_float is not None and target_float is not None:\n+                # Compare as numeric values\n+                value = _compare_numeric_with_percent(\n+                    prediction_float,\n+                    prediction_is_percent,\n+                    target_float,\n+                    target_is_percent,\n+                    max_relative_change,\n+                )\n+            elif _is_letter(target) and len(prediction) > 0:\n+                # Compare as multiple choice options: take first letter from prediction\n+                value = 1.0 if prediction[0].lower() == target.lower() else 0.0\n+            else:\n+                # Compare as text values\n+                value = _compare_text_values(prediction, target)\n+\n+            value_list.append(value)\n+\n+        return max(value_list)\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        reference_answer = (\n+            reference_answer\n+            if isinstance(reference_answer, list)\n+            else [reference_answer]\n+        )\n+        return self._relaxed_correctness(model_answer, reference_answer)\n+\n+\n+class CoTRelaxedCorrectness(RelaxedCorrectness):",
        "path": "eval/metrics.py",
        "commit_id": "e3ba8c41a5a7790ab6ff25d098c10cd47090a05f",
        "original_commit_id": "12d30be764e59fea560ecc0d3c6b363b6e840009",
        "user": {
          "login": "sohamghosh121",
          "id": 2398819,
          "node_id": "MDQ6VXNlcjIzOTg4MTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2398819?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sohamghosh121",
          "html_url": "https://github.com/sohamghosh121",
          "followers_url": "https://api.github.com/users/sohamghosh121/followers",
          "following_url": "https://api.github.com/users/sohamghosh121/following{/other_user}",
          "gists_url": "https://api.github.com/users/sohamghosh121/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sohamghosh121/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sohamghosh121/subscriptions",
          "organizations_url": "https://api.github.com/users/sohamghosh121/orgs",
          "repos_url": "https://api.github.com/users/sohamghosh121/repos",
          "events_url": "https://api.github.com/users/sohamghosh121/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sohamghosh121/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "done!",
        "created_at": "2024-10-03T17:09:50Z",
        "updated_at": "2024-10-03T17:09:51Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1786569013",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1786569013"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1786569013"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1786569013/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 214,
        "side": "RIGHT",
        "in_reply_to_id": 1786549736,
        "original_position": 214,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1786576276",
        "pull_request_review_id": 2346197164,
        "id": 1786576276,
        "node_id": "PRRC_kwDOMxW0Oc5qfP2U",
        "diff_hunk": "@@ -0,0 +1,312 @@\n+import re\n+import string\n+\n+\n+def _normalize_string(s):\n+    if (s.startswith('\"') and s.endswith('\"')) or (\n+        s.startswith(\"'\") and s.endswith(\"'\")\n+    ):\n+        return s[1:-1]\n+    return s\n+\n+\n+def _remove_end_punctuation(unnormalized_string: str) -> str:\n+    while (\n+        unnormalized_string\n+        and (\n+            unnormalized_string[-1] in string.punctuation\n+            or unnormalized_string[-1].isspace()\n+        )\n+        and unnormalized_string[-1] != \"%\"\n+    ):\n+        unnormalized_string = unnormalized_string[:-1]\n+    return unnormalized_string\n+\n+\n+class Metric:\n+    \"\"\"Base class for metrics.\"\"\"\n+\n+    @property\n+    def name(self) -> str:\n+        raise NotImplementedError\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        raise NotImplementedError\n+\n+\n+class VQAMatch(Metric):\n+    \"\"\"VQA match metric which gives partial score if less than 3 answers are matched.\"\"\"\n+\n+    @property\n+    def name(self) -> str:\n+        return \"vqa_match\"\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        if not isinstance(reference_answer, list):\n+            reference_answer = [reference_answer]\n+        normalize_response_text: str = _normalize_string(model_answer)\n+        matching_answers = [\n+            answer\n+            for answer in reference_answer\n+            if _normalize_string(answer) == normalize_response_text\n+        ]\n+        return min(1.0, float(len(matching_answers)) / 3)\n+\n+\n+class ANLS(Metric):\n+    @property\n+    def name(self) -> str:\n+        return \"anls\"\n+\n+    def _edit_distance_helper(self, s1: str, s2: str) -> float:\n+        if len(s1) > len(s2):\n+            s1, s2 = s2, s1\n+        distances = list(range(len(s1) + 1))\n+        for i2, c2 in enumerate(s2):\n+            distance_list = [i2 + 1]\n+            for i1, c1 in enumerate(s1):\n+                if c1 == c2:\n+                    distance_list.append(distances[i1])\n+                else:\n+                    distance_list.append(\n+                        1 + min((distances[i1], distances[i1 + 1], distance_list[-1]))\n+                    )\n+            distances = distance_list\n+        return distances[-1]\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        if not isinstance(reference_answer, list):\n+            reference_answer = [reference_answer]\n+\n+        model_answer = \" \".join(model_answer.strip().lower().split())\n+        model_answer = _remove_end_punctuation(model_answer)\n+\n+        min_value = float(\"inf\")\n+        for ref in reference_answer:\n+            # Post-processing: Normalize spaces and remove punctuations.\n+            ref = \" \".join(ref.strip().lower().split())\n+            ref = _remove_end_punctuation(ref)\n+\n+            # Compute edit distance\n+            dist = self._edit_distance_helper(ref, model_answer)\n+            length = max(len(ref), len(model_answer))\n+            value = 0.0 if length == 0 else float(dist) / float(length)\n+            if value < min_value:\n+                min_value = value\n+\n+        anls_threshold = 0.0\n+        output = 0.0 if 1 - min_value < anls_threshold else 1 - min_value\n+        return output\n+\n+\n+class RelaxedCorrectness(Metric):\n+    \"\"\"Relaxed correctness metrics.\n+\n+    The correctness tolerates certain error ratio defined by max_relative_change.\n+    See https://arxiv.org/pdf/2203.10244.pdf, end of section 5.1:\n+    \"Following Methani et al. (2020), we use a relaxed accuracy measure for the\n+    numeric answers to allow a minor inaccuracy that may result from the automatic\n+    data extraction process. We consider an answer to be correct if it is within\n+    5% of the gold answer. For non-numeric answers, we still need an exact match\n+    to consider an answer to be correct.\"\n+    \"\"\"\n+\n+    def _relaxed_correctness(\n+        self, prediction: str, targets: list[str], max_relative_change: float = 0.05\n+    ) -> float:\n+        def _to_float(text: str) -> tuple[float | None, bool]:\n+            text = text.strip()\n+            is_percent = text.endswith(\"%\")\n+            try:\n+                value = float(text.rstrip(\"%\"))\n+                return value, is_percent\n+            except ValueError:\n+                return None, False\n+\n+        def _is_letter(text: str) -> bool:\n+            return text.isalpha() and len(text) == 1\n+\n+        def _preprocess_text(text: str) -> str:\n+            if not any(char.isdigit() for char in text):\n+                return _normalize_string(text)\n+            else:\n+                return _remove_end_punctuation(text).replace(\",\", \"\").replace(\"$\", \"\")\n+\n+        def calculate_relative_change(prediction: float, target: float) -> float:\n+            return abs(prediction - target) / max(abs(target), 1e-10)\n+\n+        def _compare_numeric_values(\n+            prediction: float, target: float, max_relative_change: float\n+        ) -> float:\n+            relative_change = calculate_relative_change(prediction, target)\n+            return 1.0 if relative_change <= max_relative_change else 0.0\n+\n+        def _compare_text_values(prediction: str, target: str) -> float:\n+            return 1.0 if prediction.lower() == target.lower() else 0.0\n+\n+        def _to_decimal(value: float, is_percent: bool) -> float:\n+            return value / 100 if is_percent else value\n+\n+        def _compare_numeric_with_percent(\n+            prediction: float,\n+            prediction_is_percent: bool,\n+            target: float,\n+            target_is_percent: bool,\n+            max_relative_change: float,\n+        ) -> float:\n+            # Compare as-is\n+            value = _compare_numeric_values(prediction, target, max_relative_change)\n+\n+            # If not equal and one is percent, try other comparisons\n+            if value != 1.0 and (prediction_is_percent or target_is_percent):\n+                value = max(\n+                    value,\n+                    _compare_numeric_values(\n+                        _to_decimal(prediction, prediction_is_percent),\n+                        target,\n+                        max_relative_change,\n+                    ),\n+                    _compare_numeric_values(\n+                        prediction,\n+                        _to_decimal(target, target_is_percent),\n+                        max_relative_change,\n+                    ),\n+                )\n+            return value\n+\n+        prediction = _preprocess_text(prediction)\n+        prediction_float, prediction_is_percent = _to_float(prediction)\n+\n+        value_list = []\n+        for target in targets:\n+            target = _preprocess_text(target)\n+            target_float, target_is_percent = _to_float(target)\n+\n+            if prediction_float is not None and target_float is not None:\n+                # Compare as numeric values\n+                value = _compare_numeric_with_percent(\n+                    prediction_float,\n+                    prediction_is_percent,\n+                    target_float,\n+                    target_is_percent,\n+                    max_relative_change,\n+                )\n+            elif _is_letter(target) and len(prediction) > 0:\n+                # Compare as multiple choice options: take first letter from prediction\n+                value = 1.0 if prediction[0].lower() == target.lower() else 0.0\n+            else:\n+                # Compare as text values\n+                value = _compare_text_values(prediction, target)\n+\n+            value_list.append(value)\n+\n+        return max(value_list)\n+\n+    def score(self, model_answer: str, reference_answer: str | list[str]) -> float:\n+        reference_answer = (\n+            reference_answer\n+            if isinstance(reference_answer, list)\n+            else [reference_answer]\n+        )\n+        return self._relaxed_correctness(model_answer, reference_answer)\n+\n+\n+class CoTRelaxedCorrectness(RelaxedCorrectness):\n+    \"\"\"Relaxed correctness for CoT-style outputs.\"\"\"\n+\n+    @property\n+    def name(self) -> str:\n+        return \"cot_relaxed_correctness\"",
        "path": "eval/metrics.py",
        "commit_id": "e3ba8c41a5a7790ab6ff25d098c10cd47090a05f",
        "original_commit_id": "12d30be764e59fea560ecc0d3c6b363b6e840009",
        "user": {
          "login": "sohamghosh121",
          "id": 2398819,
          "node_id": "MDQ6VXNlcjIzOTg4MTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2398819?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sohamghosh121",
          "html_url": "https://github.com/sohamghosh121",
          "followers_url": "https://api.github.com/users/sohamghosh121/followers",
          "following_url": "https://api.github.com/users/sohamghosh121/following{/other_user}",
          "gists_url": "https://api.github.com/users/sohamghosh121/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sohamghosh121/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sohamghosh121/subscriptions",
          "organizations_url": "https://api.github.com/users/sohamghosh121/orgs",
          "repos_url": "https://api.github.com/users/sohamghosh121/repos",
          "events_url": "https://api.github.com/users/sohamghosh121/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sohamghosh121/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "done",
        "created_at": "2024-10-03T17:13:27Z",
        "updated_at": "2024-10-03T17:13:27Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1786576276",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1786576276"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/3#discussion_r1786576276"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/3"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1786576276/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 219,
        "side": "RIGHT",
        "in_reply_to_id": 1786550250,
        "original_position": 219,
        "position": null,
        "subject_type": "line"
      }
    ]
  },
  "1": {
    "issue_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/issues/comments/2357713203",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/1#issuecomment-2357713203",
        "issue_url": "https://api.github.com/repos/mistralai/mistral-evals/issues/1",
        "id": 2357713203,
        "node_id": "IC_kwDOMxW0Oc6Mh9kz",
        "user": {
          "login": "timlacroix",
          "id": 4998695,
          "node_id": "MDQ6VXNlcjQ5OTg2OTU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4998695?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/timlacroix",
          "html_url": "https://github.com/timlacroix",
          "followers_url": "https://api.github.com/users/timlacroix/followers",
          "following_url": "https://api.github.com/users/timlacroix/following{/other_user}",
          "gists_url": "https://api.github.com/users/timlacroix/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/timlacroix/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/timlacroix/subscriptions",
          "organizations_url": "https://api.github.com/users/timlacroix/orgs",
          "repos_url": "https://api.github.com/users/timlacroix/repos",
          "events_url": "https://api.github.com/users/timlacroix/events{/privacy}",
          "received_events_url": "https://api.github.com/users/timlacroix/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-09-18T07:30:22Z",
        "updated_at": "2024-09-18T07:30:22Z",
        "author_association": "NONE",
        "body": "shouldn't we use some sort of HF dataset for the dataset ? I think that would be the expectation from the OSS community no ?",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/issues/comments/2357713203/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/issues/comments/2359080816",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/1#issuecomment-2359080816",
        "issue_url": "https://api.github.com/repos/mistralai/mistral-evals/issues/1",
        "id": 2359080816,
        "node_id": "IC_kwDOMxW0Oc6MnLdw",
        "user": {
          "login": "sohamghosh121",
          "id": 2398819,
          "node_id": "MDQ6VXNlcjIzOTg4MTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2398819?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sohamghosh121",
          "html_url": "https://github.com/sohamghosh121",
          "followers_url": "https://api.github.com/users/sohamghosh121/followers",
          "following_url": "https://api.github.com/users/sohamghosh121/following{/other_user}",
          "gists_url": "https://api.github.com/users/sohamghosh121/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sohamghosh121/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sohamghosh121/subscriptions",
          "organizations_url": "https://api.github.com/users/sohamghosh121/orgs",
          "repos_url": "https://api.github.com/users/sohamghosh121/repos",
          "events_url": "https://api.github.com/users/sohamghosh121/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sohamghosh121/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "created_at": "2024-09-18T17:54:16Z",
        "updated_at": "2024-09-18T17:54:16Z",
        "author_association": "CONTRIBUTOR",
        "body": "> shouldn't we use some sort of HF dataset for the dataset ? I think that would be the expectation from the OSS community no ?\r\n\r\nupdated to use HF dataset (an internal discussion at some point suggested not using it, but we decided to go back to HF)",
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/issues/comments/2359080816/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "performed_via_github_app": null
      }
    ],
    "review_comments": [
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1764544621",
        "pull_request_review_id": 2311863884,
        "id": 1764544621,
        "node_id": "PRRC_kwDOMxW0Oc5pLNBt",
        "diff_hunk": "@@ -0,0 +1,116 @@\n+aiohappyeyeballs==2.4.0",
        "path": "requirements.txt",
        "commit_id": "892be1228ac11cd8ec2a66cf84200024e822c7ad",
        "original_commit_id": "9642d2b902eb8444cd4aa93dc94d86cbe17d9ab8",
        "user": {
          "login": "timlacroix",
          "id": 4998695,
          "node_id": "MDQ6VXNlcjQ5OTg2OTU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4998695?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/timlacroix",
          "html_url": "https://github.com/timlacroix",
          "followers_url": "https://api.github.com/users/timlacroix/followers",
          "following_url": "https://api.github.com/users/timlacroix/following{/other_user}",
          "gists_url": "https://api.github.com/users/timlacroix/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/timlacroix/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/timlacroix/subscriptions",
          "organizations_url": "https://api.github.com/users/timlacroix/orgs",
          "repos_url": "https://api.github.com/users/timlacroix/repos",
          "events_url": "https://api.github.com/users/timlacroix/events{/privacy}",
          "received_events_url": "https://api.github.com/users/timlacroix/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "probably not everything in here (all the nvidia cuda things ?) is actually required. \r\n\r\nThis should be minimal both in version precision and number of packages",
        "created_at": "2024-09-18T07:31:36Z",
        "updated_at": "2024-09-18T07:31:37Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/1#discussion_r1764544621",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/1",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1764544621"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/1#discussion_r1764544621"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/1"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1764544621/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 1,
        "side": "RIGHT",
        "original_position": 1,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1765478459",
        "pull_request_review_id": 2313385332,
        "id": 1765478459,
        "node_id": "PRRC_kwDOMxW0Oc5pOxA7",
        "diff_hunk": "@@ -0,0 +1,116 @@\n+aiohappyeyeballs==2.4.0",
        "path": "requirements.txt",
        "commit_id": "892be1228ac11cd8ec2a66cf84200024e822c7ad",
        "original_commit_id": "9642d2b902eb8444cd4aa93dc94d86cbe17d9ab8",
        "user": {
          "login": "sohamghosh121",
          "id": 2398819,
          "node_id": "MDQ6VXNlcjIzOTg4MTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2398819?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sohamghosh121",
          "html_url": "https://github.com/sohamghosh121",
          "followers_url": "https://api.github.com/users/sohamghosh121/followers",
          "following_url": "https://api.github.com/users/sohamghosh121/following{/other_user}",
          "gists_url": "https://api.github.com/users/sohamghosh121/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sohamghosh121/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sohamghosh121/subscriptions",
          "organizations_url": "https://api.github.com/users/sohamghosh121/orgs",
          "repos_url": "https://api.github.com/users/sohamghosh121/repos",
          "events_url": "https://api.github.com/users/sohamghosh121/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sohamghosh121/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "updated, I had done pip freeze, but didn't know that dumps eeeverything.",
        "created_at": "2024-09-18T17:53:40Z",
        "updated_at": "2024-09-18T17:53:40Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/1#discussion_r1765478459",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1765478459"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/1#discussion_r1765478459"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/1"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1765478459/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 1,
        "side": "RIGHT",
        "in_reply_to_id": 1764544621,
        "original_position": 1,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1765508896",
        "pull_request_review_id": 2313436984,
        "id": 1765508896,
        "node_id": "PRRC_kwDOMxW0Oc5pO4cg",
        "diff_hunk": "@@ -0,0 +1,434 @@\n+import ast\n+import base64\n+import dataclasses\n+import io\n+import json\n+import os\n+import re\n+import sys\n+import time\n+from collections import defaultdict\n+from concurrent.futures import ThreadPoolExecutor, as_completed\n+from pathlib import Path\n+from typing import Any, Callable, Generator, Optional, Sequence\n+\n+import fire\n+import numpy as np\n+import openai\n+import requests\n+import tqdm\n+from datasets import load_dataset\n+from PIL import Image\n+\n+JUDGES = frozenset(\n+    [\n+        \"gpt-4o-2024-05-13\",\n+    ]\n+)\n+DATA_PATH = Path(\"eval/data/mm_mt_bench/data.jsonl\")",
        "path": "eval/mm_mt_bench.py",
        "commit_id": "892be1228ac11cd8ec2a66cf84200024e822c7ad",
        "original_commit_id": "05cca312eb3e4863cc0f9bb627f4082db90f2d00",
        "user": {
          "login": "theophilegervet",
          "id": 14276221,
          "node_id": "MDQ6VXNlcjE0Mjc2MjIx",
          "avatar_url": "https://avatars.githubusercontent.com/u/14276221?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/theophilegervet",
          "html_url": "https://github.com/theophilegervet",
          "followers_url": "https://api.github.com/users/theophilegervet/followers",
          "following_url": "https://api.github.com/users/theophilegervet/following{/other_user}",
          "gists_url": "https://api.github.com/users/theophilegervet/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/theophilegervet/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/theophilegervet/subscriptions",
          "organizations_url": "https://api.github.com/users/theophilegervet/orgs",
          "repos_url": "https://api.github.com/users/theophilegervet/repos",
          "events_url": "https://api.github.com/users/theophilegervet/events{/privacy}",
          "received_events_url": "https://api.github.com/users/theophilegervet/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Not needed anymore?",
        "created_at": "2024-09-18T18:19:22Z",
        "updated_at": "2024-09-18T18:19:22Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/1#discussion_r1765508896",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/1",
        "author_association": "NONE",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1765508896"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/1#discussion_r1765508896"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/1"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1765508896/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 28,
        "side": "RIGHT",
        "original_position": 28,
        "position": null,
        "subject_type": "line"
      },
      {
        "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1766227335",
        "pull_request_review_id": 2314507419,
        "id": 1766227335,
        "node_id": "PRRC_kwDOMxW0Oc5pRn2H",
        "diff_hunk": "@@ -0,0 +1,434 @@\n+import ast\n+import base64\n+import dataclasses\n+import io\n+import json\n+import os\n+import re\n+import sys\n+import time\n+from collections import defaultdict\n+from concurrent.futures import ThreadPoolExecutor, as_completed\n+from pathlib import Path\n+from typing import Any, Callable, Generator, Optional, Sequence\n+\n+import fire\n+import numpy as np\n+import openai\n+import requests\n+import tqdm\n+from datasets import load_dataset\n+from PIL import Image\n+\n+JUDGES = frozenset(\n+    [\n+        \"gpt-4o-2024-05-13\",\n+    ]\n+)\n+DATA_PATH = Path(\"eval/data/mm_mt_bench/data.jsonl\")",
        "path": "eval/mm_mt_bench.py",
        "commit_id": "892be1228ac11cd8ec2a66cf84200024e822c7ad",
        "original_commit_id": "05cca312eb3e4863cc0f9bb627f4082db90f2d00",
        "user": {
          "login": "sohamghosh121",
          "id": 2398819,
          "node_id": "MDQ6VXNlcjIzOTg4MTk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2398819?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sohamghosh121",
          "html_url": "https://github.com/sohamghosh121",
          "followers_url": "https://api.github.com/users/sohamghosh121/followers",
          "following_url": "https://api.github.com/users/sohamghosh121/following{/other_user}",
          "gists_url": "https://api.github.com/users/sohamghosh121/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/sohamghosh121/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/sohamghosh121/subscriptions",
          "organizations_url": "https://api.github.com/users/sohamghosh121/orgs",
          "repos_url": "https://api.github.com/users/sohamghosh121/repos",
          "events_url": "https://api.github.com/users/sohamghosh121/events{/privacy}",
          "received_events_url": "https://api.github.com/users/sohamghosh121/received_events",
          "type": "User",
          "user_view_type": "public",
          "site_admin": false
        },
        "body": "Removed!",
        "created_at": "2024-09-19T06:24:59Z",
        "updated_at": "2024-09-19T06:24:59Z",
        "html_url": "https://github.com/mistralai/mistral-evals/pull/1#discussion_r1766227335",
        "pull_request_url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/1",
        "author_association": "CONTRIBUTOR",
        "_links": {
          "self": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1766227335"
          },
          "html": {
            "href": "https://github.com/mistralai/mistral-evals/pull/1#discussion_r1766227335"
          },
          "pull_request": {
            "href": "https://api.github.com/repos/mistralai/mistral-evals/pulls/1"
          }
        },
        "reactions": {
          "url": "https://api.github.com/repos/mistralai/mistral-evals/pulls/comments/1766227335/reactions",
          "total_count": 0,
          "+1": 0,
          "-1": 0,
          "laugh": 0,
          "hooray": 0,
          "confused": 0,
          "heart": 0,
          "rocket": 0,
          "eyes": 0
        },
        "start_line": null,
        "original_start_line": null,
        "start_side": null,
        "line": null,
        "original_line": 28,
        "side": "RIGHT",
        "in_reply_to_id": 1765508896,
        "original_position": 28,
        "position": null,
        "subject_type": "line"
      }
    ]
  }
}